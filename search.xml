<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>fail2ban,运维们首选的&quot;看门狗&quot;</title>
    <url>/2019/07/14/fail2ban/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用Fail2ban结合iptables来协助运维们阻止某些恶意的端口扫描和ssh密码破解.只要达到规定设置的失败次数,根据逻辑规则,该ip地址会自动被加入iptable黑名单之内.</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://www.jianshu.com/p/4fdec5794d08" target="_blank" rel="external">CentOS7下安装和使用Fail2ban</a></li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>fail2ban</tag>
      </tags>
  </entry>
  <entry>
    <title>放开你的鼠标,让我来！！</title>
    <url>/2019/07/13/coding-without-mouse/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用笔记本电脑之后已经习惯使用触摸板代替鼠标,编程的时候利用编辑器的快捷方式可以进一步抛弃触摸板.对于一个轻度的洁癖者而言,保持桌面尽量干净整洁是多么舒服的一件事哈.</p>
<h2 id="参看资料"><a href="#参看资料" class="headerlink" title="参看资料"></a>参看资料</h2><p><a href="https://isudox.com/2017/06/25/coding-with-keyboard-no-mouse/" target="_blank" rel="external">扔掉鼠标，开始键盘流编程</a></p>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>knack</tag>
      </tags>
  </entry>
  <entry>
    <title>Zabbix告警机制与应用</title>
    <url>/2019/07/11/Head-First-Zabbix-Alert-System/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><!-- 使用Zabbix监控主机信息并做相应的告警,本文主要介绍告警机制以及相应的配置,第三方告警机器人.比如钉钉机器人,企业微信,电报机器人等. -->
<p>节点主机就像运维人员的孩子一样,需要时刻去关注各个节点主机的情况.运维需要合理利用Zabbix这样的高级管家帮我们了解节点主机的各项指标,一旦待监控指标特征值异常需要及时发起告警.<br>更重要的是,我们希望能实现阶梯式告警,不用事事必躬.这样可以根据问题的轻重缓急及时有效的通知到特定的群体组织.</p>
<h2 id="告警机制"><a href="#告警机制" class="headerlink" title="告警机制"></a>告警机制</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>Zabbix告警机制主要在于三项指标:监控项(items),触发器(triggers),动作(actions).根据具体的业务类型组合成各种不同模板(templates).</p>
<ul>
<li><strong>监控项</strong>: 为节点主机配置好不同的监控项,让zabbix-agent收集主机的相关特征值.比如CPU,内存,进程数,服务器负载等.</li>
</ul>
<p><img src="http://resource.blog.terrancy.com//article/zabbix/zabbix-items1.jpg" alt="监控项"><br><strong><em>监控项中的”更新间隔”即是数据采集频率.</em></strong></p>
<ul>
<li><strong>触发器</strong>:在触发器设置好临界指标(表达式)和警报级别(严重性),当满足条件时执行相应的动作.</li>
</ul>
<p><img src="http://resource.blog.terrancy.com//article/zabbix/zabbix-triggers.jpg" alt="触发器"></p>
<ul>
<li><strong>动作</strong>:zabbix监控到异常数据需要发起警报动作.通过媒体介质(meida type)通知相关人员.<br>可以在动作配置中设置好告警频率(默认操作步骤持续时间)以及告警次数(步骤).</li>
</ul>
<p><img src="http://resource.blog.terrancy.com//article/zabbix/zabbix-actions1.jpg" alt="动作"></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h2 id="告警应用"><a href="#告警应用" class="headerlink" title="告警应用"></a>告警应用</h2><p>关于告警的应用,根据问题的情况实际情况使用不同的通知方式.比如邮件告警,钉钉告警,电报告警,短信告警甚至使用电话语音告警.将问题最有效的通知到指定的群组.以下简单介绍邮件和钉钉告警的配置与使用.</p>
<h3 id="邮件告警"><a href="#邮件告警" class="headerlink" title="邮件告警"></a>邮件告警</h3><h4 id="邮件配置"><a href="#邮件配置" class="headerlink" title="邮件配置"></a>邮件配置</h4><p>在zabbix平台上找到管理-&gt;报警媒介类型列表,找到Email选项.填写邮件服务器相关信息.参照腾讯<a href="https://service.exmail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=28&amp;&amp;no=1001254" target="_blank" rel="external">企业邮箱</a>的邮件服务器配置,以下以腾讯企业邮箱SMTP协议配置为例.相关配置实例图如下,</p>
<p><img src="http://resource.blog.terrancy.com/article/zabbix/zabbix-email1.jpg" alt="Zabbix告警邮件配置"></p>
<p>如上所示,邮件配置涉及到如下.</p>
<table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>SMTP服务器</td>
<td style="text-align:center">smtp.exmail.qq.com</td>
</tr>
<tr>
<td>端口</td>
<td style="text-align:center">465(使用的是SSL协议)</td>
</tr>
<tr>
<td>SMTP电邮</td>
<td style="text-align:center">发件人邮箱,比如notice@terrancy.com</td>
</tr>
<tr>
<td>用户名称</td>
<td style="text-align:center">发件人邮箱,比如notice@terrancy.com</td>
</tr>
<tr>
<td>密码</td>
<td style="text-align:center">发件人邮件密码</td>
</tr>
</tbody>
</table>
<h4 id="微信通知"><a href="#微信通知" class="headerlink" title="微信通知"></a>微信通知</h4><p>使用腾讯企业邮箱结合微信小程序.在<strong>下班</strong>时间期间,将所有的警报通过微信小程序及时通知相关干系人.</p>
<h3 id="钉钉告警"><a href="#钉钉告警" class="headerlink" title="钉钉告警"></a>钉钉告警</h3><p>使用钉钉群内机器人.在<strong>上班</strong>期间,将警报信息通知到相关人员.</p>
<h4 id="申请机器人"><a href="#申请机器人" class="headerlink" title="申请机器人"></a>申请机器人</h4><ul>
<li>在钉钉群设置里面选择”自定义”机器人,输入机器人名字和需要发送消息的群之后可以获得相应的Hook地址.其格式如下:</li>
</ul>
<blockquote>
<p><a href="https://oapi.dingtalk.com/robot/send?access_token=xxxxxxxx" target="_blank" rel="external">https://oapi.dingtalk.com/robot/send?access_token=xxxxxxxx</a></p>
</blockquote>
<p><img src="http://img01.taobaocdn.com/top/i1/LB1lIUlPFXXXXbGXFXXXXXXXXXX#align=left&amp;display=inline&amp;height=294&amp;originHeight=1372&amp;originWidth=2088&amp;status=done&amp;width=447" alt="钉钉自定义群机器人申请"></p>
<h4 id="消息推送"><a href="#消息推送" class="headerlink" title="消息推送"></a>消息推送</h4><p>通过官方提供的<a href="https://open-doc.dingtalk.com/microapp/serverapi2/qf2nxq" target="_blank" rel="external">消息推送API</a>,将消息推送指定的钉钉运维群.</p>
<ul>
<li>推送的参数实例:</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"msgtype"</span>: <span class="string">"text"</span>,</div><div class="line">    <span class="attr">"text"</span>: &#123;</div><div class="line">        <span class="attr">"content"</span>: <span class="string">"这是消息推送的内容"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"at"</span>: &#123;</div><div class="line">        <span class="attr">"atMobiles"</span>: [</div><div class="line">        ],</div><div class="line">        <span class="attr">"isAtAll"</span>: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>参数说明:</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">参数类型</th>
<th style="text-align:center">必须</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>msgtype</td>
<td style="text-align:center">String</td>
<td style="text-align:center">是</td>
<td style="text-align:center">消息类型，此时固定为：text</td>
</tr>
<tr>
<td>content</td>
<td style="text-align:center">String</td>
<td style="text-align:center">是</td>
<td style="text-align:center">消息内容</td>
</tr>
<tr>
<td>atMobiles</td>
<td style="text-align:center">Array</td>
<td style="text-align:center">否</td>
<td style="text-align:center">被@人的手机号(在content里添加@人的手机号)</td>
</tr>
<tr>
<td>isAtAll</td>
<td style="text-align:center">bool</td>
<td style="text-align:center">否</td>
<td style="text-align:center">@所有人时：true，否则为：false</td>
</tr>
</tbody>
</table>
<ul>
<li>告警脚本<br>根据钉钉自定义机器人文本消息推送API,可以写个精简的告警脚本.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment">#dingding.sh</span></div><div class="line"></div><div class="line">webhook=<span class="string">"https://oapi.dingtalk.com/robot/send?access_token=xxxxxxxx"</span></div><div class="line">user=<span class="variable">$1</span></div><div class="line">text=<span class="variable">$3</span></div><div class="line">data=<span class="string">'&#123;"msgtype":"text","text":&#123;"content":$&#123;text&#125;&#125;,"at":&#123;"atMobiles":[$&#123;user&#125;],"isAtAll":false&#125;&#125;'</span></div><div class="line"></div><div class="line">headers=<span class="string">'Content-Type: application/json'</span></div><div class="line">curl <span class="string">"<span class="variable">$&#123;webhook&#125;</span>"</span> -H <span class="string">"<span class="variable">$&#123;headers&#125;</span>"</span> <span class="_">-d</span> <span class="string">"<span class="variable">$&#123;data&#125;</span>"</span></div></pre></td></tr></table></figure>
<p>将相应的bash脚本存放在zabbix告警文件夹(比如/usr/lib/zabbix/alertscripts),并赋予其相应的权限.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">find / -name alertscripts</div><div class="line">chown -R zabbix:zabbix /usr/lib/zabbix/alertscripts</div><div class="line">chown -R 755 /usr/lib/zabbix/alertscripts</div></pre></td></tr></table></figure>
<p>在Zabbix平台的配置如下图所示.<br><img src="http://resource.blog.terrancy.com/article/zabbix/zabbix-ding1.jpg" alt="Zabbix告警钉钉配置"></p>
<h3 id="其他警告"><a href="#其他警告" class="headerlink" title="其他警告"></a>其他警告</h3><p>微信告警和钉钉告警是针对在国内情况下常用警报方式,如果是在国外可以选择使用电报机器人.</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://www.cnblogs.com/hjfeng1988/p/9645028.html" target="_blank" rel="external">Zabbix数据采集频率.数据连续多次异常触发.告警次数.告警频率</a></li>
<li><a href="https://open-doc.dingtalk.com/microapp/serverapi2/qf2nxq" target="_blank" rel="external">钉钉-群机器人-自定义机器人</a></li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>Zabbix应用实例初探</title>
    <url>/2019/07/09/Head-First-Zabbix/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着业务项目的逐渐增加,一个项目的可能就需要好几个服务器.如果有好几个项目一起管理的话,运维手上的服务器少则十几个多则上百个很正常.运维不可能按照以往处理单服务器的方式解决问题,需要有个高效并且好用的服务器管家来协助他们处理服务器问题,运维的要求很简单,比如监控服务器性能并即时告警.这样的运维监控系统,既可以缓解运维管理压力,又大大减低运维门槛.</p>
<p>市场上流行运维监控系统有很多,这里简单讲解下Zabbix基础知识.</p>
<h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p>zabbix使用的是master/agent方式.我们将zabbix-agent部署在节点主机上,有agent负责收集相关的数据.zabbix-server作为中心服务器,负责接收并监控节点主机的信息并做及时处理.<br><img src="http://resource.blog.terrancy.com/article/zabbixzabbix-framework1.png" alt="zabbix架构"></p>
<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><ul>
<li>zabbix agent:部署在节点主机上,负责收集节点主机信息,并发送给zabbix-server.</li>
<li>zabbix server:负责接收数据,监控并处理.</li>
<li>zabbix web:可视化管理界面,查看监控数据和配置告警等等.</li>
</ul>
<h3 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h3><p>zabbix工作分为主动模式和被动模式.</p>
<ul>
<li>主动模式:agent负责收集数据,将收集的信息<strong>主动</strong>发送给server端,称之为主动模式.</li>
<li>被动模式:agent只负责收集数据,等待server端来<strong>拉取</strong>数据,称之为被动模式.</li>
</ul>
<p>特别的,主动模式和被动模式可以同时开启,两者并不冲突.配置在agent配置文件上.</p>
<h2 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h2><h3 id="server端部署"><a href="#server端部署" class="headerlink" title="server端部署"></a>server端部署</h3><p>测试环境下,Server端选择使用docker方式部署zabbix.这里参考网上的文档使用docker编排工具编译.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><div class="line"><span class="attr">version:</span> <span class="string">'3'</span></div><div class="line"><span class="attr">services:</span></div><div class="line"><span class="attr">  mysql:</span></div><div class="line"><span class="attr">    image:</span> swr.cn-north<span class="bullet">-1.</span>myhuaweicloud.com/rj-bai/zabbix-mysql:<span class="number">5.7</span></div><div class="line"><span class="attr">    environment:</span></div><div class="line"><span class="attr">      MYSQL_USER:</span> zabbix</div><div class="line"><span class="attr">      MYSQL_DATABASE:</span> zabbix</div><div class="line"><span class="attr">      MYSQL_PASSWORD:</span> zabbix</div><div class="line"><span class="attr">      MYSQL_ROOT_PASSWORD:</span> Sowhat?</div><div class="line"><span class="attr">    volumes:</span></div><div class="line"><span class="bullet">      -</span> /data/mysql/zabbix:/var/lib/mysql</div><div class="line"><span class="attr">    ports:</span></div><div class="line"><span class="bullet">      -</span> <span class="number">3306</span>:<span class="number">3306</span></div><div class="line"><span class="attr">    restart:</span> always</div><div class="line"><span class="attr">    networks:</span></div><div class="line"><span class="bullet">      -</span> zabbix</div><div class="line"></div><div class="line"><span class="attr">  zabbix-java-gateway:</span></div><div class="line"><span class="attr">    image:</span> swr.cn-north<span class="bullet">-1.</span>myhuaweicloud.com/rj-bai/zabbix-java-gateway:<span class="number">4.0</span><span class="number">.1</span></div><div class="line"><span class="attr">    ports:</span></div><div class="line"><span class="bullet">      -</span> <span class="number">10052</span>:<span class="number">10052</span></div><div class="line"><span class="attr">    restart:</span> always</div><div class="line"><span class="attr">    networks:</span></div><div class="line"><span class="bullet">      -</span> zabbix</div><div class="line"></div><div class="line"><span class="attr">  zabbix-server:</span></div><div class="line"><span class="attr">    image:</span> swr.cn-north<span class="bullet">-1.</span>myhuaweicloud.com/rj-bai/zabbix-server:<span class="number">4.0</span><span class="number">.1</span></div><div class="line"><span class="attr">    environment:</span></div><div class="line"><span class="attr">      ZBX_JAVAGATEWAY:</span> zabbix-java-gateway</div><div class="line"><span class="attr">      ZBX_JAVAGATEWAY_ENABLE:</span> <span class="string">"true"</span></div><div class="line"><span class="attr">      DB_SERVER_HOST:</span> mysql</div><div class="line"><span class="attr">      MYSQL_DATABASE:</span> zabbix</div><div class="line"><span class="attr">      MYSQL_USER:</span> zabbix</div><div class="line"><span class="attr">      MYSQL_PASSWORD:</span> zabbix</div><div class="line"><span class="attr">      MYSQL_ROOT_PASSWORD:</span> Sowhat?</div><div class="line"><span class="attr">    links:</span></div><div class="line"><span class="bullet">      -</span> mysql</div><div class="line"><span class="attr">    ports:</span></div><div class="line"><span class="bullet">      -</span> <span class="number">10051</span>:<span class="number">10051</span></div><div class="line"><span class="attr">    depends_on:</span></div><div class="line"><span class="bullet">      -</span> mysql</div><div class="line"><span class="attr">    restart:</span> always</div><div class="line"><span class="attr">    networks:</span></div><div class="line"><span class="bullet">      -</span> zabbix</div><div class="line"></div><div class="line"><span class="attr">  zabbix-web:</span></div><div class="line"><span class="attr">    image:</span> swr.cn-north<span class="bullet">-1.</span>myhuaweicloud.com/rj-bai/zabbix-web:<span class="number">4.0</span><span class="number">.1</span></div><div class="line"><span class="attr">    environment:</span></div><div class="line"><span class="attr">      PHP_TZ:</span> Asia/Shanghai</div><div class="line"><span class="attr">      DB_SERVER_HOST:</span> mysql</div><div class="line"><span class="attr">      MYSQL_DATABASE:</span> zabbix</div><div class="line"><span class="attr">      MYSQL_USER:</span> zabbix</div><div class="line"><span class="attr">      MYSQL_PASSWORD:</span> zabbix</div><div class="line"><span class="attr">      MYSQL_ROOT_PASSWORD:</span> Sowhat?</div><div class="line"><span class="attr">    links:</span></div><div class="line"><span class="bullet">      -</span> mysql   </div><div class="line"><span class="attr">    ports:</span></div><div class="line"><span class="bullet">      -</span> <span class="number">80</span>:<span class="number">80</span></div><div class="line"><span class="attr">    depends_on:</span></div><div class="line"><span class="bullet">      -</span> zabbix-server</div><div class="line"><span class="bullet">      -</span> mysql</div><div class="line"><span class="attr">    restart:</span> always</div><div class="line"><span class="attr">    networks:</span></div><div class="line"><span class="bullet">      -</span> zabbix</div><div class="line"></div><div class="line"><span class="attr">networks:</span></div><div class="line"><span class="attr">  zabbix:</span></div><div class="line"><span class="attr">    driver:</span> bridge</div></pre></td></tr></table></figure>
<p>部署后的容器信息如下:</p>
<p><img src="http://resource.blog.terrancy.com/article/zabbixzabbix-docker1.jpg" alt="zabbix-master-dockers"></p>
<h3 id="agent端部署"><a href="#agent端部署" class="headerlink" title="agent端部署"></a>agent端部署</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">rpm -i https://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-1.el7.noarch.rpm</div><div class="line">yum -y install zabbix-agent-4.0.1</div></pre></td></tr></table></figure>
<p>安装后的配置文件如下:</p>
<p><img src="http://resource.blog.terrancy.com/article/zabbixzabbix-agent-docker1.jpg" alt="agent端配置"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.zsythink.net/archives/447/" target="_blank" rel="external">zabbix入门</a></li>
<li><a href="https://blog.rj-bai.com/post/144.html" target="_blank" rel="external">zabbix docker部署</a></li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>跑步心得体会</title>
    <url>/2019/03/10/the-basical-tutorial-about-running/</url>
    <content><![CDATA[<p><img src="https://images.chinatimes.com/newsphoto/2019-04-24/900/20190424001780.jpg" alt="跑者马拉松"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相信有很多人觉得自己胖了,尝试通过跑步来减重.有些人确实做到了,也有很多人放弃了.<br>那么,跑步究竟能否起到减重的效果吗?现我们来稍微分析下.</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h4 id="1-减重为什么要去跑步"><a href="#1-减重为什么要去跑步" class="headerlink" title="1.减重为什么要去跑步?"></a>1.减重为什么要去跑步?</h4><ul>
<li><p>[x] <strong><em>成本低</em></strong><br>跑步需要一双舒适的运动跑鞋,加上一套吸汗干爽的衣服就足够.成本普遍在400左右甚至更低.(真想玩,其实也烧钱)</p>
</li>
<li><p>[x] <strong><em>场地多</em></strong><br>跑步对场地要求相对较低.秋高清爽的清晨里试试下公路跑,微风习习的夜半里挑战公园绕圈跑等等.<br>厦门随处可见的 <strong>公园</strong>,<strong>湖边水库</strong>,<strong>五缘湾湿地公园</strong>,<strong>圆博园</strong>,还有很多环岛跑道都是不错的跑步场地,真可谓是跑者的天堂.</p>
</li>
<li><p>[x] <strong><em>反馈直接</em></strong><br>坚持跑步的人精神状态相对良好.日常新陈代谢相对更快,身体机能相对更加年轻.</p>
</li>
<li><p>[x] <strong><em>伤痛少</em></strong><br>跑步属于有氧运动,对身体的伤害相对少,恢复快.正常人跑一休一基本上没问题.属于全身性运动.</p>
</li>
</ul>
<h4 id="2-我们真的会跑步吗"><a href="#2-我们真的会跑步吗" class="headerlink" title="2.我们真的会跑步吗?"></a>2.我们真的会跑步吗?</h4><ul>
<li><p>[x] <strong><em>跑不远</em></strong><br>感觉跑了好久实际上还不到1公里,真是煎熬.<strong>心累!</strong></p>
</li>
<li><p>[x] <strong><em>膝盖疼</em></strong><br>好多次勉强说服自己坚持跑下来,现在每次跑步发现膝盖疼了.<strong>肉疼!</strong></p>
</li>
<li><p>[x] <strong><em>没用</em></strong><br>跑了那么久了,一开始体重有明显消减下来,现在基本上维持不变.<strong>无解!</strong></p>
</li>
</ul>
<h2 id="跑步"><a href="#跑步" class="headerlink" title="跑步"></a>跑步</h2><p>跑步算是一项全民性全身性的运动.之所以说它是一项运动,在于它与其他运动有着相同的特点.</p>
<h3 id="科学选鞋"><a href="#科学选鞋" class="headerlink" title="科学选鞋"></a><a href="https://mp.weixin.qq.com/s/8XlKysMJ6TSxsJR3ynEUzg" target="_blank" rel="external">科学选鞋</a></h3><p>足弓是选鞋的核心依据,我们可以通过一些简单的测试来判断我们的足弓类型(正常足、扁平足弓或是高足弓)，从而帮助您选择一双合适的跑鞋.比如稳定型和支撑型.</p>
<p>另外,跑鞋的大小舒适与否也会影响到跑步状态,甚至是引发伤病的隐患.</p>
<h3 id="热身与拉伸"><a href="#热身与拉伸" class="headerlink" title="热身与拉伸"></a>热身与拉伸</h3><h4 id="跑前热身"><a href="#跑前热身" class="headerlink" title="跑前热身"></a><a href="https://mp.weixin.qq.com/s/U7U4Nesf5TB4RxVgVxMEBw" target="_blank" rel="external">跑前热身</a></h4><p>跑前热身能够很好激活身体肌肉,韧带,减少运动损伤.目的是让身体能够适应之后的运动量.重要的是,我们不仅要重视热身,而且还需要做对热身.特别是瑟瑟发抖的冬天.</p>
<ul>
<li>1.模拟跑步动作在原地进行的跑步练习，目的是调动心肺、升高体温.</li>
<li>2.肌肉动态牵拉.可以在短时间内有效地拉伸多块肌肉，既能有效的增加关节活动度，性价比非常高.</li>
</ul>
<h4 id="跑后拉伸"><a href="#跑后拉伸" class="headerlink" title="跑后拉伸"></a><a href="https://mp.weixin.qq.com/s/aL1gMqhlj5FVTneX8jRKsg" target="_blank" rel="external">跑后拉伸</a></h4><p>跑后拉伸可以缓解肌肉紧张感,结合泡沫轴舒张肌肉和韧带,让肌肉更显修长.</p>
<h3 id="跑步姿势"><a href="#跑步姿势" class="headerlink" title="跑步姿势"></a><a href="https://www.bilibili.com/video/av46528465" target="_blank" rel="external">跑步姿势</a></h3>
  <div style="position: relative;width: 100%;height: 0;padding-bottom: 75%;">
      <iframe style="position:absolute;width:100%;height:100%;left:0;top:0;" src="//player.bilibili.com/player.html?aid=46528465&cid=81525567&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
  </div>

<h3 id="力量训练"><a href="#力量训练" class="headerlink" title="力量训练"></a><a href="https://mp.weixin.qq.com/s/QBqrfKXtbMrnNNdR90rzKA" target="_blank" rel="external">力量训练</a></h3><p>跑友们现在已经越来越重视下肢力量训练，好的下肢力量可以提高速度，跑得更快，可预防下肢伤痛和促进伤痛康复.<br>这是非常必要的,经常做力量训练可以提高跑步质量.切忌刻意机械性重复刷跑量,既容易造成不必要的身体伤痛,也很难达到预期效果,适得其反.</p>
<h3 id="伤痛与预防"><a href="#伤痛与预防" class="headerlink" title="伤痛与预防"></a><a href="https://zhuanlan.zhihu.com/p/32698929" target="_blank" rel="external">伤痛与预防</a></h3><p>跑步常见的伤病比如跑步膝,足底颈膜炎,胫前疼痛.平时要注意下力量训练,切忌不要超量跑.很多伤病是因为跑量与力量没有达到平衡造成的.</p>
<h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><p>最后的最后,跑步千千好,唯独最伤膝.身体不适或者天气问题千万要慎重,跑步<strong>猝死</strong>的事件屡见不鲜,务必量力而行!!</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://mp.weixin.qq.com/s/dCRPY78N2m89TCxq07Di5w" target="_blank" rel="external">跑步五点建议</a></li>
<li><a href="https://mp.weixin.qq.com/s/tbSvBfEmocGUY7m3lxJ9dw" target="_blank" rel="external">送髋跑</a></li>
</ul>
]]></content>
      <categories>
        <category>sport</category>
      </categories>
      <tags>
        <tag>running</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel5系列入门教程之二</title>
    <url>/2019/01/08/the-third-part-service-applied-in-the-laravel/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>关于在laravel中的第三方服务的配置与使用</p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>跑步伤痛与恢复</title>
    <url>/2019/01/03/the-exprience-about-running-pain/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前经常跑步,由于不太重视跑前热身.跑步跑久了就积累了很多的伤病,导致现在都没法正常的训练.很多放在家门口的赛事都没能如愿参加拿牌.</p>
<h2 id="胫骨前肌"><a href="#胫骨前肌" class="headerlink" title="胫骨前肌"></a>胫骨前肌</h2><blockquote>
<p>其实,有伤病是正常的事情.关键是如何正视它并及时纠正.</p>
</blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.sohu.com/a/150469205_400759" target="_blank" rel="external">跑后脚背痛，原因何在？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/30724167" target="_blank" rel="external">小腿外侧痛，跑者必经之路？</a></li>
<li><a href="https://www.zhihu.com/question/21814918" target="_blank" rel="external">快走或者跑步之后小腿前方外侧肌肉僵硬 走路都困难 这是为什么？</a></li>
<li><a href="https://www.don1don.com/archives/64798" target="_blank" rel="external">调整你的胫前肌痛── 跑步慢性疾病</a></li>
</ul>
]]></content>
      <categories>
        <category>sport</category>
      </categories>
      <tags>
        <tag>running</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT的使用详解</title>
    <url>/2018/12/29/the-full-use-of-jwt/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着开发中对JWT的理解逐步加深,单独整理个文档方便理清思路.在不同的应用场景对JWT的理解也不一样.</p>
]]></content>
      <categories>
        <category>API</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>Dingo-Api 开发总结</title>
    <url>/2018/12/19/the-docs-about-dingo-api/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>工作中使用Laravel框架开发平台,接触到api设计与开发.顺便将在Dingo-Api的理解整理与总结下来.</p>
]]></content>
      <categories>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序常用的第三方框架的整理</title>
    <url>/2018/11/29/the-common-third-part-framework-about-wechat-mini-program/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>wechat</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序支付相关教程</title>
    <url>/2018/11/26/the-payment-about-wechat-mini-program/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>wechat</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序常用的第三方SDK的整理与总结</title>
    <url>/2018/11/16/the-common-third-part-sdk-about-wechat-mini-program/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>wechat</tag>
      </tags>
  </entry>
  <entry>
    <title>谷歌支付验证解决方案</title>
    <url>/2018/10/17/Google-payment-solutions/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>关于谷歌支付验证部分,服务端有多种不同语言的SDK.但就PHP版本是Beta版本的,网上关于使用方式讲解并不全面.</p>
<p>之前对接中东版本时有完整做过一遍,可惜没有记录下来.如今也只能依稀记得一些流程,幸好有机会借到谷歌开发者后台的超级管理员账号,有机会全面了解谷歌后台的所有权限情况.借此机会,再对接巴西版本的时候讲整个流程再走一遍,将谷歌支付整个流程遇到的一些问题和解决方案做个记录.</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://stackoverflow.com/questions/25481207/error-the-project-id-used-to-call-the-google-play-developer-api-has-not-been-l" target="_blank" rel="external">The project id used to call the Google Play Developer API has not been linked in the Google Play Developer Console</a></li>
<li><a href="http://www.it1352.com/91830.html" target="_blank" rel="external">Use service account to verify Google InAppPurchase</a></li>
<li><a href="https://stackoverflow.com/questions/33850864/how-to-verify-purchase-for-android-app-in-server-side-google-play-in-app-billin" target="_blank" rel="external">How to verify purchase for android app in server side (google play in app billing v3)</a></li>
<li><a href="https://developers.google.com/api-client-library/" target="_blank" rel="external">!import - Libraries for Google APIs Server</a></li>
<li><a href="https://github.com/googleapis/google-api-php-client" target="_blank" rel="external">!import - A PHP client library for accessing Google APIs</a></li>
</ul>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>google pay</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel5系列入门教程</title>
    <url>/2018/10/16/the-getting-started-tutorial-about-lavarel-1/</url>
    <content><![CDATA[<p>新手入门学习新的PHP框架Laravel,一款号称为WEB艺术家创造的PHP框架.本文主要介绍在virtualbox环境下结合Vagrant和Headstead安装运行Laravel5.</p>
<p>Vagrant是一款基于virtual box的虚拟环境,可以安装各种预先配置好的开发环境,达到可以在多种开发环境之间快速切换.</p>
<p>Homestead是Laravel官方创建的Vagrant盒子,虚拟机的环境搭载Ubuntu16.04 LTS,并且集成了Laravel所需的开发环境及工具,包含最新版本的PHP,Mysql以及Nginx服务器.</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://laravel-china.org/topics/533/laravel-5-series-tutorial-i-the-most-suitable-for-chinese-laravel-tutorial" target="_blank" rel="external">Laravel 5 系列入门教程（一）【最适合中国人的 Laravel 教程】</a></li>
<li><a href="https://blog.sbot.io/articles/1" target="_blank" rel="external">Windows 7/8/10 系统下Laravel框架的开发环境安装及部署详解</a></li>
<li><a href="https://laravel-china.org/index.php/topics/3750/windows-10-install-homestead-card-at-ssh-auth-method-private-key" target="_blank" rel="external">Windows 10 安装 Homestead 卡在 SSH auth method: private key</a></li>
</ul>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitalk - 一款非常极客的评论插件</title>
    <url>/2018/09/28/gitalk-is-a-very-geek-comment-plugin-after-duoshuo/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一提到多说,相信不少博主可能会不假思索的跟你说很多它自带的许多特性以及与博客的无缝接入.除了他的访客功能之外,还提供了很多的自定义样式和描述语,这在这样一个众口难调的时代实在是少见.对于多说的感受,往往有这样的感觉-<strong>失去的时候才懂得珍惜</strong>.本文在和介绍你如何使用Gitalk之外,从外观上尽量将这款评论插件改成多说差不多的样式.</p>
<h2 id="Gitalk的使用"><a href="#Gitalk的使用" class="headerlink" title="Gitalk的使用"></a>Gitalk的使用</h2><p>自从多说评论插件在2017年6月宣布停止维护之后,也许会有很多博主会苦于意识找不到合适的评论插件取代它.加之国内其他的评论插件往往需要提供网站备案才允许接入,这无形中也提高了接入门槛.索性,很多的极客爱好者纷纷推出自己的评论插件.比如今天我们即将推荐的一款评论插件Gitalk.</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><a href="https://gitalk.github.io/" target="_blank" rel="external">Gitalk</a> 是一款利用GitHub API,基于GitHub issue和preact开发的评论插件.说的直白点,Gitalk实际上是将我们在博客上的评论通过一定的方式上传到GitHub的某个项目的issue上的.就是GitHub的某个项目帮我们托管博客的评论信息.我们的博客可以不必非要托管在GitHub上.刚好博主将自己的静态博客托管在GitHub上.所以说,Gitalk是Github Pages的评论插件神器.</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>因为博主这边使用的是hexo的yelee主题,其他主题做法应该也差不多.以下将以yelee主题为例介绍.</p>
<h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><ul>
<li>在Github个人设置下选择<a href="https://github.com/settings/developers" target="_blank" rel="external">开发者设置</a>,<a href="https://github.com/settings/applications/new" target="_blank" rel="external">新建</a>一个开发者授权应用.</li>
<li>主页地址和回调地址这里统一填写博客主页地址即可,注册成功之后将获取得到相应的Client ID和Client Secret.</li>
<li>Gitalk将利用这两个参数获取用户的授权,并将评论信息提交到GitHub的项目下.</li>
</ul>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>因为博客之前尝试过国内的其他评论插件,所以在配置的使用一般按照不同的类型通过开关的形式加以调整.<br><figure class="highlight yml"><table><tr><td class="code"><pre><div class="line"><span class="attr">gitalk:</span></div><div class="line"><span class="attr">  on:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  owner:</span> //GitHub账号用户名</div><div class="line"><span class="attr">  repo:</span> //托管的项目,之后的评论将留在该项目的issue上.</div><div class="line"><span class="attr">  clientID:</span> //上一步创建的授权应用获取到的</div><div class="line"><span class="attr">  clientSecret:</span> //同上</div><div class="line"><span class="attr">  admin:</span> //GitHub账号用户名</div><div class="line"><span class="attr">  distractionFreeMode:</span> //开启无干扰模式</div></pre></td></tr></table></figure></p>
<p>在主题下的配置文件上按照上面的提示配置好信息之后,就可以在指定需要的地方引用该插件了.</p>
<h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>在主题目录下指定目录下(主题yelee专门创建一个统一存放评论页面的文件夹)创建一个gitalk的页面.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;link rel=&apos;stylesheet&apos; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;&gt;</div><div class="line">&lt;link rel=&apos;stylesheet&apos; href=&quot;//blog.terrancy.com/resources/gitalk/comment.css&quot;/&gt;</div><div class="line">&lt;script src=&quot;https://unpkg.com/gitalk/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;https://cdn.staticfile.org/blueimp-md5/2.7.0/js/md5.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    var gitalk = new Gitalk(&#123;</div><div class="line">      clientID:  &apos;&lt;%=clientID%&gt;&apos;,</div><div class="line">      clientSecret: &apos;&lt;%=clientSecret%&gt;&apos;,</div><div class="line">      id: md5(location.pathname),</div><div class="line">      repo: &apos;&lt;%=repo%&gt;&apos;,</div><div class="line">      owner: &apos;&lt;%=owner%&gt;&apos;,</div><div class="line">      admin: &apos;&lt;%=admin%&gt;&apos;,</div><div class="line">      distractionFreeMode: &lt;%=distractionFreeMode%&gt;,</div><div class="line">    &#125;)</div><div class="line">    gitalk.render(&apos;gitalk-container&apos;)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>这里面最主要的是引用了两个链接,通过配置文件的相应参数将渲染到gitalk-container这个id的div上.<br>值得注意的是,这里通过配置信息的id参数来区分每个页面信息,官网上要求id赋值在32位以内.这里使用md5加密将长度控制在32位.<br>按照上面的几个步骤操作之后基本上已经可以正常显示了,这里有个小细节就是需要用GitHub账号在这个插件上登入授权即可在GitHub上的指定的项目生成相应的issue.</p>
<h3 id="多说化"><a href="#多说化" class="headerlink" title="多说化"></a>多说化</h3><p>以上对Gitalk的安装使用已经详细介绍过了,安装之后总体表现算是中规中矩.以下针对一些个人不满意的地方结合多说的自定义样式做些优化.</p>
<h4 id="评论高亮"><a href="#评论高亮" class="headerlink" title="评论高亮"></a>评论高亮</h4><p>当鼠标光标在评论框时,页面会出现一个带有半透明的浮层并且评论框高亮.这种效果见仁见智,个人感觉不太好看.直接将其去除.就是样式重写覆盖.<br><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="comment">/** 评论边框 **/</span></div><div class="line"><span class="selector-class">.gt-container</span> <span class="selector-class">.gt-comment-admin</span> <span class="selector-class">.gt-comment-content</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(255, 255, 255, 0);</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(0, 0, 0, 0.1);</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.gt-container</span><span class="selector-class">.gt-input-focused</span>&#123;</div><div class="line">    <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(255, 255, 255, 0);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.gt-container</span><span class="selector-class">.gt-input-focused</span><span class="selector-pseudo">::after</span>&#123;</div><div class="line">    <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(255, 255, 255, 0);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/** 预览模式 **/</span></div><div class="line"><span class="selector-class">.gt-container</span> <span class="selector-class">.gt-header-preview</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(255, 255, 255, 0);</div><div class="line">    <span class="attribute">font-family</span>: inherit;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h4><p>之前在使用多说的时候就曾在评论框内添加背景图片,有种怀旧感.<br><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="comment">/** 扑街 **/</span></div><div class="line"><span class="selector-id">#gitalk-container</span> <span class="selector-class">.gt-header-comment</span> <span class="selector-class">.gt-header-textarea</span>&#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">96px</span> <span class="meta">!important</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(//blog.terrancy.com/resources/duoshuo/pujie.png) right no-repeat;</div><div class="line">  <span class="attribute">font-family</span>: inherit;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="图像旋转"><a href="#图像旋转" class="headerlink" title="图像旋转"></a>图像旋转</h4><p>鼠标悬浮在头像上时,头像会自动由正方形旋转成圆形.这部分使用之前多说样式.<br><figure class="highlight"><table><tr><td class="code"><pre><div class="line">#ds-recent-comments .gt-avatar img &#123;</div><div class="line">  width: 54px;</div><div class="line">  height: 54px;</div><div class="line">  border-radius: 27px;</div><div class="line">  -webkit-border-radius: 27px;</div><div class="line">  -moz-border-radius: 27px;</div><div class="line">  box-shadow: inset 0 -1px 0 #3333sf;</div><div class="line">  -webkit-box-shadow: inset 0 -1px 0 #3333sf;</div><div class="line">  -webkit-transition: 0.4s;</div><div class="line">  -webkit-transition: -webkit-transform 0.4s ease-out;</div><div class="line">  transition: transform 0.4s ease-out;</div><div class="line">  -moz-transition: -moz-transform 0.4s ease-out;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#ds-recent-comments .gt-avatar img:hover &#123;</div><div class="line">  box-shadow: 0 0 10px #fff;</div><div class="line">  rgba(255, 255, 255, .6), inset 0 0 20px rgba(255, 255, 255, 1);</div><div class="line">  -webkit-box-shadow: 0 0 10px #fff;</div><div class="line">  rgba(255, 255, 255, .6), inset 0 0 20px rgba(255, 255, 255, 1);</div><div class="line">  transform: rotateZ(360deg);</div><div class="line">  -webkit-transform: rotateZ(360deg);</div><div class="line">  -moz-transform: rotateZ(360deg);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><div class="github-widget" data-repo="gitalk/gitalk"></div>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>关于国内域名备案的总结</title>
    <url>/2018/09/20/the-summary-about-the-domestic-domain-filling/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  最近发现之前在阿里云上已经备案过的域名居然需要提交备案申请,导致部分域名无法正常使用.经过仔细检查之后原来部分域名使用的是腾讯的服务器.生产线上的产品在毫无征兆的情况下突然间就被显示重新提交备案,直接导致产品立马无法使用.这种算是重大的突发事件,在紧急迁移服务器的同时也加急申请备案.实在无奈~</p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>domain-filling</tag>
      </tags>
  </entry>
  <entry>
    <title>个人面试经历的总结</title>
    <url>/2018/08/20/the-summary-about-personal-interview-experience/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>关于为什么辞职这里就不多做解释了,现主要对最近个人面试经历的总结.毕业后就呆在一家公司五年了,第一次离职后面临面试这个件事.其实说起来也挺尴尬的,面试了很多人这次也要被面.对职场面试而言,本是一种展示自我的一个很好的机会,但现在反而像新手一样既笨拙又难堪.不过,至少能检验自己的价值以及以及认清自己与他人的差距.以下,就面试过的一些主要公司谈谈自己的看法吧.</p>
<h3 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h3><h4 id="点触科技"><a href="#点触科技" class="headerlink" title="点触科技"></a><a href="https://www.dianchu.com/" target="_blank" rel="external">点触科技</a></h4><p>厦门点触科技股份有限公司(以下以”点触科技”称之),2013年借一款宫廷养成类游戏发展至今的新三板上市公司.<del>(或许是在大家看来的运气的元素,因其特定的用户群体让该公司在之后的发展不断壮大.)</del>目前的主要研发运营两款游戏,游戏风格大同小异.</p>
<h5 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h5><p>点触科技要求后端程序员,可以是其他语言转python.因为有几位同事先后进入该公司的缘故,加上福利待遇相对还可以以及跨语言也可以.所以我就抱着试试的心里去面试.<br>因为在之前的游戏公司做的也是后端程序员,加之五年摸爬滚打的工作经验以及对游戏后台的游戏熟悉,这让我在面试中有种莫名的自信.(<del>程序员连这点自信都没有那就白混了.)</del></p>
<h5 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h5><p>在前台的提示下填写了个人信息和个人主要的项目经历.<del>感觉也体现不了什么,反正该有的都写在简历上了</del><br>面试主要分为HR面试和技术面试.<br>①HR面试主要是为完善之前填写的那份个人信息表,还有就是了解个人工资问题等等.然后便是技术面试了.<br>②经过与后端程序员的负责人的交流中,逐渐的理清了该公司的后端基础模块.后端程序员大概7-8人的样子,主要负责后台工具模块,运营模块,游戏日志模块,内部员工系统包括Bug反馈系统和人事系统等等.</p>
<ul>
<li>后台工具模块.<br>后台日志模块主要为常用的数据分析,游戏基本的用户信息.<br>①前端框架使用<a href="https://cn.vuejs.org/" target="_blank" rel="external">Vue</a>+<a href="http://element-cn.eleme.io" target="_blank" rel="external">Element UI</a>.对于前端只用过Bootstrap框架的我而言也只是一知半解.这部分后面可以去学学,前端不用学得太多但必须扎实又实用才好.<br>②后端使用<a href="http://flask.pocoo.org/" target="_blank" rel="external">python-flask</a>作为日常常用开发框架.最主要的是利用python与hadoop便捷的交互优势,这点是某些编程语言所不具备的.<br>③使用Docker作为应用开发的服务器容器,既方便开发也方面部署.大大的缩短了运维和研发的时间,提升工作效率.</li>
<li>游戏日志模块.<br>①对外统一游戏日志规范.提供合理的数据BI接口,让游戏服务端根据自定的数据根式将需要的数据提交到游戏日志系统中.<br>②python的并发编程能力.因为游戏内玩家的行为日志相对比较多,对后端服务器的负载也是很大的压力,需要提升数据库的读写速度的同时也发挥python并发的特点.<br>③使用kafka作为常用的消息队列机制.这个可以很大程度上减少服务器端额负载压力.</li>
<li>运营模块.<br>①常用的运营日志分析统计.比如某个活动对游戏数据的影响,如果能用数据直观的反馈出来对公司的运营也有很好的指导作用.<br>②常用的外围活动或者广告.通过一些简单微信小程序与微信小游戏,促进老玩家对游戏的粘度.通过开发相应的后台,方便运营人员在后台直接给微信小游戏换皮等.大大解放了后端开发人员的生产力.</li>
<li>其他模块.<br>①开发公司内部OA系统.<br>②上市公司必需的玩家消费日志系统.玩家的虚拟货币分为消费类型和赠送类型.而消费类型的虚拟货币细分为一次性和永久性.需要每个月分析玩家身上的每部分虚拟货币的使用情况.</li>
</ul>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p><strong>面试的结果,不了了之.大数据是个硬伤,也是个门槛.</strong><br>首先,因为面试经验的问题,对自我的认识和定位不够清晰以及缺乏临时发挥的反应力导致说话口不遮拦的原因.<br>其次,是个人技术能力.因为之前工作的游戏公司数量比较少,相对就很难遇到在一个比较大量级的情况下产生的问题.<del>(如果想要去一些大公司面试,特别是程序员而言大数据永远是一个绕不过的话题)</del>同样的数据分析和统计,在大数据环境下产生的读写延迟与冲突导致的数据问题等一无所知.<br>最后,因为实际工作中没有遇到过的问题而导致在面试的减分而甘心让自己的技术停滞不前的想法肯定是不对的.但如何去跨过这样的门槛呢?确实是个值得思考的话题.</p>
<h4 id="4399"><a href="#4399" class="headerlink" title="4399"></a><a href="https://www.4399.com/" target="_blank" rel="external">4399</a></h4><p>4399是中国最早的和领先的在线休闲游戏平台,免费为用户提供各种健康绿色的游戏.</p>
<h5 id="要求-1"><a href="#要求-1" class="headerlink" title="要求"></a>要求</h5><p>前同事内推进去面试,对面试的要求并不太多.面试过程中对方想招的是活动运营开发方向的.</p>
<h5 id="过程-1"><a href="#过程-1" class="headerlink" title="过程"></a>过程</h5><p>先由前台引导填写基本资料,填完资料之后等待HR通知面试.因为是老员工的内推,面试过程中气氛比较轻松.<br>①4399虽然有自己的研发团队,但整体还是偏向运营方向的.说清楚点就是偏向平台运营,这点很重要.平台类运营侧重于平台活动方向运营,工作的方向也是面向平台推广.<br>②因为对公司的发展方向有所误解,再加上对点触面试经验的总结所以侧重于游戏数据的整理与分析.这个也是面试失败的重要原因</p>
<h5 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h5><p>①可能是内推的原因吧,整个面试没有笔试过程直接是部门负责人就工作方向和业务方向的咨询.<br>②现阶段工作需求比较少,也不太着急招聘员工.<br>③面试的公司类型很重要,主要分为平台类和研发类的.平台类的要求相对比较轻松,对技术的需求主要偏向运营和配合推广.研发类的侧重于数据整理分析.面试的时候需要多做了解可提高面试通过率.</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://github.com/ElemeFE/element" target="_blank" rel="external">Element UI</a><br><a href="https://mp.weixin.qq.com/s/sSQlhZdXDgu80OINf3Uu7Q" target="_blank" rel="external">华为人工智能岗位面试经历分享</a></p>
]]></content>
      <categories>
        <category>random-thought</category>
      </categories>
      <tags>
        <tag>interview</tag>
      </tags>
  </entry>
  <entry>
    <title>网易云音乐反爬虫机制</title>
    <url>/2018/08/20/the-case-about-anti-reptile-mechanism-with-netease-music-api/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前在搭建个人博客的时候使用了一款异步加载的音乐插件,该插件的服务端部分的主要功能室封装了网易云音乐的接口.确切点说,该服务器服务端实际上是利用网络爬虫的方法抓取网易云音乐的资源.因为网易云音乐反爬虫机制的原因导致音乐插件无法使用.</p>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>网易云音乐的资源被爬虫抓取的问题在一定程度是会导致正规平台上的音乐资源被分流了,对于做资源的平台而言无疑就是偷窃.从反制的角度上而言,从入口遏制无疑是省时省力的方案.</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3>]]></content>
      <categories>
        <category>crawler</category>
      </categories>
      <tags>
        <tag>crawler</tag>
      </tags>
  </entry>
  <entry>
    <title>Atom编辑器代理设置</title>
    <url>/2018/08/18/the-problem-of-the-proxy-about-atom/</url>
    <content><![CDATA[<p>Atom编辑器作为GitHub研发的一款针对开发者的编辑器,以其轻量性一下子就吸引了很多的受众.虽然问题一直存在,但我们期待着它不断的更新和进步.但最近更新的版本之后,打开编辑器之后就马上闪退.后来发现原来是代理的问题,作为习惯使用谷歌搜索的忠实用户,面对鱼和熊掌不可得兼的尴尬确实很头疼.</p>
<h2 id="代理冲突"><a href="#代理冲突" class="headerlink" title="代理冲突"></a>代理冲突</h2><h3 id="shadowsock-代理"><a href="#shadowsock-代理" class="headerlink" title="shadowsock 代理"></a>shadowsock 代理</h3><p>shadowsocks代理与Atom编辑器冲突导致编辑器闪退,所以需要分别在shadowsocks的代理配置文件和Atom配置文件配置好代理即可;</p>
<h4 id="代理配置文件"><a href="#代理配置文件" class="headerlink" title="代理配置文件"></a>代理配置文件</h4><p>在电脑右下角小飞机图标中找到代理配置文进PAC,选择编辑本地PAC文件.针对Atom新增记录值 proxy:8080;<br>为防止代理配置文件在同步更新线上文件的时候被覆盖,最好设置保护本地文件选项;</p>
<h4 id="编辑器配置文件"><a href="#编辑器配置文件" class="headerlink" title="编辑器配置文件"></a>编辑器配置文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">apm config set registry https://registry.npm.taobao.org</div><div class="line">apm config set strict-ssl false</div><div class="line">apm config set https-proxy https://proxy:8080</div></pre></td></tr></table></figure>
<p>如上第三步骤,解决代理的问题关键在于设置本地代理.</p>
<h4 id="检查测试"><a href="#检查测试" class="headerlink" title="检查测试"></a>检查测试</h4><p>查看代理设置是否成功,除了开启代理和编辑器查看是否冲突闪退之外,还是测试下代理配饰是否可用.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">apm config get https-proxy</div><div class="line">apm install --check</div></pre></td></tr></table></figure>
<p>可以通过以下命令查看代理是否可用.</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.jianshu.com/p/24cd35cd4b03" target="_blank" rel="external">Atom代理设置</a></p>
]]></content>
      <categories>
        <category>IDE</category>
      </categories>
      <tags>
        <tag>IDE</tag>
      </tags>
  </entry>
  <entry>
    <title>你到底在焦虑什么?</title>
    <url>/2018/07/09/what-are-you-worry-about-with-age/</url>
    <content><![CDATA[<h2 id="人生就是一直在自我抗争"><a href="#人生就是一直在自我抗争" class="headerlink" title="人生就是一直在自我抗争"></a>人生就是一直在自我抗争</h2><blockquote>
<p>你哪里是在焦虑年纪,你是在焦虑能力</p>
</blockquote>
<p>或许中国人骨子里对数字特别敏感,尤其涉及到年纪.它不仅像树的年轮一样记录着人的一生,更像每个人应该迈过的一道道坎.二十岁,三十岁这样年纪的人多少会有些焦虑.虽然这些数字仅仅表示一个人生命成长的数字,但是让我们焦虑的其实还是没能在这个或者那个年龄做该做的事情,心里多少有些恐慌或者遗憾.</p>
<h2 id="保持良好生活习惯和乐观心态"><a href="#保持良好生活习惯和乐观心态" class="headerlink" title="保持良好生活习惯和乐观心态"></a>保持良好生活习惯和乐观心态</h2><blockquote>
<p>唯有通过自我反思与总结,不断明确生活的航向</p>
</blockquote>
<p>失败并不可怕,我们需要重拾信心及时纠正,查缺补漏.只有看到能力的欠缺并努力地去提升,我们才有可能在以后的道路上满血复活.</p>
<p>报名考驾照硬是拖了一年才抽出时间考了科目二还是考挂了,其实平时练得挺多了就是考试的时候太不当回事了.好歹等到科目二过了练完一周的科目三还是考挂了,这次是真的练蒙圈了.愣是等了2个月重新再考就轻车熟路了,科目四考完就马上拿到了驾照.其实考驾照,开车技能很重要,临场应变能力更重要,特别是心态上不能太紧张.开车要放松下来才不会那么累.</p>
<p>考驾照的同时也重新准备专业考证,准备的是信息系统管理师证,属于高级工程师职称.因为之前裸考了几次有过经验,这次不敢大意就直接报班了.慢慢对自己的工作有了新的期待,正在备考PMP.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>发现自己的不足，弥补能力的欠缺，沿着自己认为正确的方向，在沿途经过的每个加油站将油箱加满，你才有可能驶向自己想要抵达的终点.</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://weibo.com/ttarticle/p/show?id=2309404260003245634395#_0" target="_blank" rel="external">你哪里是焦虑年纪，你是在焦虑能力</a></li>
</ul>
]]></content>
      <categories>
        <category>random-thought</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>辞职前后的随想笔记</title>
    <url>/2018/06/06/the-random-thoughts-about-duration-of-the-resignation/</url>
    <content><![CDATA[<h2 id="或许这是件傻事"><a href="#或许这是件傻事" class="headerlink" title="或许这是件傻事"></a>或许这是件傻事</h2><p>过年的时候有跟家人提及个人离职的意愿,家人和亲戚的想法其实就是让我先找好工作再离职,不要犯傻裸辞.<br>没想到年后发生的事情实在也让人猝不及防,公司面临着濒临倒闭的窘境.出于感情因素,不想在公司困难的时候离开,还是勉强坚持了一阵子.毕竟待在这边呆了足足5年,而在这5年里大部分是在加班中度过,为此还发过牢骚抱怨过.同时足够时间也给予我无数次的尝试,积累了丰富的工作经验.<br>看着曾经同甘共苦的同事一个个纷纷离开的时候,既有不舍也有祝福.离开是一种解脱,留着反倒是一种煎熬.因为留下来的什么都没法改,也不敢改.就生怕会拆东墙补西墙一样不小心就踩到了雷区.</p>
]]></content>
      <categories>
        <category>random-thought</category>
      </categories>
      <tags>
        <tag>resignation</tag>
      </tags>
  </entry>
  <entry>
    <title>电报机器人</title>
    <url>/2018/05/12/the-rotbot-with-telegram/</url>
    <content><![CDATA[<p>以前在QQ群上和机器人小新聊过天,感觉挺好玩的.最近发现电报群上也有机器人,看着API也不难就尝试着动手弄个聊天机器人.</p>
<h2 id="机器人"><a href="#机器人" class="headerlink" title="机器人"></a>机器人</h2><p>按照机器人的功能特点,以下主要分为群聊机器人和警报机器人.</p>
<h3 id="群聊机器人"><a href="#群聊机器人" class="headerlink" title="群聊机器人"></a>群聊机器人</h3><p>群聊机器人是放在电报的群主里面,主要对群成员对机器人的某些对话给予相应的回答.而警报机器人只能与管理员对话.这是两者最大的异同点.</p>
<h3 id="警报机器人"><a href="#警报机器人" class="headerlink" title="警报机器人"></a>警报机器人</h3><p>警报机器人是放在电报的频道上的,在频道中只有管理员可以与警报机器人对话,其他的成员只能通过的订阅该频道来了解频道内的信息.</p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/python-telegram-bot/python-telegram-bot" target="_blank" rel="external">python-telegram-bot</a><br><a href="https://github.com/Naltox/telegram-node-bot" target="_blank" rel="external">node-telegram-bot</a><br><a href="https://github.com/U2FsdGVkX1/Tbo" target="_blank" rel="external">php-telegram-bot</a><br><a href="https://jiasule.v2ex.com/t/436979" target="_blank" rel="external">使用 telegram bot 创建报警工具</a><br><a href="https://51.ruyo.net/8054.html" target="_blank" rel="external">Telegram Bot接管WeChat信息</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>话说七牛云</title>
    <url>/2017/10/19/the-exprience-about-qiiu-cloud-sdk-integration/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近忙里偷闲写写小程序,为了让小程序整体的资源压缩到最小,应用内的绝大部分图片资源将使用云存储的方式上传到云端.对比了下阿里云与七牛云,性价比上而言,七牛云比较划算.</p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://github.com/gpake/qiniu-wxapp-sdk" target="_blank" rel="external">基于七牛云API开发的微信小程序SDK</a></li>
<li><a href="https://developer.qiniu.com/kodo/sdk/1289/nodejs" target="_blank" rel="external">七牛云API SDK</a></li>
</ul>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>wechat</tag>
        <tag>cloud storage</tag>
      </tags>
  </entry>
  <entry>
    <title>关于海外支付SDK的集成方案与总结</title>
    <url>/2017/10/18/the-integration-of-the-common-abroad-payment-sdk/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为业务的需要,公司的游戏不断的向海外拓展.自然地,我们的游戏也要根据当地的需要接入不同的支付方式.其中,最具代表性的,首当其冲的非苹果支付和谷歌支付莫属.但是,除此之外也有其他的支付方式,比如PayPal,Mycard等等.</p>
<h2 id="PayPal支付"><a href="#PayPal支付" class="headerlink" title="PayPal支付"></a>PayPal支付</h2><p>相对于国外其他的第三方支付,Paypal支付算是一个比较容易上手的第三方支付.Paypal支付移动SDK继承三种方式的支付,如下所示:</p>
<ul>
<li>a) 接受信用卡和Paypal支付: 开发者能够简单地将Paypal支付和信用卡支付集成到应用中,信用卡支付手动支付和扫码支付.</li>
<li>b) 未来支付: 一旦客户将Paypal账户授权给开发者的应用中,使用Paypal支付时无需再次登录即可完成付款.</li>
<li>c) 原生支付: 用户付款时无需重定向到新页面即可完成付款</li>
</ul>
<h3 id="OAuth2协议"><a href="#OAuth2协议" class="headerlink" title="OAuth2协议"></a>OAuth2协议</h3><ul>
<li>1)开发者使用key和secret向Paypal服务器请求token(OAuth2协议).</li>
<li>2)之后的请求都需要携带token认证完成操作.</li>
<li>3)用户支付成功之后,服务端需要将利用客户端回传的数据向Paypal发起支付确认.</li>
<li>4)当token过期失效是重新获取Token.</li>
</ul>
<h3 id="获取授权Token"><a href="#获取授权Token" class="headerlink" title="获取授权Token"></a>获取授权Token</h3><p>开发者从开发者后台相应的应用上获取client_id和secret.通过这两个秘钥串想服务器请求token.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">curl -v https://api.sandbox.paypal.com/v1/oauth2/token \</div><div class="line">   -H <span class="string">"Accept: application/json"</span> \</div><div class="line">   -H <span class="string">"Accept-Language: en_US"</span> \</div><div class="line">   -u <span class="string">"client_id:secret"</span> \</div><div class="line">   <span class="_">-d</span> <span class="string">"grant_type=client_credentials"</span></div></pre></td></tr></table></figure>
<p>请求成功之后,响应的参数格式数如下所示:<br>其中, Access-Token 表示获取到token值.expires_in表示该token的过期时间.scope表示授权可请求的权限.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"scope"</span>: <span class="string">"https://uri.paypal.com/services/subscriptions https://api.paypal.com/v1/payments/.* https://api.paypal.com/v1/vault/credit-card https://uri.paypal.com/services/applications/webhooks openid https://uri.paypal.com/payments/payouts https://api.paypal.com/v1/vault/credit-card/.*"</span>,</div><div class="line">  <span class="attr">"nonce"</span>: <span class="string">"2017-06-08T18:30:28ZCl54Q_OlDqP6-4D03sDT8wRiHjKrYlb5EH7Di0gRrds"</span>,</div><div class="line">  <span class="attr">"Access-Token"</span>: <span class="string">"Access-Token"</span>,</div><div class="line">  <span class="attr">"token_type"</span>: <span class="string">"Bearer"</span>,</div><div class="line">  <span class="attr">"app_id"</span>: <span class="string">"APP-80W284485P519543T"</span>,</div><div class="line">  <span class="attr">"expires_in"</span>: <span class="number">32398</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="支付验证"><a href="#支付验证" class="headerlink" title="支付验证"></a>支付验证</h3><p>开发者通过将结合用户支付成功之后从客户端回传的参数(订单号)向Paypal服务器指定的API请求支付验证.此时需要在请求头中携带token.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">curl https://api.sandbox.paypal.com/v1/payments/payment/PAY-5YK922393D847794YKER7MUI \</div><div class="line">  -H <span class="string">"Content-Type: application/json"</span> \</div><div class="line">  -H <span class="string">"Authorization: Bearer accessToken"</span></div></pre></td></tr></table></figure>
<p>请求成功之后,响应的参数格式如下所示:<br>其中,environment表示请求的支付环境,分为sandbox(沙盒模式)和正式模式(live).state表示支付状态,approved表示支付验证已通过. 开发者可以通过对响应值携带的相关参数进行二次验证.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"client"</span>:&#123;</div><div class="line">    <span class="attr">"environment"</span>:<span class="string">"sandbox"</span>,</div><div class="line">    <span class="attr">"paypal_sdk_version"</span>:<span class="string">"2.0.0"</span>,</div><div class="line">    <span class="attr">"platform"</span>:<span class="string">"iOS"</span>,</div><div class="line">    <span class="attr">"product_name"</span>:<span class="string">"PayPal iOS SDK;"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"response"</span>:&#123;</div><div class="line">    <span class="attr">"create_time"</span>:<span class="string">"2014-02-12T22:29:49Z"</span>,</div><div class="line">    <span class="attr">"id"</span>:<span class="string">"PAY-564191241M8701234KL57LXI"</span>,</div><div class="line">    <span class="attr">"intent"</span>:<span class="string">"sale"</span>,</div><div class="line">    <span class="attr">"state"</span>:<span class="string">"approved"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"response_type"</span>:<span class="string">"payment"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Mycard支付"><a href="#Mycard支付" class="headerlink" title="Mycard支付"></a>Mycard支付</h2><p>Mycard支付是一个主要面向港澳台地区游戏充值代币平台,它的主要优势在于能够因地适宜的提供适合当地支付方式.按照交易模式来划分,主要分为网页支付和客户端支付两种.而按照付费方式来划分,又可以分为卡片支付、会员扣点交易、小额付款交易.</p>
<blockquote>
<p>申请交易授权码</p>
</blockquote>
<p>研发商在进行所有的相关的交易之前,需要向Mycard服务端申请授权码.当交易模式为Web,付费方式为INGAME,充值服务为Server-side时,此时进入网页版本支付模式.否则就是客户端支付.</p>
<h3 id="客户端支付"><a href="#客户端支付" class="headerlink" title="客户端支付"></a>客户端支付</h3><h4 id="支付流程"><a href="#支付流程" class="headerlink" title="支付流程"></a>支付流程</h4><ul>
<li>客户端通过API向服务端发起请求,由服务端代客户端向Mycard服务端申请相关的授权码.服务端相关的代码如下所示.</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMyCardAuthCode</span><span class="params">($arrData)</span></span>&#123;</div><div class="line">    $arrGetMyCardAuthWhere = <span class="keyword">array</span>(</div><div class="line">        <span class="string">"FacServiceId"</span>          =&gt;      <span class="keyword">$this</span>-&gt;arrConfigSDK[<span class="string">'FacServiceId'</span>],</div><div class="line">        <span class="string">"FacTradeSeq"</span>          =&gt;      $arrData[<span class="string">'FacTradeSeq'</span>],</div><div class="line">        <span class="string">"TradeType"</span>             =&gt;      <span class="keyword">$this</span>-&gt;arrConfigSDK[<span class="string">'TradeType'</span>],</div><div class="line">        <span class="string">"ServerId"</span>               =&gt;      $arrData[<span class="string">'ServerId'</span>],</div><div class="line">        <span class="string">"CustomerId"</span>          =&gt;     $arrData[<span class="string">'CustomerId'</span>],</div><div class="line">        <span class="string">"PaymentType"</span>        =&gt;     <span class="string">""</span>,</div><div class="line">        <span class="string">"ItemCode"</span>            =&gt;     <span class="string">""</span>,</div><div class="line">        <span class="string">"ProductName"</span>        =&gt;     strtolower(urlencode($arrData[<span class="string">'ProductName'</span>])),</div><div class="line">        <span class="string">"Amount"</span>              =&gt;     $arrData[<span class="string">'Amount'</span>],</div><div class="line">        <span class="string">"Currency"</span>             =&gt;    strtoupper($arrData[<span class="string">'Currency'</span>]),</div><div class="line">        <span class="string">"SandBoxMode"</span>        =&gt;     <span class="keyword">$this</span>-&gt;arrConfigSDK[<span class="string">'sandBox'</span>],</div><div class="line">    );</div><div class="line">    $signature = <span class="keyword">$this</span>-&gt;getPaySign($arrGetMyCardAuthWhere);</div><div class="line">    $arrGetMyCardAuthWhere[<span class="string">'Hash'</span>] = $signature;</div><div class="line">    $rootUrlMyCard= <span class="keyword">$this</span>-&gt;arrConfigSDK[<span class="string">'sandBox'</span>] ? <span class="keyword">self</span>::urlMyCardAuthTest : <span class="keyword">self</span>::urlMyCardAuthB2B;</div><div class="line">    $urlMyCard = $rootUrlMyCard.<span class="string">"?"</span>.urldecode(http_build_query($arrGetMyCardAuthWhere,<span class="keyword">NULL</span>,<span class="string">"&amp;"</span>));</div><div class="line">    $arrGetMyCardAuth = <span class="keyword">$this</span>-&gt;paySDK-&gt;curlPayByGet($urlMyCard);</div><div class="line">    <span class="keyword">$this</span>-&gt;logRequest($urlMyCard.PHP_EOL.$arrGetMyCardAuth);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">empty</span>($arrGetMyCardAuth) ? <span class="keyword">array</span>() : json_decode($arrGetMyCardAuth,<span class="keyword">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>客户端获取相应的授权码之后,在SDK内发起支付请求唤起支付界面,再由玩家进行支付操作.</li>
<li>当玩家在游戏内成功完成交易之后,将申请得到的授权码再回传给我服务端请求发货.</li>
<li>服务端获取到授权码之后先去验证交易结果,然后再进行请款,最后在请求发货.</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMyCardTradeQuery</span><span class="params">($arrData)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>($arrData[<span class="string">'AuthCode'</span>]))&#123;</div><div class="line">        $arrAuthCode = <span class="keyword">array</span>(</div><div class="line">            <span class="string">"AuthCode"</span>      =&gt;      $arrData[<span class="string">'AuthCode'</span>]</div><div class="line">        );</div><div class="line">        $rootUrlMyCard = <span class="keyword">$this</span>-&gt;arrConfigSDK[<span class="string">'sandBox'</span>] ?  <span class="keyword">self</span>::urlMyCardQueryTest : <span class="keyword">self</span>::urlMyCardQueryB2B;</div><div class="line">        $urlMyCard = $rootUrlMyCard.<span class="string">"?"</span>.http_build_query($arrAuthCode,<span class="keyword">NULL</span>,<span class="string">"&amp;"</span>);</div><div class="line">        $arrGetMyCard = <span class="keyword">$this</span>-&gt;paySDK-&gt;curlPayByGet($urlMyCard);</div><div class="line">        <span class="keyword">$this</span>-&gt;logRequest($urlMyCard.PHP_EOL.$arrGetMyCard);</div><div class="line">        $arrRst = <span class="keyword">empty</span>($arrGetMyCard) ? <span class="keyword">array</span>() : json_decode($arrGetMyCard,<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">empty</span>($arrRst) ? <span class="keyword">array</span>() : $arrRst;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMyCardPaymentConfirm</span><span class="params">($arrData)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>($arrData[<span class="string">'AuthCode'</span>]))&#123;</div><div class="line">        $arrAuthCode = <span class="keyword">array</span>(</div><div class="line">            <span class="string">"AuthCode"</span>      =&gt;      $arrData[<span class="string">'AuthCode'</span>]</div><div class="line">        );</div><div class="line">        $rootUrlMyCard = <span class="keyword">$this</span>-&gt;arrConfigSDK[<span class="string">'sandBox'</span>] ?  <span class="keyword">self</span>::urlMyCardConfirmTest : <span class="keyword">self</span>::urlMyCardConfirmB2B;</div><div class="line">        $urlMyCard = $rootUrlMyCard.<span class="string">"?"</span>.http_build_query($arrAuthCode,<span class="keyword">NULL</span>,<span class="string">"&amp;"</span>);</div><div class="line">        $arrGetMyCard = <span class="keyword">$this</span>-&gt;paySDK-&gt;curlPayByGet($urlMyCard);</div><div class="line">        <span class="keyword">$this</span>-&gt;logRequest($urlMyCard.PHP_EOL.$arrGetMyCard);</div><div class="line">        $arrRst = <span class="keyword">empty</span>($arrGetMyCard) ? <span class="keyword">array</span>() : json_decode($arrGetMyCard,<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">empty</span>($arrRst) ? <span class="keyword">array</span>() : $arrRst;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="网页版支付"><a href="#网页版支付" class="headerlink" title="网页版支付"></a>网页版支付</h3><p>进入网页版支付模式下,网页支付可分为自定义页面以及官方推荐页面.</p>
<h4 id="支付流程-1"><a href="#支付流程-1" class="headerlink" title="支付流程"></a>支付流程</h4><ul>
<li>玩家选择指定的充值档位之后需要通过Ajax向服务端发起请求,由服务端代网页端向Mycard服务端申请相关的授权码.服务端相关的代码略.</li>
<li>玩家需要填写支付的点卡信息,网页需要将授权码和相关的点卡信息给服务端先进行验证,再进行请款,最后再请求发货.</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMyCardPayInGamePay</span><span class="params">($arrData)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>($arrData[<span class="string">'AuthCode'</span>]) &amp;&amp; !<span class="keyword">empty</span>($arrData[<span class="string">'CardID'</span>]) &amp;&amp; !<span class="keyword">empty</span>($arrData[<span class="string">'CardPW'</span>]))&#123;</div><div class="line">        $arrMyCardInGamePayWhere = <span class="keyword">array</span>(</div><div class="line">            <span class="string">"AuthCode"</span>      =&gt;      $arrData[<span class="string">'AuthCode'</span>],</div><div class="line">            <span class="string">"CardID"</span>      =&gt;      $arrData[<span class="string">'CardID'</span>],</div><div class="line">            <span class="string">"CardPW"</span>      =&gt;      $arrData[<span class="string">'CardPW'</span>],</div><div class="line">        );</div><div class="line">        $signature = <span class="keyword">$this</span>-&gt;getPaySign($arrMyCardInGamePayWhere);</div><div class="line">        $arrMyCardInGamePayWhere[<span class="string">'Hash'</span>] = $signature;</div><div class="line">        $rootUrlMyCard = <span class="keyword">$this</span>-&gt;arrConfigSDK[<span class="string">'sandBox'</span>] ?  <span class="keyword">self</span>::urlMyCardInGamePayTest : <span class="keyword">self</span>::urlMyCardInGamePayB2B;</div><div class="line">        $urlMyCard = $rootUrlMyCard.<span class="string">"?"</span>.http_build_query($arrMyCardInGamePayWhere,<span class="keyword">NULL</span>,<span class="string">"&amp;"</span>);</div><div class="line">        $arrGetMyCard = <span class="keyword">$this</span>-&gt;paySDK-&gt;curlPayByGet($urlMyCard);</div><div class="line">        <span class="keyword">$this</span>-&gt;logRequest($urlMyCard.PHP_EOL.$arrGetMyCard);</div><div class="line">        $arrRst = <span class="keyword">empty</span>($arrGetMyCard) ? <span class="keyword">array</span>() : json_decode($arrGetMyCard,<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">empty</span>($arrRst) ? <span class="keyword">array</span>() : $arrRst;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://developer.paypal.com/docs/api/overview/" target="_blank" rel="external">Paypal支付-开发者获取令牌环</a></li>
<li><a href="https://developer.paypal.com/webapps/developer/docs/integration/mobile/verify-mobile-payment/" target="_blank" rel="external">Paypay支付-信用卡支付</a></li>
</ul>
]]></content>
      <categories>
        <category>pay</category>
      </categories>
      <tags>
        <tag>pay</tag>
      </tags>
  </entry>
  <entry>
    <title>Steam-SDK 接入教程</title>
    <url>/2017/09/30/the-tutorial-about-microclient-with-Steam/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为Unity3D引擎开发的一款3D枪战类型的游戏,其本身就具备了多端兼容的优势.当游戏在国内外各大手游市场上不断发力的同时,我们也开始尝试在进军微端游戏市场.腾讯游戏平台作为一个集成手游、页游、端游三位于一体的游戏平台,最适合游戏公司甚至独立游戏开发者发布自己游戏.在海外,作为最重要的端游平台,Steam的名气几乎在游戏玩家之间传播着.</p>
<h2 id="支付流程"><a href="#支付流程" class="headerlink" title="支付流程"></a>支付流程</h2><h3 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h3><p>玩家在游戏内购买道具并支付的流程如下,</p>
<ul>
<li>①玩家购买指定的道具时,客户端需要向服务端相关参数.</li>
<li>②服务端按照Steam提供的api发起支付请求.请求成功之后,界面上会自动弹出Stea支付结算界面.</li>
<li>③如果请求时调用的是沙盒测试环境,可以直接购买该道具.如果是正式环境,玩家余额不足事会引导玩家去充值.</li>
<li>④玩家玩家支付之后,客户端通过监听Steam响应,并将结果通知服务端.</li>
<li>⑤服务端将按照Steam提供的api发起结束交易请求.如果支付成功,需要根据订单给玩家发送指定的道具.</li>
</ul>
<h3 id="服务端接口"><a href="#服务端接口" class="headerlink" title="服务端接口"></a>服务端接口</h3><p>服务端在整个支付流程中主要负责两部分,发起支付与结束交易.当然,其前提必须要有指定的APP的支付权限.</p>
<h4 id="获取开发者支付秘钥"><a href="#获取开发者支付秘钥" class="headerlink" title="获取开发者支付秘钥"></a>获取开发者支付秘钥</h4><p>获取开发者支付秘钥的前提是当前Steamworks的账号要有管理员权限.</p>
<ul>
<li>①选择或者创建一个包含待创建秘钥的与应用的群组.</li>
<li>②点击该群组查看群组右侧,如果尚未创建秘钥,只要点击「Create Web API Key」选项;否则可直接在右侧查看该群组的秘钥.</li>
</ul>
<h4 id="通用接口规范"><a href="#通用接口规范" class="headerlink" title="通用接口规范"></a>通用接口规范</h4><p>支付接口分为两部分,分别为<a href="https://partner.steamgames.com/doc/webapi/ISteamMicroTxn#InitTxn" target="_blank" rel="external">发起支付</a>,<a href="https://partner.steamgames.com/doc/webapi/ISteamMicroTxn#FinalizeTxn" target="_blank" rel="external">介绍交易</a>.<br>在<a href="https://partner.steamgames.com/doc/features/microtransactions/implementation#1" target="_blank" rel="external">小额交易实现指南</a>这章中,对支付API的规范有做了说明.</p>
<blockquote>
<p>The Content-Type should be “application/x-www-form-urlencoded” and the POST parameters should be in the body of the request in standard form urlencoding format. Text should be transmitted as UTF-8.</p>
</blockquote>
<p>因此,在代码请求的时候需要明确数据格式,</p>
<ul>
<li>①请求头里设置好 “application/x-www-form-urlencoded”</li>
<li>②请求以POST的方式,数据拼接以key1=value1&amp;key2=value2..的形式.<br>具体的代码实现方式如下所示,</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">curlByPay</span><span class="params">($arrData, $method,$sandbox=<span class="number">0</span>)</span></span>&#123;</div><div class="line">    $jsonData = urldecode(http_build_query($arrData,<span class="keyword">NULL</span>,<span class="string">"&amp;"</span>));</div><div class="line">    <span class="keyword">switch</span>($method)&#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">"InitTxn"</span>:</div><div class="line">            $urlPay = $sandbox ? <span class="keyword">$this</span>-&gt;urlInitTxnSandBox : <span class="keyword">$this</span>-&gt;urlInitTxnLive;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">"FinalizeTxn"</span>:</div><div class="line">            $urlPay =$sandbox ? <span class="keyword">$this</span>-&gt;urlFinalizeTxnSandBox : <span class="keyword">$this</span>-&gt;urlFinalizeTxnLive;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            $urlPay  = <span class="string">""</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    $header  = <span class="keyword">array</span>(</div><div class="line">        <span class="string">'Content-Type:application/x-www-form-urlencoded'</span>,</div><div class="line">        <span class="string">'Accept: application/json'</span>,</div><div class="line">        <span class="string">'Accept-Language: en_US'</span></div><div class="line">    );</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>($urlPay))&#123;</div><div class="line">        <span class="comment">//简单的curl</span></div><div class="line">        $ch = curl_init($urlPay);</div><div class="line">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</div><div class="line">        curl_setopt($ch, CURLOPT_POST, <span class="number">1</span>);</div><div class="line">        curl_setopt($ch, CURLOPT_POSTFIELDS, $jsonData);</div><div class="line">        curl_setopt ($ch, CURLOPT_SSL_VERIFYPEER, <span class="number">0</span>);</div><div class="line">        curl_setopt ($ch, CURLOPT_SSL_VERIFYHOST, <span class="number">0</span>);</div><div class="line">        curl_setopt($ch,CURLOPT_HTTPHEADER,$header);</div><div class="line">        $result = curl_exec($ch);</div><div class="line">        curl_close($ch);</div><div class="line">    &#125;</div><div class="line">    $result = <span class="keyword">empty</span>($result) ? <span class="string">""</span> : json_encode(json_decode($result,<span class="keyword">true</span>));</div><div class="line">    <span class="keyword">return</span> $result;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="发起支付"><a href="#发起支付" class="headerlink" title="发起支付"></a>发起支付</h4><p>玩家点击道具购买按钮之后,客户端需要将指定的参数传送到服务端.由服务端负责将相关的数据提交到Steam服务器.一旦数据请求成功,客户端将会弹出指定道具的支付界面.游戏服务端和Steam交互过程中,需要调用发起支付API.</p>
<p>需要注意的是,该请求涉及到支付,需要使用开发者秘钥,并且该请求最好放在相对安全的服务单,而不是客户端.以下只列举出调用该API必须的参数,</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>key</td>
<td>string</td>
<td style="text-align:center">Steamworks Web API publisher authentication key.</td>
</tr>
<tr>
<td>orderid</td>
<td>uint64</td>
<td style="text-align:center">Unique 64-bit ID for order</td>
</tr>
<tr>
<td>steamid</td>
<td>uint64</td>
<td style="text-align:center">Steam ID of user making purchase.</td>
</tr>
<tr>
<td>appid</td>
<td>uint32</td>
<td style="text-align:center">App ID of game this transaction is for.</td>
</tr>
<tr>
<td>itemcount</td>
<td>uint32</td>
<td style="text-align:center">Number of items in cart.</td>
</tr>
<tr>
<td>language</td>
<td>string</td>
<td style="text-align:center">ISO 639-1 language code of the item descriptions.</td>
</tr>
<tr>
<td>currency</td>
<td>string</td>
<td style="text-align:center">ISO 4217 currency code.</td>
</tr>
<tr>
<td>itemid[0]</td>
<td>uint32</td>
<td style="text-align:center">3rd party ID for item.</td>
</tr>
<tr>
<td>qty[0]</td>
<td>uint32</td>
<td style="text-align:center">Quantity of this item.</td>
</tr>
<tr>
<td>amount[0]</td>
<td>int32</td>
<td style="text-align:center">Total cost (in cents) of item(s).</td>
</tr>
<tr>
<td>description[0]</td>
<td>string</td>
<td style="text-align:center">Description of item.</td>
</tr>
</tbody>
</table>
<p>通过该发起支付的API请求之后,会收到相应的响应.具体的数据形式如下,</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>result</td>
<td>string</td>
<td style="text-align:center">Result of the operation. (OK or Failure)</td>
</tr>
<tr>
<td>params[‘orderid’]</td>
<td>uint64</td>
<td style="text-align:center">ID for order.</td>
</tr>
<tr>
<td>params[‘transid’]</td>
<td>uint64</td>
<td style="text-align:center">Steam transaction ID.</td>
</tr>
<tr>
<td>params[‘steamurl’]</td>
<td>string</td>
<td style="text-align:center">Optional URL returned when the usersession input is set to web.</td>
</tr>
<tr>
<td>error[‘errorcode’]</td>
<td>int32</td>
<td style="text-align:center">Error or event code.</td>
</tr>
<tr>
<td>error[‘errordesc’]</td>
<td>string</td>
<td style="text-align:center">Message for error or event.</td>
</tr>
</tbody>
</table>
<h4 id="结束交易"><a href="#结束交易" class="headerlink" title="结束交易"></a>结束交易</h4><p>一旦弹出支付结算界面之后,客户端需要开始通过Steam SDK监听玩家支付行为.当玩家完成支付之后,客户端通过SDK收到支付结果.从而判断是否向服务端发起结束交易的行为.</p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>普通秘钥和开发者秘钥的使用的域名是分开的,根据用户使用的频繁度和安全性不同也有不同.</p>
<ul>
<li>①普通用户的API是走Akamai的cdn缓存,一方面是保证用户请求的速度,另一方面也减轻服务器的资源负载.</li>
<li>②开发者秘钥涉及到支付等涉及玩家与商家的隐私信息.一方面使用SSL证书保证数据传输加密,另一方面使用独立的服务器实时数据交互保证数据的准确性.</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>数据响应不够明确,或者可能是设计的疏忽.</p>
<p>在请求发起支付的时候,因为客户端的失误传入服务端的Steam ID导致每次请求时提示服务器内部错误.按照正常理解,服务器内部错误应该是服务器本身报错,从而误导开发者.</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://partner.steamgames.com/doc/features/microtransactions/implementation#1" target="_blank" rel="external">小额交易实现指南</a></li>
<li><a href="https://partner.steamgames.com/doc/webapi_overview/auth" target="_blank" rel="external">获取开发者秘钥</a></li>
<li><a href="https://steamcommunity.com/app/219640/discussions/0/611702631248143398/" target="_blank" rel="external">steam 内部错误</a></li>
</ul>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>Steam</tag>
      </tags>
  </entry>
  <entry>
    <title>Git基础教程</title>
    <url>/2017/09/10/the-basical-tutorial-about-the-git/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>工作中必然会接触到代码版本管理工具,它有效地提高了程序猿的代码管理效率,大大的节约了工作成本.其中,最常用的便是SVN和GIT两种版本管理工具.</p>
<h2 id="SVN基础篇"><a href="#SVN基础篇" class="headerlink" title="SVN基础篇"></a>SVN基础篇</h2><h3 id="钩子的用处"><a href="#钩子的用处" class="headerlink" title="钩子的用处"></a>钩子的用处</h3><p>svn钩子的好处在于当用户提交前后触发的一些行为.按照具体的行为分为提交前的日志检查和提交后的代码部署</p>
<h4 id="提交前日记检查"><a href="#提交前日记检查" class="headerlink" title="提交前日记检查"></a>提交前日记检查</h4><p>用户将数据提交到svn的时候需要填写提交的内容作为当前版本的日志记录.默认情况是不强制用户填写,但如果没有养成日志记录的习惯的话,版本控制的作用效果微乎其微.因为此时用户无法顺利的做版本管理和回溯.因此,我们需要做svn上做数据提交前的日志自检功能,强制用户做日志记录.这里用的钩子是pre-commit.</p>
<p>关于日志提交自检的钩子代码,如下所示:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line">rem SVN强制写注释的hooks脚本(Windows)</div><div class="line">rem 文件名是: pre-commit.bat,放到repository/hooks目录下</div><div class="line">setlocal</div><div class="line"><span class="built_in">set</span> SVN_BINDIR=<span class="string">"这里填写VisualSVN Server的Bin目录"</span></div><div class="line"><span class="built_in">set</span> REPOS=%1</div><div class="line"><span class="built_in">set</span> TXN=%2</div><div class="line">rem 检查日志信息不少于10个字符</div><div class="line">%SVN_BINDIR%\svnlook <span class="built_in">log</span> <span class="string">"%REPOS%"</span> -t <span class="string">"%TXN%"</span> | findstr <span class="string">".........."</span> &gt; nul</div><div class="line">If %errorlevel% gtr 0 goto err</div><div class="line"><span class="built_in">exit</span> 0</div><div class="line">:err</div><div class="line"><span class="built_in">echo</span> 提交时必须填写注释，并且不少于10个字符! 1&gt;&amp;2</div><div class="line"><span class="built_in">exit</span> 1</div></pre></td></tr></table></figure>
<h4 id="提交后自动部署"><a href="#提交后自动部署" class="headerlink" title="提交后自动部署"></a>提交后自动部署</h4><p>有些时候为了方便和服务器资源的利用,在一台服务器同时部署svn服务器和web服务器.将用户提交的数据部署到web路径下就可以正常访问.这样用户提交的代码可以很直观的显示出来.这样做确实很方便,当然其中也隐藏了一些小技巧.那就是利用svn的钩子实现代码自动部署.这里用到的钩子是post-commit.</p>
<p>关于代码自动化部署的钩子代码,如下所示:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line">SET REPOS=%1</div><div class="line">SET USER=%2</div><div class="line"><span class="built_in">echo</span> <span class="string">"Code Deployed at %date:~0,10% %time:~0,8%"</span> &gt;&gt; 提交时的日志路径</div><div class="line">SET SVN=<span class="string">"这里填写VisualSVN Server的Bin目录/svn.exe"</span></div><div class="line">SET DIR=<span class="string">"待部署的站点根目录"</span></div><div class="line">%SVN% update %DIR% --username 账号 --password 密码 --non-interactive</div></pre></td></tr></table></figure>
<p>初学者可能无法一步到位,看看是否也踩到坑了.以下是一些总结,对Windows和Linux的都大同小异.主要是执行权限和目录路径不规范.</p>
<ul>
<li>提示 svn: E020024: Error resolving case.可能是指定的目录不合法,特别是windows下的路径分隔符是反斜杠(“\“),在指定的字母之前是有转义功能.此时的反斜杠就是转义符,不再是目录路径分隔符了.</li>
</ul>
<p>最简单的做法就是更换目录路径,避免转义符.</p>
<ul>
<li>手动执行改文件代码能正常部署到指定的站点,但提交数据的时候却无法自动部署.全程没有发现报错,就算报错也看不到.这个问题,明显就是Visual SVN Server服务的执行权限不足.</li>
</ul>
<p>简单操作 win+R  运行 services.msc 找到visual svn server 服务 右键属性 登陆面板 设置桌面交互或者管理员权限再试.</p>
<h2 id="GIT基础篇"><a href="#GIT基础篇" class="headerlink" title="GIT基础篇"></a>GIT基础篇</h2><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://www.chenyudong.com/archives/tortoisegit-use-key-authentication.html" target="_blank" rel="external">tortoisegit使用密钥连接服务器</a></li>
<li><a href="http://blog.csdn.net/dahuzix/article/details/49053507" target="_blank" rel="external">利用svn钩子hooks/post-commit实现代码自动部署-LINUX</a></li>
<li><a href="http://www.cnblogs.com/xiezhengcai/archive/2013/11/27/3445457.html" target="_blank" rel="external">SVN利用钩子实现代码同步到WEB目录-WINDOWS</a></li>
</ul>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序基础教程</title>
    <url>/2017/08/15/the-tutorial-about-wechat-mini-program/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>许久未动手写过手机应用,刚好老板让写一个关于游戏的三端应用(安卓、苹果、微信小程序).想来对我而言也是好事,总比一直在游戏中转悠来得好.以下是关于微信小程序前端和服务端模块开发的一些经验总结.</p>
<h2 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><h3 id="前端模块"><a href="#前端模块" class="headerlink" title="前端模块"></a>前端模块</h3><h3 id="服务端模块"><a href="#服务端模块" class="headerlink" title="服务端模块"></a>服务端模块</h3><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2>]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>wechat</tag>
      </tags>
  </entry>
  <entry>
    <title>U8-服务端环境搭建及其思想架构的总结</title>
    <url>/2017/08/06/the-tutorial-about-the-U8-server/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段阵子一直在研究U8SDK的架构以及服务端的运行逻辑,顺便重新回顾大学期间学习的Java编程.结合最近的实践体验总结些U8Server的思路.</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>U8SDK是基于Java编写的,</p>
<h2 id="总体架构"><a href="#总体架构" class="headerlink" title="总体架构"></a>总体架构</h2><h2 id="用户模块"><a href="#用户模块" class="headerlink" title="用户模块"></a>用户模块</h2><h2 id="支付模块"><a href="#支付模块" class="headerlink" title="支付模块"></a>支付模块</h2><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<p><a href="http://www.uustory.com/" target="_blank" rel="external"> 优优网事</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>U8</tag>
      </tags>
  </entry>
  <entry>
    <title>关于接入QQ微端游戏的教程</title>
    <url>/2017/07/31/the-tutorial-about-microclient-with-tencent/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为Unity3D引擎开发的一款3D枪战类型的游戏,其本身就具备了多端兼容的优势.当游戏在国内外各大手游市场上不断发力的同时,我们也开始尝试在进军微端游戏市场.QQ游戏平台作为一个集成手游、页游、端游三位于一体的游戏平台,最适合游戏公司甚至独立游戏开发者发布自己游戏.</p>
<h2 id="常用接口"><a href="#常用接口" class="headerlink" title="常用接口"></a>常用接口</h2><p>接入QQ游戏平台端游有几个必须接入的游戏接口,分别为获取用户信息,蓝钻信息,Q点直购.这些接口接入最麻烦的就是签名验证功能.其中获取用户信息、蓝钻信息接口和Q点直购在签名验证上存在一些区别.以下对签名验证功能做一些简要的讲解.</p>
<p><a href="http://wiki.open.qq.com/wiki/%E8%85%BE%E8%AE%AF%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%94%E7%94%A8%E7%AD%BE%E5%90%8D%E5%8F%82%E6%95%B0sig%E7%9A%84%E8%AF%B4%E6%98%8E" target="_blank" rel="external">第三方应用开放平台参数验证</a>,将请求源串以及密钥根据一定签名方法生成的签名值，用来提高传输过程参数的防篡改性.签名的生成分为3个步骤:构造源串,构造密钥,生成签名.</p>
<h3 id="构造源串"><a href="#构造源串" class="headerlink" title="构造源串"></a>构造源串</h3><ul>
<li>将请求的URI路径进行URL编码.</li>
<li>将除’sign’以外的其他参数按照键值key进行字典升序排列</li>
<li>将排序的参数(key=value)按照”&amp;”拼接起来,并进行URL编码</li>
<li>将请求方式(GET或者POST)以及第一、三步骤生成URL编码字符串用”&amp;”拼接起来.</li>
</ul>
<h3 id="构造密钥"><a href="#构造密钥" class="headerlink" title="构造密钥"></a>构造密钥</h3><p>在开放平台申请应用之后获取一串字符串(appkey),在appkey末尾加上”&amp;”,就是密钥源串</p>
<h3 id="生成签名"><a href="#生成签名" class="headerlink" title="生成签名"></a>生成签名</h3><ul>
<li>使用HMAC-SHA1利用第二步生成的秘钥对第一步生成源串加密.(php5.1.2之后直接使用hash_hmac函数)</li>
<li>将加密后的字符串进行Base64编码.</li>
</ul>
<p>通过以上几个步骤变可得到签名.在常用的这个接口接入验证的时候会使用到.当然,为了帮助我们检查签名的有效性,开放者后台有专用的<a href="http://open.qq.com/tools" target="_blank" rel="external">开放者平台联调工具</a>.</p>
<h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><p>以下是PHP版本的sign源串加密算法<br><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSDKSignature</span><span class="params">($arrData,$uri,$arrTemp=<span class="string">""</span>)</span></span>&#123;</div><div class="line">    $strUri = <span class="keyword">$this</span>-&gt;getUriList($uri);</div><div class="line">    <span class="keyword">list</span>($ms,$sc) = explode(<span class="string">" "</span>,microtime());</div><div class="line">    $time = @date(<span class="string">'[d/M/Y:H:i:s]'</span>).<span class="string">"[$ms]"</span>;</div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>($strUri))&#123;</div><div class="line">        $idApp = <span class="keyword">$this</span>-&gt;idApp;</div><div class="line">        $keyApp = <span class="keyword">$this</span>-&gt;keyApp;</div><div class="line">        $arrDataGetTemp = <span class="keyword">array</span>(</div><div class="line">            <span class="string">"appid"</span>      =&gt;   $idApp,</div><div class="line">            <span class="string">"pf"</span>         =&gt;   <span class="string">"qqgame"</span>,</div><div class="line">            <span class="string">"format"</span>     =&gt;   <span class="string">"json"</span>,</div><div class="line">            <span class="string">"zoneid"</span>     =&gt;   <span class="string">"0"</span>,</div><div class="line">        );</div><div class="line">        $arrDataGetTemp = is_array($arrTemp) ? <span class="keyword">array</span>() : $arrDataGetTemp;</div><div class="line">        $arrData = array_merge($arrData,$arrDataGetTemp);</div><div class="line"></div><div class="line">        $method = <span class="string">"GET"</span>;</div><div class="line">        ksort($arrData);</div><div class="line">        $strData = <span class="keyword">$this</span>-&gt;UrlEncode($uri,$arrData);</div><div class="line">        $strOriginal = $method.<span class="string">"&amp;"</span>.urlencode($strUri).<span class="string">"&amp;"</span>.urlencode($strData);</div><div class="line">        $appKey = $keyApp.<span class="string">"&amp;"</span>;</div><div class="line">        $encrypt = hash_hmac(<span class="string">"sha1"</span>,$strOriginal,$appKey,<span class="keyword">true</span>);</div><div class="line">        $signature = base64_encode($encrypt);</div><div class="line">    &#125;</div><div class="line">    $signature = <span class="keyword">empty</span>($signature) ? <span class="string">""</span> : $signature;</div><div class="line">    $arrRst = <span class="keyword">array</span>(</div><div class="line">        <span class="string">"data"</span>      =&gt;      $arrData,</div><div class="line">        <span class="string">"signature"</span>     =&gt;  $signature,</div><div class="line">    );</div><div class="line">    <span class="keyword">return</span> $arrRst;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>因为支付部分对sign验证部分要求比较严格,在代码上做了一些调整.单独抽出重写.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">PayUrlEncode</span><span class="params">($string)</span> </span>&#123;</div><div class="line">    $encodeStr = urlencode($string);</div><div class="line">    $encodeStr = str_replace(<span class="string">"%2A"</span>, <span class="string">"*"</span>, $encodeStr);</div><div class="line">    $encodeStr = str_replace(<span class="string">"%21"</span>, <span class="string">"!"</span>, $encodeStr);</div><div class="line">    $encodeStr = str_replace(<span class="string">"%28"</span>, <span class="string">"("</span>, $encodeStr);</div><div class="line">    $encodeStr = str_replace(<span class="string">"%29"</span>, <span class="string">")"</span>, $encodeStr);</div><div class="line"></div><div class="line">    $encodeStr = str_replace(<span class="string">'+'</span>,<span class="string">'%20'</span>,$encodeStr);</div><div class="line">    $encodeStr = str_replace(<span class="string">'_'</span>,<span class="string">'%5F'</span>,$encodeStr);</div><div class="line">    $encodeStr = str_replace(<span class="string">'.'</span>,<span class="string">'%2E'</span>,$encodeStr);</div><div class="line">    $encodeStr = str_replace(<span class="string">'-'</span>,<span class="string">'%2D'</span>,$encodeStr);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> $encodeStr;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getPayUrlEncode</span><span class="params">(&amp;$string)</span></span>&#123;</div><div class="line">    $string = QQGamePay::PayUrlEncode($string);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">UrlEncode</span><span class="params">($uri,$arrData)</span></span>&#123;</div><div class="line">    strcmp($uri,<span class="string">"delivery_goods"</span>) ? <span class="keyword">null</span> : array_walk($arrData,<span class="string">"QQGamePay::getPayUrlEncode"</span>);</div><div class="line">    <span class="keyword">return</span> urldecode(http_build_query($arrData,<span class="keyword">NULL</span>,<span class="string">"&amp;"</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="前端接口调用"><a href="#前端接口调用" class="headerlink" title="前端接口调用"></a>前端接口调用</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><h3 id="开通蓝钻"><a href="#开通蓝钻" class="headerlink" title="开通蓝钻"></a>开通蓝钻</h3><h3 id="QQ点直购"><a href="#QQ点直购" class="headerlink" title="QQ点直购"></a>QQ点直购</h3><h2 id="BI系统-罗盘"><a href="#BI系统-罗盘" class="headerlink" title="BI系统(罗盘)"></a>BI系统(罗盘)</h2><h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><h3 id="接口调用"><a href="#接口调用" class="headerlink" title="接口调用"></a>接口调用</h3><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://open.qqgame.qq.com/inside/lz03.htm" target="_blank" rel="external">总接口</a></li>
<li><a href="http://wiki.open.qq.com/wiki/%E6%94%AF%E4%BB%98%E6%8E%A5%E5%85%A5" target="_blank" rel="external">支付接入</a></li>
<li><a href="http://open.qq.com/tools" target="_blank" rel="external">联调工具</a></li>
<li><a href="http://open.qqgame.qq.com/wiki/24/35/46/48/48.html?ptlang=2052&amp;source&amp;ADUIN=877095327&amp;ADSESSION=1496715658&amp;ADTAG=CLIENT.QQ.5521_.0&amp;ADPUBNO=26675" target="_blank" rel="external">前端Web</a></li>
<li><a href="http://compass.qq.com/platforms" target="_blank" rel="external">罗盘</a></li>
</ul>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>QQ</tag>
      </tags>
  </entry>
  <entry>
    <title>在Centos7环境下开发环境打搭建杂集</title>
    <url>/2017/06/21/how-to-set-up-ftp-server-on-the-centos/</url>
    <content><![CDATA[<p>笔者平时开发使用的是Windows操作系统,服务器用的是阿里云服务器.一台较低配置的云服务器已经足够日常的研发需要.因为当时购买选用的是Centos7.x操作系统<del>(一般情况都是使用Centos作为服务器)</del>,研发所需的一些环境也会随着条件和需要不断增加.本篇文章会根据需要不断增加环境搭建的过程.</p>
<h2 id="Nginx-服务器"><a href="#Nginx-服务器" class="headerlink" title="Nginx 服务器"></a>Nginx 服务器</h2><h3 id="Nginx-介绍"><a href="#Nginx-介绍" class="headerlink" title="Nginx 介绍"></a>Nginx 介绍</h3><p>Nginx是一款轻量级的Web服务器/反向代理服务器及电子邮件代理服务器.由于它自身占用内存少,并发能力强的特点在同类型的网页服务器中有这不俗的表现.深受广大用户的喜爱.</p>
<h3 id="Nginx-安装"><a href="#Nginx-安装" class="headerlink" title="Nginx 安装"></a>Nginx 安装</h3><ul>
<li>在指定的目录下创建yum源配置文件.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">vim /etc/yum.repos.d/nginx.repo</div></pre></td></tr></table></figure>
<ul>
<li>插入以下一行代码,在vim环境下切换编辑模式</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">name=nginx repo</div><div class="line">baseurl=http://nginx.org/packages/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</div><div class="line">gpgcheck=0</div><div class="line">enabled=1</div></pre></td></tr></table></figure>
<ul>
<li>更新系统资源并安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">yum update &amp;&amp;  yum -y nginx install</div></pre></td></tr></table></figure>
<h3 id="Nginx-启动"><a href="#Nginx-启动" class="headerlink" title="Nginx 启动"></a>Nginx 启动</h3><ul>
<li>以下关于nginx常用的几个命令:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment">#启动</span></div><div class="line">systemctl start nginx.service</div><div class="line"><span class="comment">#关闭</span></div><div class="line">systemctl stop  nginx.service</div><div class="line"><span class="comment">#重载</span></div><div class="line">systemctl reload nginx.service</div><div class="line"><span class="comment">#重启</span></div><div class="line">systemctl restart nginx.service</div><div class="line"><span class="comment">#状态</span></div><div class="line">systemctl status nginx.service</div><div class="line"><span class="comment"># 配置文件</span></div><div class="line">vim /etc/nginx/nginx.conf</div></pre></td></tr></table></figure>
<ul>
<li>安装完nginx之后不要着急着把它启动起来,一帮情况是需要通过防火墙开放nginx的端口,默认是80.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment">#第一种方案,重启之后失效</span></div><div class="line">iptables -I INPUT 5 -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT</div><div class="line">service iptables save</div><div class="line"><span class="comment">#第二种方案,直接写在iptables文件中,需要注意顺序</span></div><div class="line">vim /etc/sysconfig/iptables</div><div class="line">-A INPUT 5 -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT</div></pre></td></tr></table></figure>
<p>开放防火墙的80端口之后,可以通过以上命令启动nginx.而且nginx在默认的情况下是有一个站点的,所以启动之后是可以直接访问的.简单的检查下nginx服务器是否正在运行,<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">ps aux | grep nginx</div></pre></td></tr></table></figure></p>
<ul>
<li>添加开机启动<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">systemctl <span class="built_in">enable</span> nginx.service</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="PHP7"><a href="#PHP7" class="headerlink" title="PHP7"></a>PHP7</h2><h3 id="PHP7-介绍"><a href="#PHP7-介绍" class="headerlink" title="PHP7 介绍"></a>PHP7 介绍</h3><p>PHP7使用新的 Zend Engine 3.0 提高应用程序性能两倍,比PHP5.6 低了 50％ 的内存消耗. 它可以服务于更多的并发用户，无需任何额外的硬件.此外,由于它摒弃低版本的一些过时的API而无法完全向下兼容.</p>
<h3 id="PHP7-安装"><a href="#PHP7-安装" class="headerlink" title="PHP7 安装"></a>PHP7 安装</h3><ul>
<li>Centos下默认的PHP版本比较低,一般情况下在安装之前先卸载已有的版本.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">yum remove php</div></pre></td></tr></table></figure>
<p>但是这样是并完全卸载掉PHP,以下命令是查看与php相关的所有软件.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">rpm -qa | grep php</div></pre></td></tr></table></figure>
<p>卸载前先查看下软件之前的相互依赖.没有依赖项的软件优先卸载.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">rpm <span class="_">-e</span> php70w-common-7.0.19-1.w7.x86_64</div></pre></td></tr></table></figure>
<ul>
<li>下载并安装指定版本的PHP7</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 下载</span></div><div class="line">rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</div><div class="line"><span class="comment"># 安装</span></div><div class="line">yum install php70w-7.0.19-1.w7.x86_64 php70w-cli-7.0.19-1.w7.x86_64 php70w-common-7.0.19-1.w7.x86_64 php70w-gd-7.0.19-1.w7.x86_64 php70w-ldap-7.0.19-1.w7.x86_64 php70w-mbstring-7.0.19-1.w7.x86_64 php70w-mcrypt-7.0.19-1.w7.x86_64 php70w-mysql-7.0.19-1.w7.x86_64 php70w-pdo-7.0.19-1.w7.x86_64</div><div class="line"><span class="comment"># 卸载</span></div><div class="line">rpm -qa | grep webstatic</div><div class="line">rpm <span class="_">-e</span>  上面搜索到的包即可</div></pre></td></tr></table></figure>
<ul>
<li>安装php-fpm</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">yum install php70w-fpm</div></pre></td></tr></table></figure>
<h3 id="PHP7-启动"><a href="#PHP7-启动" class="headerlink" title="PHP7 启动"></a>PHP7 启动</h3><ul>
<li>以下是PHP启动的常见命令</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 启动</span></div><div class="line">systemctl start php-fpm</div><div class="line"><span class="comment"># 关闭</span></div><div class="line">systemctl stop php-fpm</div><div class="line"><span class="comment"># 重启</span></div><div class="line">systemctl restart php-fpm</div><div class="line"><span class="comment"># 状态</span></div><div class="line">systemctl status php-fpm</div><div class="line"><span class="comment"># 配置文件</span></div><div class="line">vim /etc/php.ini</div></pre></td></tr></table></figure>
<p>安装完PHP之后就可以通过以上命令启动.查看PHP是否已经正在运行,</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">ps aux | grep php-fpm</div></pre></td></tr></table></figure>
<p>添加开机启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">systemctl <span class="built_in">enable</span> php-fpm</div></pre></td></tr></table></figure>
<h2 id="FTP-服务器"><a href="#FTP-服务器" class="headerlink" title="FTP 服务器"></a>FTP 服务器</h2><h3 id="FTP-介绍"><a href="#FTP-介绍" class="headerlink" title="FTP 介绍"></a>FTP 介绍</h3><p>一般而言,直接连接到服务器上是一个便捷而且安全的做法.搭建FTP服务器主要是为了服务其他人,他们不要动那么多命令照样可以在服务器上指定的路径上完成一些任务.比如上传搭建服务器CDN源站后给相关人员上传资源,他们只关心将资源上传到指定的路径之后就可以访问,而不用通过一大堆的命令去完成.</p>
<h3 id="FTP-安装"><a href="#FTP-安装" class="headerlink" title="FTP 安装"></a>FTP 安装</h3><ul>
<li>查看是否有安装,如果没有就安装.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 检查</span></div><div class="line">rpm -qa | grep vsftpd</div><div class="line"><span class="comment"># 安装</span></div><div class="line">yum -y install vsftpd</div><div class="line"><span class="comment"># 开机启动</span></div><div class="line">systemctl <span class="built_in">enable</span> vsftpd.service</div></pre></td></tr></table></figure>
<h3 id="FTP-配置"><a href="#FTP-配置" class="headerlink" title="FTP 配置"></a>FTP 配置</h3><ul>
<li>修改配置文件vsftpd.conf</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 访问限制</span></div><div class="line">anonymous_enable=NO</div><div class="line">local_enable=YES</div><div class="line"><span class="comment"># 设置路径</span></div><div class="line">chroot_list_enable=YES</div><div class="line"><span class="comment"># 设置宿主账号列表</span></div><div class="line">chroot_list_file=/etc/vsftpd/chroot_list</div><div class="line"><span class="comment"># 设置PAM认证文件名</span></div><div class="line">pam_service_name=vsftpd</div><div class="line"><span class="comment"># 开启虚拟账号</span></div><div class="line">guest.enable=YES</div><div class="line"><span class="comment"># 设置宿主用户</span></div><div class="line">guest.username=username</div><div class="line"><span class="comment"># 设置存放虚拟账号的文件夹路径</span></div><div class="line">user_config_dir=/etc/vsftpd/vuser_conf</div><div class="line"><span class="comment"># 端口监听,默认是21</span></div><div class="line">listen_port=21</div></pre></td></tr></table></figure>
<ul>
<li>创建允许访问的宿主账号文件,填写已存在的宿主账号并保存</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">vim /etc/vsftpd/chroot_list</div></pre></td></tr></table></figure>
<ul>
<li>创建虚拟账号和密码,<strong><em>奇数行是账号,偶数行是密码</em></strong>,并生成认证文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 创建虚拟账号信息并保存为vuser_passwd.txt</span></div><div class="line">vim /etc/vsftpd/vuser_passwd.txt</div><div class="line"><span class="comment"># 生成认证文件vuser_passwd.db</span></div><div class="line">dbload -T -t <span class="built_in">hash</span> <span class="_">-f</span> /etc/vsftpd/vuser_passwd.txt /etc/vsftpd/vuser_passwd.db</div><div class="line"><span class="comment"># 编辑认证文件,加入ftp认证并保存</span></div><div class="line">vim /etc/pam.d/vsftpd</div><div class="line"><span class="comment"># 查找系统版本号</span></div><div class="line">getconf LONG_BIT</div><div class="line"><span class="comment">#系统为32位：</span></div><div class="line">auth required pam_userdb.so db=/etc/vsftpd/vuser_passwd</div><div class="line">account required pam_userdb.so db=/etc/vsftpd/vuser_passwd</div><div class="line"><span class="comment"># 系统为64位：</span></div><div class="line">auth required /lib64/security/pam_userdb.so db=/etc/vsftpd/vuser_passwd</div><div class="line">account required /lib64/security/pam_userdb.so db=/etc/vsftpd/vuser_passwd</div></pre></td></tr></table></figure>
<ul>
<li>创建虚拟账号文件信息</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 创建虚拟账号文件</span></div><div class="line">vim /etc/vsftpd/vuser_conf/username</div><div class="line"><span class="comment"># 权限限制</span></div><div class="line"><span class="comment"># 虚拟用户根目录,根据实际情况修改  该目录必须要有读写权限 chmod -R 777 目录</span></div><div class="line">local_root=/var/www/html  </div><div class="line"><span class="comment"># 可写</span></div><div class="line">write_enable=YES</div><div class="line"><span class="comment"># 掩码  </span></div><div class="line">anon_umask=022</div><div class="line">anon_world_readable_only=NO</div><div class="line">anon_upload_enable=YES</div><div class="line">anon_mkdir_write_enable=YES</div><div class="line">anon_other_write_enable=YES</div></pre></td></tr></table></figure>
<p>以上代码注意每行末尾的空格,否则会出现认证成功但却无法登陆的窘境.</p>
<ul>
<li>开放防火墙端口,默认是21.设置启动服务器</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 设置防护墙,防护墙添加访问限制</span></div><div class="line">-A INPUT -m state --state NEW <span class="_">-s</span> xxx.xxx.xxx.xxx  -m tcp -p tcp --dport 21 -j ACCEPT</div><div class="line">systemctl restart vsftpd.service</div></pre></td></tr></table></figure>
<h3 id="FTP-日志"><a href="#FTP-日志" class="headerlink" title="FTP 日志"></a>FTP 日志</h3><p>这步骤很重要,开启FTP上传下载日志.可以监控访问者的所有行为.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">xferlog_enable=YES</div><div class="line">xferlog_file=/var/<span class="built_in">log</span>/vsftpd/xferlog</div><div class="line">xferlog_std_format=YES</div><div class="line"></div><div class="line">dual_log_enable=YES</div><div class="line">vsftpd_log_file=/var/<span class="built_in">log</span>/vsftpd/vsftd.log</div></pre></td></tr></table></figure>
<h2 id="邮件功能"><a href="#邮件功能" class="headerlink" title="邮件功能"></a>邮件功能</h2><h3 id="mail介绍"><a href="#mail介绍" class="headerlink" title="mail介绍"></a>mail介绍</h3><p>很多时候我们希望服务器帮我们做些简单的.系统的.重复的事情,我们往往会将这些任务定期化或者自动化,在一定程度上解放劳动力.在现实工作上有很多需要让服务器自己来处理.让将处理结果通过一定的方式通知到相应的工作人员.<br>有很多的运维平台其实也集成了这样的功能,可以选择通过邮件的方式,微信公众号推送,甚至是电报.其实不管使用什么方式,这些都是通知工具.以下主要介绍在linux下通过mail命令发送邮件.</p>
<h3 id="mail安装"><a href="#mail安装" class="headerlink" title="mail安装"></a>mail安装</h3><p>我们通过mail命令发送邮件,实际上是调用sendmail来执行对外发送邮件功能.使用以下命令指定安装操作.<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">yum install -y sendmail</div><div class="line">service sendmail start</div></pre></td></tr></table></figure></p>
<h3 id="mail配置"><a href="#mail配置" class="headerlink" title="mail配置"></a>mail配置</h3><p>正常情况下在安装之后mail默认使用本地的sendmail功能发送邮件,但如果不安装sendmail模块也可以通过外部SMTP服务器来发送邮件.此时需要修改mail的配置文件(/etc/nail.rc).<br>在配置文件末尾追加外部SMTP服务器参数信息.特别注意等号前后不能有空格.以下以腾讯的SMTP为例.<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">vim /etc/nail.rc</div><div class="line">set from=Your-mail@qq.com</div><div class="line">set smtp=smtp.exmail.qq.com</div><div class="line">set smtp-auth-user=Your-mail@qq.com</div><div class="line">set smtp-auth-password=Password_mail</div><div class="line">set smtp-auth=login</div></pre></td></tr></table></figure></p>
<h3 id="mail使用"><a href="#mail使用" class="headerlink" title="mail使用"></a>mail使用</h3><p>mail参数选项如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">-b&lt;地址&gt;：指定密件副本的收信人地址；</div><div class="line">-c&lt;地址&gt;：指定副本的收信人地址；</div><div class="line">-f&lt;邮件文件&gt;：读取指定邮件文件中的邮件；</div><div class="line">-i：不显示终端发出的信息；</div><div class="line">-I：使用互动模式；</div><div class="line">-n：程序使用时，不使用mail.rc文件中的设置；</div><div class="line">-N：阅读邮件时，不显示邮件的标题；</div><div class="line">-s&lt;邮件主题&gt;：指定邮件的主题；</div><div class="line">-u&lt;用户帐号&gt;：读取指定用户的邮件；</div><div class="line">-v：执行时，显示详细的信息。</div></pre></td></tr></table></figure>
<p>在Shell下使用mail发送邮件很方便,特别处理在一些邮件警报或者定时数据报表的时候.以下通过管道的形式发送邮件.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">## 邮件警报</div><div class="line">echo -e &quot;区域：$&#123;area&#125;\n状态：在线人数下降超过百分十,当前在线人数$&#123;b&#125;\n服务器当前时间：`date`&quot; | tr -d &apos;\r&apos;| mail -s &quot;$&#123;area&#125;在线人数异常下降&quot; $&#123;list&#125;</div><div class="line"></div><div class="line">## 数据报表</div><div class="line">echo &quot;用户数据报表&quot; | mail -v -s &quot;上个月用户数据报表&quot; -a &quot;data.zip&quot; $&#123;emailList&#125;</div></pre></td></tr></table></figure>
<h2 id="SSH-服务器"><a href="#SSH-服务器" class="headerlink" title="SSH 服务器"></a>SSH 服务器</h2><h3 id="SSH-介绍"><a href="#SSH-介绍" class="headerlink" title="SSH 介绍"></a>SSH 介绍</h3><h3 id="SSH-常见问题"><a href="#SSH-常见问题" class="headerlink" title="SSH 常见问题"></a>SSH 常见问题</h3><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://jingyan.baidu.com/article/d169e186469f44436611d8ec.html" target="_blank" rel="external">如何在centos7环境下安装vsftpd</a><br><a href="http://blog.51cto.com/ityunwei2017/1713425" target="_blank" rel="external">Linux下使用mail命令发送邮件</a><br><a href="https://www.cnblogs.com/mousean/p/5972272.html" target="_blank" rel="external">centos 7 下发送邮件设置</a><br><a href="http://man.linuxde.net/mail" target="_blank" rel="external">Linux命令大全</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ftp</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习-Pytorch框架初体验</title>
    <url>/2017/06/09/the-elegant-framework-about-pytorch/</url>
    <content><![CDATA[<p>自从阿尔法Go相继与围棋界顶尖棋手博弈之后,世界上开始了机器学习和深度学习的两个技术学习.追随着浩浩汤汤的学习大潮,慢慢地去接触深度学习框架.</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>deep-learning</tag>
        <tag>pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>博客站内搜索引擎</title>
    <url>/2017/05/27/the-web-plugin-with-google-customer-search/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近经常逛V2EX网站,对其站内的搜索引擎特别好奇.站内对其也有相关的讨论,才知道原来借助的是谷歌的搜索-Custom Search Engine(简称CSE).</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>通过谷歌自定义搜索引擎(以下称之为CSE)的使用,我们可以很方便的在我们的博客首页上添加谷歌搜索框,充分利用谷歌抓取的数据从而帮助他们从我们的站点上搜索到满足他们需要的信息.通过自定义搜索引擎的功能,为自己的网站提供更加丰富的搜索需要并提高站点的搜索质量从而增加站点自身的搜索排名.</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>要使用谷歌自定义搜索引擎的前提,也是最重要的一点自然是能访问谷歌开发者后台.利用注册号的账号登录谷歌控制台才能继续以下其他步骤.</p>
<h3 id="自定义搜索引擎创建与安装"><a href="#自定义搜索引擎创建与安装" class="headerlink" title="自定义搜索引擎创建与安装"></a>自定义搜索引擎创建与安装</h3><ul>
<li>使用已有的谷歌账号登入谷歌的<a href="https://cse.google.com/create/new" target="_blank" rel="external">控制台</a>创建一个搜索引擎.</li>
<li>输入需要待搜索的站点节点,这里所说的站点节点既可以是泛域名搜索,也可以是指定站点,或者是站点的某个部分内容,比如一个网页.</li>
<li>根据自身站点的语言特点选择所需的语言,不通的语言意味着生成的搜索插件有着不通的样式和表现形式,但不会影响到搜索的结果.</li>
<li>创建之后会生成一段JavaScript脚本和一个谷歌特有的标签.这个标签就是谷歌搜索框,把这个标签代替站点搜索框的位置,在站点的嵌入相应的JavaScript脚本即可.</li>
</ul>
<h3 id="谷歌搜索框的其他使用方法"><a href="#谷歌搜索框的其他使用方法" class="headerlink" title="谷歌搜索框的其他使用方法"></a>谷歌搜索框的其他使用方法</h3><p>如果仔细观察V2EX的搜索框的部分代码和搜索链接,我们会发现V2EX的搜索虽然用到的也是自定义搜索引擎但和上面的方法不太一样.主要的区别在于不用使用谷歌标签和脚本.只要把将搜索的结果重定向到谷歌搜索,让他们替我们针对网站做定向搜索.以下针对hexo框架的博客站点简要说明下.</p>
<ul>
<li>谷歌自定义搜索引擎只是站点搜索的一种形式,为了方便站点其他搜索引擎控制与切换,我们在配置文件添加切换开关.<br>在_config.yml配置文件中修改搜索框的控制类型,根据需要暂时定义两个参数控制.</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 是否显示边栏中的搜索框（仅样式，未添加搜索功能）</span></div><div class="line"><span class="comment"># Search Box in left column</span></div><div class="line"><span class="comment"># type google | baidu | swifttype</span></div><div class="line"><span class="attr">search_box:</span></div><div class="line"><span class="attr">  on:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  type:</span> google</div></pre></td></tr></table></figure>
<ul>
<li>根据不同的主题找到搜索框指定位置的页面上修改页面跳转的重定向即可.<br>页面重定向后的链接类似于 <a href="https://www.google.com/search?q=搜索内容&amp;q=site:站点域名" target="_blank" rel="external">https://www.google.com/search?q=搜索内容&amp;q=site:站点域名</a>, 根据这个思路只要稍微懂页面前端的程序猿自然很清楚如何修改.</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">theme.search_box.on</span> &amp;&amp; <span class="attr">theme.search_box.type</span> == <span class="string">'google'</span>)&#123; %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"https://www.google.com/search"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">method</span>=<span class="string">"get"</span> <span class="attr">accept-charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"q"</span> <span class="attr">class</span>=<span class="string">"search"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">maxlength</span>=<span class="string">"20"</span> <span class="attr">placeholder</span>=<span class="string">" &lt;%= __('index.search') %&gt;..."</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"q"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">value</span>=<span class="string">"site:&lt;%- config.url.replace(/^https?:\/\//, '') %&gt;"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%&#125;%</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html" target="_blank" rel="external">利用swiftype为hexo添加站内搜索v2.0</a><br><a href="https://developers.google.com/custom-search/" target="_blank" rel="external">Google Custom Search Api</a></p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>google</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>多说评论系统</title>
    <url>/2017/05/26/the-comment-system-about-duoshuo/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>搭建博客的时候选用了多说作为评论系统之后就一直爱不释手,特别是它充分利用评论系统结合自身收集的数据以及人性化的插件使得博客变得更加丰富.不过可惜的是<a href="http://dev.duoshuo.com/threads/58d1169ae293b89a20c57241" target="_blank" rel="external">多说提示即将关闭</a>,当半年前多说官方宣布由于内部原因导致多说使用将于2017年6月1日到期这个消息的时候让很多用户感到倍加惋惜.虽然作为其中的一位受益者,希望写下这份纪念博客不算太晚.</p>
<h2 id="多说插件"><a href="#多说插件" class="headerlink" title="多说插件"></a>多说插件</h2><p>多说是追求最佳的用户体验的社交化评论框,为中小网站提供多账号登录并评论的功能.具有众多实用性,功能强大且永久免费.与其他的评论平台的不同之处在于,多说提供众多的插件.比如最新评论,最近访客,站点热评文章,文章评论数,以及分享组件等等.同时,多说评论框的描述,背景图片,头像都支持自定义样式调整的功能.用户可以根据自己的喜好调整不同的样式.</p>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>虽然博客建站不就,但在慢慢的接触到了多说的评论系统的几个不同插件之后发现它对丰富博客功能起到了重要的作用.最直接的表现就是让静态博客变得生动有趣起来.一方面,读者可以借助第三方账号通过评论系统与博主实时沟通而没有阻碍.另一方面,博主可以通过该系统搜集读者的行为数据有助于提高博客的阅读量.</p>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>针对多说众多的功能,以下就博客目前使用的几个插件做介绍.在搞清楚如何安装这些插件的之前,需要我们到<a href="http://dev.duoshuo.com/" target="_blank" rel="external">多说官网</a> 注册一个账号并填写唯一的站点域名值.</p>
<h4 id="评论框"><a href="#评论框" class="headerlink" title="评论框"></a>评论框</h4><p>多说评论框是多说的基础功能,它需要使用一个多说提供的公共脚本库.这里的评论框使用的到时多说标签”ds-thread”.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"duoshuo"</span> <span class="attr">id</span>=<span class="string">"comments"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 多说评论框 start --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ds-thread"</span> <span class="attr">data-thread-key</span>=<span class="string">"&lt;%=key%&gt;"</span> <span class="attr">data-title</span>=<span class="string">"&lt;%=title%&gt;"</span> <span class="attr">data-url</span>=<span class="string">"&lt;%=url%&gt;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 多说评论框 end --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> duoshuoQuery = &#123;short_name:<span class="string">"&lt;%=theme.duoshuo.domain%&gt;"</span>&#125;;</div><div class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> ds = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">        ds.type = <span class="string">'text/javascript'</span>;</div><div class="line">        ds.async = <span class="literal">true</span>;</div><div class="line">        ds.src = (<span class="built_in">document</span>.location.protocol == <span class="string">'https:'</span> ? <span class="string">'https:'</span> : <span class="string">'http:'</span>) + <span class="string">'//static.duoshuo.com/embed.js'</span>;</div><div class="line">        ds.charset = <span class="string">'UTF-8'</span>;</div><div class="line">        (<span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>]</div><div class="line">         || <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>]).appendChild(ds);</div><div class="line">    &#125;)();</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 多说公共JS代码 end --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>通过以上的脚本基本上可以看出一些端倪,多说的所有功能依赖一个<a href="//static.duoshuo.com/embed.js">脚本</a>.多说是依据注册时使用的域名值来区分并记录数据的.多说会更具每篇文章的标题进行索引,然后依据不同的标题显示不同的数据.以下是多说评论框的代码.这里的data-thread-key是博客的URI,data-url是完整的RUL.<a href="http://dev.duoshuo.com/docs/50b344447f32d30066000147" target="_blank" rel="external">详情移步多说…</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ds-thread"</span> <span class="attr">data-thread-key</span>=<span class="string">"&lt;%=key%&gt;"</span> <span class="attr">data-title</span>=<span class="string">"&lt;%=title%&gt;"</span> <span class="attr">data-url</span>=<span class="string">"&lt;%=url%&gt;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="文章评论数"><a href="#文章评论数" class="headerlink" title="文章评论数"></a>文章评论数</h4><p>多说的文章评论数的位置是放在文章列表右侧,博主不需要点进文章详情也可以大致了解文章的评论数.这是个简单的插件,多说API根据之前提供的data-thread-key的值进行查找并返回相应的评论数,我们需要根据提供的数据做些页面的美化就可.这里使用的标签是”ds-thread-count”.<a href="http://dev.duoshuo.com/docs/5016427f77cf5fa30500000e" target="_blank" rel="external">详情移步多说…</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ds-thread-count"</span> <span class="attr">data-thread-key</span>=<span class="string">"2016/08/28/how-to-switch-web-pages-without-refresh/"</span> <span class="attr">data-count-type</span>=<span class="string">"comments"</span>&gt;</span>暂无评论<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="最近访客"><a href="#最近访客" class="headerlink" title="最近访客"></a>最近访客</h4><p>当游客用第三方账号登录之后,读者的第三方头像会在最近访客中显示出来.这里使用的标签是”ds-recent-visitors”.使用该插件有两个方面的好处.<a href="http://dev.duoshuo.com/docs/4ff28d6f552860f21f00000c" target="_blank" rel="external">详情移步多说…</a></p>
<ul>
<li>如果读者刚好也是多说的用户,而且在多说后台配置了各自的博客链接.在最近访客部分的头像也附带了对应的站点链接.这样让很多的站点直接互相分享站点暴露值.</li>
<li>就博主而言,如果能在分配一个最近访客展示墙无疑是一种自身能力的最好证明.如果博客写得好,吸引的读者越多,最近访客展示墙展示的读者也会越多.</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ds-recent-visitors"</span> <span class="attr">data-num-items</span>=<span class="string">"28"</span> <span class="attr">data-avatar-size</span>=<span class="string">"42"</span> <span class="attr">id</span>=<span class="string">"ds-recent-visitors"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="动态加载"><a href="#动态加载" class="headerlink" title="动态加载"></a>动态加载</h4><p>多说的动态加载的特点是多说的类库一次加载之后,其所有的插件可以根据各自的功能判断动态加载.特别在于网站引入pjax局部异步加载功能之后,多说的动态加载表现出其他原生插件所无法比拟的优越性.以致于现在不得不使用其它评论系统之后,越发发现多说的方便和实用.</p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>尽管有多么的不舍,但多说始终都是要关闭的.对比国内外的几种评论系统,虽然各有各的优缺点,相信也会满足博客的基本的要求.</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://dev.duoshuo.com/docs/" target="_blank" rel="external">多说帮助文档</a><br><a href="http://dev.duoshuo.com/docs/4ff1cfd0397309552c000017" target="_blank" rel="external">多说样式的修改</a></p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>duoshuo</tag>
      </tags>
  </entry>
  <entry>
    <title>多功能网页音乐播放器</title>
    <url>/2017/05/22/the-web-plugin-with-music-player/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>个人喜欢边听音乐便工作的程序猿,可无奈因为版权所限导致有些喜欢的音乐在不同的平台.意味着如果想听音乐便需要有不同平台的账号,非常不方便.因而萌生自己改写音乐插件,算是个人技能的拓展提升吧.</p>
<h2 id="音乐插件"><a href="#音乐插件" class="headerlink" title="音乐插件"></a>音乐插件</h2><p>在创建博客的时候也参考过别人分享的心得以及一些亮点,其中一个就是音乐播放器插件.原文作者没有提到具体做法,只是那么对于音乐播放器那么一提.不管是否说者有意,但是那是似乎也没有给我多少的印象.</p>
<p>喜欢有事没事就去逛逛V2EX,就像如同去淘淘心玩意一样.刚好是去年的五一劳动节,有个网友在V站上分享了他们的音乐插件.该插件使用的是angular些的一个chrome插件,在开发者模式下可以播放支持网易,QQ,虾米三方音乐平台.这样用户可以随心所欲的听听三个播放器的不同的资源,同时还支持搜索功能.真心好用~</p>
<p>自己喜欢在网易上听音乐,突然好奇网易音乐的播放器一个小细节.为什么切换网页的时候,音乐不会断掉或者说重新刷新.后来去搜索才知道原来使用的是pjax技术异步加载,局部刷新.这个功能也不算是新技术,但是大大提高了页面缓存和加载的速度.因为是局部刷新,所以音乐在切换页面的时候不会因此而重新加载.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对新技术的好奇往往很能考察一名程序猿敏锐的嗅觉~</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/listen1/listen1_chrome_extension/tree/master/js/vendor" target="_blank" rel="external">Listener plugin</a><br><a href="https://binaryify.github.io/NeteaseCloudMusicApi" target="_blank" rel="external">网易云音乐nodejs版本</a><br><a href="https://api.xiaocp.com/player/" target="_blank" rel="external">网易专辑音乐播放器插件</a></p>
<div class="github-widget" data-repo="terrancy/musicPlayer"></div>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>plugin</tag>
        <tag>music</tag>
      </tags>
  </entry>
  <entry>
    <title>WannaCry蠕虫病毒的快速蔓延与预防</title>
    <url>/2017/05/15/the-way-about-AntiWannaCry/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近日,全球突发比特币病毒疯狂袭击公共和商业系统事件.由于某国外不法分子利用美国国家安全局未被披露的安全漏洞”EternalBlue”,以类似于蠕虫病毒的传播方式席卷世界各地.通过扫描主机上TCP445端口(Server Message Block/SMB),该病毒尝试攻击目标主机并加密存储在主机上的文档,进而要求以比特币的形式索要赎金.</p>
<h2 id="预防"><a href="#预防" class="headerlink" title="预防"></a>预防</h2><p>既然知道这种蠕虫病毒的主要特点是扫描主机上TCP445端口,我们便可以直接通过开启防火墙关闭445端口.当蠕虫病毒一下子蔓延开来的同时,微博上很多人也给出了相应的应对方法.为避免开机后来不及处理便措手不及,需要在开机前先断开主机与一切可以联网的介质,包括网线和无线网.然后开启电脑上的防火墙,按照网上的教程关掉445端口即可.为方便某些技术小白和手残党,以下结合上述的主要操纵要求写了个一键处理的bash文件.当然,需要管理员权限执行~</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">@ECHO OFF</div><div class="line"></div><div class="line">::run with admin</div><div class="line"></div><div class="line">&gt;nul 2&gt;&amp;1 <span class="string">"%SYSTEMROOT%\system32\cacls.exe"</span> <span class="string">"%SYSTEMROOT%\system32\config\system"</span></div><div class="line"><span class="keyword">if</span> <span class="string">'%errorlevel%'</span> NEQ <span class="string">'0'</span> (</div><div class="line">goto UACPrompt</div><div class="line">) <span class="keyword">else</span> ( goto gotAdmin )</div><div class="line">:UACPrompt</div><div class="line"><span class="built_in">echo</span> Set UAC = CreateObject^(<span class="string">"Shell.Application"</span>^) &gt; <span class="string">"%temp%\getadmin.vbs"</span></div><div class="line"><span class="built_in">echo</span> UAC.ShellExecute <span class="string">"%~s0"</span>, <span class="string">""</span>, <span class="string">""</span>, <span class="string">"runas"</span>, 1 &gt;&gt; <span class="string">"%temp%\getadmin.vbs"</span></div><div class="line"><span class="string">"%temp%\getadmin.vbs"</span></div><div class="line"><span class="built_in">exit</span> /B</div><div class="line">:gotAdmin</div><div class="line"><span class="keyword">if</span> exist <span class="string">"%temp%\getadmin.vbs"</span> ( del <span class="string">"%temp%\getadmin.vbs"</span> )</div><div class="line"></div><div class="line">:: bash code</div><div class="line">@ECHO ON</div><div class="line"></div><div class="line">netsh advfirewall <span class="built_in">set</span> allprofiles state on</div><div class="line">netsh advfirewall firewall add rule name=<span class="string">"deny135"</span> dir=<span class="keyword">in</span> protocol=tcp localport=135 action=block</div><div class="line">netsh advfirewall firewall add rule name=<span class="string">"deny136"</span> dir=<span class="keyword">in</span> protocol=tcp localport=136 action=block</div><div class="line">netsh advfirewall firewall add rule name=<span class="string">"deny137"</span> dir=<span class="keyword">in</span> protocol=tcp localport=137 action=block</div><div class="line">netsh advfirewall firewall add rule name=<span class="string">"deny138"</span> dir=<span class="keyword">in</span> protocol=tcp localport=138 action=block</div><div class="line">netsh advfirewall firewall add rule name=<span class="string">"deny139"</span> dir=<span class="keyword">in</span> protocol=tcp localport=139 action=block</div><div class="line">netsh advfirewall firewall add rule name=<span class="string">"deny445"</span> dir=<span class="keyword">in</span> protocol=tcp localport=445 action=block</div><div class="line">netsh advfirewall firewall add rule name=<span class="string">"deny42"</span> dir=<span class="keyword">in</span> protocol=tcp localport=42 action=block</div><div class="line">netsh advfirewall firewall add rule name=<span class="string">"deny135"</span> dir=<span class="keyword">in</span> protocol=udp localport=135 action=block</div><div class="line">netsh advfirewall firewall add rule name=<span class="string">"deny137"</span> dir=<span class="keyword">in</span> protocol=udp localport=137 action=block</div><div class="line">netsh advfirewall firewall add rule name=<span class="string">"deny138"</span> dir=<span class="keyword">in</span> protocol=udp localport=138 action=block</div><div class="line">netsh advfirewall firewall add rule name=<span class="string">"deny139"</span> dir=<span class="keyword">in</span> protocol=udp localport=139 action=block</div><div class="line"></div><div class="line">:: CLS</div><div class="line">@ECHO OFF</div><div class="line">ECHO 哎呀,终于搞定了.再也不用断网线防勒索了~</div><div class="line">PAUSE</div></pre></td></tr></table></figure>
<p> 该bash的功能主要分成两部分,第一部分就是要有管理员权限.判断当前用户是否是超级管理员.如果不是超级管理员就弹出窗口要求管理员权限.第二部分就开启防火墙并禁止掉一些关联的端口,自然少不了445.</p>
<p>如果有安装Telnet的话,可以尝试着去访问该端口看是否可用.</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">telnet ip地址 445</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>无论是在生活还是工作中我们肯定会遇到一些或大或小的”麻烦”.既然我们无法忽略也无法逃避,那么我们在遇到类似的困境时就更加需要抱有处之泰然的态度和死磕到底的决心.放心吧,牛奶和面包都会有的.只要不灰心丧气,努力去争取属于我们的点点滴滴,包括希望和梦想.</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2>]]></content>
      <categories>
        <category>bash</category>
      </categories>
      <tags>
        <tag>bash</tag>
        <tag>virus</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化运营维护人员的自动化运维工具</title>
    <url>/2017/04/30/the-awesome-automated-operations-tool-ELK/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着开源世界的到来,以往需要运维人员简单重复的操作逐步被自动化运维工具所取代.这不仅解放了运维人员的劳动力,提升工作效率,而且还是让整个工作变得更加智能高效.</p>
<h2 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h2><h2 id="系统监控"><a href="#系统监控" class="headerlink" title="系统监控"></a>系统监控</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.elastic.co/downloads" target="_blank" rel="external">elatic官网</a><br><a href="https://my.oschina.net/itblog/blog/547250" target="_blank" rel="external">ELK-搭建实时日志分析平台</a><br><a href="https://www.cnblogs.com/huangxincheng/p/7918722.html" target="_blank" rel="external">ELK-集中化日志平台</a><br><a href="http://blog.51cto.com/baidu/1676798" target="_blank" rel="external">ELK-开源实时日志分析ELK平台部署</a><br><a href="http://blog.51cto.com/467754239/1700828" target="_blank" rel="external">ELK-日志分析系统</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ELK</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP的常见问题</title>
    <url>/2017/03/27/the-common-prolems-about-PHP/</url>
    <content><![CDATA[<p>使用php编写代码过程中难免会遇到疑惑,本人会将工作中遇到的一些疑难杂症一一列举出来,如有错误不良赐教~</p>
<h2 id="file-get-contents-疑惑"><a href="#file-get-contents-疑惑" class="headerlink" title="file_get_contents 疑惑"></a>file_get_contents 疑惑</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>PHP中对文件操作印象最深的莫过于 file_get_contents 和 file_put_contents 两个读写文件的函数,可谓是屡试不爽.当然,这两个函数同样可以请求API.可问题在于,有时候不知道原因的出现请求不到数据的问题.通过排查nginx记录下来的错误日志排查到调用函数出现 Server Error 500 错误,而这些链接如果放到浏览器明明可以访问.</p>
<h3 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h3><p>查询资料之后才知道其实User Agent 的问题, 而这个可能是服务器对此做了限制.User Agent默认是没有开启的,通过PHP.ini配置文件开启即可.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 操作文件</span></div><div class="line">find / -name php.ini</div><div class="line"><span class="comment"># 编辑文件</span></div><div class="line">vim /etc/php.ini</div><div class="line">user_agent=<span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; rv:1.7.3) Gecko/20041001 Firefox/0.10.1"</span></div><div class="line"><span class="comment"># 重启PHP</span></div><div class="line">systemctl restart php-fpm</div></pre></td></tr></table></figure>
<p>通过开启User Agent的默认值来模拟浏览器发送请求达到”欺骗”服务器的目的.</p>
<h2 id="PHP-模块加载"><a href="#PHP-模块加载" class="headerlink" title="PHP 模块加载"></a>PHP 模块加载</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.cnblogs.com/devcjq/articles/6085006.html" target="_blank" rel="external">解决php无法通过file_get_contents或curl采集页面内容</a></p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>如何配置IPV6环境</title>
    <url>/2017/03/25/how-to-get-network-with-ipv6/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当公司辛苦研发好的应用提交苹果审核的时候,经常发生苹果审核严苛的审查机制被拒之门外.其中被拒的一个原因是IPV6搞的鬼.可惜的是,国内的大部分IPV6都被教育网垄断掉了.很多人根本就没法获取IPV6资源,畅想IPV6带来的便利.</p>
<h2 id="Windows-Server-环境"><a href="#Windows-Server-环境" class="headerlink" title="Windows Server 环境"></a>Windows Server 环境</h2><h2 id="CentOS-环境"><a href="#CentOS-环境" class="headerlink" title="CentOS 环境"></a>CentOS 环境</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.ttlsa.com/nginx/nginx-ipv6-configuration/" target="_blank" rel="external">nginx开启IPV6支持配置</a><br><a href="http://www.cnblogs.com/vijayfly/p/6612771.html" target="_blank" rel="external">阿里云服务器如何设置IPV6通过appstore的审核</a><br><a href="https://bbs.aliyun.com/read/284958.html?pos=11" target="_blank" rel="external">为阿里云ECS（Windows 2012）创建IPv6隧道地址</a><br><a href="https://bbs.aliyun.com/read/304532.html" target="_blank" rel="external">为阿里云ECS（CentOS 5）配置IPv6隧道地址</a><br><a href="http://ipv6-test.com/validate.php?" target="_blank" rel="external">PIV6-test</a><br><a href="http://www.subnetonline.com/pages/ipv6-network-tools/online-ipv6-ping.php" target="_blank" rel="external">online-ping-ipv6</a></p>
]]></content>
      <categories>
        <category>linux</category>
        <category>ipv6</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>如何进行Facebook直播</title>
    <url>/2017/03/21/how-to-get-facebook-live/</url>
    <content><![CDATA[<p>游戏内接入twitch直播和youtube直播之后,自然而然便会引入Facebook直播了.与前两者不同的是,Facebook live 是找不到第三方的API.没办法,只能自己动手写吧.如何有哪位读者刚好看到有相关的资料,麻烦在评论上提示下哈.</p>
]]></content>
      <categories>
        <category>facebook</category>
        <category>live</category>
      </categories>
      <tags>
        <tag>facebook</tag>
      </tags>
  </entry>
  <entry>
    <title>Bazaar支付的服务端验证</title>
    <url>/2017/03/20/the-similar-payment-sdk-about-bazaar/</url>
    <content><![CDATA[<h2 id="游戏上线后充值被破解"><a href="#游戏上线后充值被破解" class="headerlink" title="游戏上线后充值被破解"></a>游戏上线后充值被破解</h2><p>由于之前对Bazzar支付方式的了解不够透彻,以至于我以为支付的验证放在客户端便能解决问题,等到上线之后发现游戏的充值分分钟钟被lucky pacher破解,真是后悔莫及.因为对于服务端而言,现有的参数远远不能做任何验证的.无奈,只能在新包中重新对好API后等待游戏包强制更新了.</p>
<h2 id="游戏服务端API验证功能"><a href="#游戏服务端API验证功能" class="headerlink" title="游戏服务端API验证功能"></a>游戏服务端API验证功能</h2><p>Cafebazaar Developer API is a REST API that allows you to automatically perform some of your product management tasks. Using this API, you can check the status of your products and subscriptions sales from your personal server.</p>
<h3 id="Bazaar充值验证的OAuth2授权"><a href="#Bazaar充值验证的OAuth2授权" class="headerlink" title="Bazaar充值验证的OAuth2授权"></a>Bazaar充值验证的OAuth2授权</h3><p>因为Bazzar的充值验证功能是需要经过OAuth2授权之后才能请求的,所以在此之前需要预先通过授权获取refresh_token 和 access_token并保存在指定地方.一旦access_token失效之后需要通过refresh_token重新获取,并重新保存.当然,前提是你必须要现在开发者后台先创建好client_id和client_secret以及redirect_uri.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAccessToken</span><span class="params">()</span></span>&#123;</div><div class="line">    $jsonAccess = file_get_contents(<span class="keyword">$this</span>-&gt;dirConfig.<span class="string">"/access.json"</span>);</div><div class="line">    $arrDataAccess = json_decode($jsonAccess,<span class="keyword">true</span>);</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($arrDataAccess[<span class="string">'dateline'</span>]) &amp;&amp; <span class="keyword">$this</span>-&gt;getAccessTokenExpire($arrDataAccess[<span class="string">'dateline'</span>]))&#123;</div><div class="line">        $arrGetAccessTokenWhere = <span class="keyword">array</span>(</div><div class="line">            <span class="string">"grant_type"</span>        =&gt;      <span class="string">"refresh_token"</span>,</div><div class="line">            <span class="string">"client_id"</span>        =&gt;      <span class="keyword">$this</span>-&gt;idClient,</div><div class="line">            <span class="string">"client_secret"</span>        =&gt;      <span class="keyword">$this</span>-&gt;secretClient,</div><div class="line">            <span class="string">"refresh_token"</span>        =&gt;      <span class="keyword">$this</span>-&gt;tokenRefresh,</div><div class="line">        );</div><div class="line"></div><div class="line">        $jsonAccess = <span class="keyword">$this</span>-&gt;apiCurl-&gt;curlByPost(json_encode(<span class="keyword">$this</span>-&gt;uriGetToken),$arrGetAccessTokenWhere);</div><div class="line">        $arrDataAccess = json_decode($jsonAccess,<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($arrDataAccess[<span class="string">'access_token'</span>]))&#123;</div><div class="line">            $arrDataAccess[<span class="string">'dateline'</span>] = <span class="keyword">$this</span>-&gt;getCurrentTimeStamp() + $arrDataAccess[<span class="string">'expires_in'</span>];</div><div class="line">            $jsonAccess = json_encode($arrDataAccess);</div><div class="line">            file_put_contents(<span class="keyword">$this</span>-&gt;dirConfig.<span class="string">"/access.json"</span>,$jsonAccess);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $arrDataAccess;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Bazaar充值验证API的接入"><a href="#Bazaar充值验证API的接入" class="headerlink" title="Bazaar充值验证API的接入"></a>Bazaar充值验证API的接入</h3><p>获取到Bazzar的授权access_token之后,方可通过purchase validation api 获取相应的数据.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPurchaseValidation</span><span class="params">($arrData)</span></span>&#123;</div><div class="line">    $arrDataAccess  = <span class="keyword">$this</span>-&gt;getAccessToken();</div><div class="line">    $urlPurchaseValidation = <span class="string">"https://pardakht.cafebazaar.ir/devapi/v2/api/validate/&#123;$arrData['packagename']&#125;/inapp/&#123;$arrData['productId']&#125;/purchases/&#123;$arrData['purchaseToken']&#125;?access_token="</span>.$arrDataAccess[<span class="string">'access_token'</span>];</div><div class="line">    $timeLog = @date(<span class="string">'[d/M/Y:H:i:s]'</span>);</div><div class="line">    file_put_contents(<span class="keyword">$this</span>-&gt;dirRoot.<span class="string">"/purchaseValidation.txt"</span>,$timeLog.<span class="string">"-"</span>.$urlPurchaseValidation.PHP_EOL,FILE_APPEND);</div><div class="line">    $jsonPurchaseValidation = file_get_contents($urlPurchaseValidation);</div><div class="line">    file_put_contents(<span class="keyword">$this</span>-&gt;dirRoot.<span class="string">"/purchaseValidation.txt"</span>,$timeLog.<span class="string">"-"</span>.$jsonPurchaseValidation.PHP_EOL,FILE_APPEND);</div><div class="line">    <span class="keyword">return</span> $jsonPurchaseValidation;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果请求成功无误的话,将会从purchase validation api获取到一段json格式的数据,如下所示:<br><figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">   <span class="attr">"consumptionState"</span>: <span class="number">1</span>,</div><div class="line">   <span class="attr">"purchaseState"</span>: <span class="number">0</span>,</div><div class="line">   <span class="attr">"kind"</span>: <span class="string">"androidpublisher#inappPurchase"</span>,</div><div class="line">   <span class="attr">"developerPayload"</span>: <span class="string">"something"</span>,</div><div class="line">   <span class="attr">"purchaseTime"</span>: <span class="number">1414181378566</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>程序通过上述参数就可以判断该订单是否充值成功.</p>
<p>以下是官方对各个参数的说明.</p>
<table>
<thead>
<tr>
<th>Name</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>consumptionState</td>
<td style="text-align:center">This field is 0, if the purchase is consumed, and 1 otherwise.</td>
</tr>
<tr>
<td>purchaseState</td>
<td style="text-align:center">Normally this field is 0, but if the purchase is refunded it is 1.</td>
</tr>
<tr>
<td>kind</td>
<td style="text-align:center">Type of the returned resource. This will always be androidpublisher#inappPurchase</td>
</tr>
<tr>
<td>developerPayload</td>
<td style="text-align:center">The payload string that is sent to Bazaar by app when making the purchase.</td>
</tr>
<tr>
<td>purchaseTime</td>
<td style="text-align:center">Time of the purchase as milliseconds from EPOCh (1970/1/1).</td>
</tr>
</tbody>
</table>
<h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><p>Bazaar充值中也使用到了RSA加密验证确保数据传输的完整性以防止他人的篡改,在Bazaar开发者后台中找到一串经过base64加密过的公钥.当客户端向服务端发起充值请求之后,Bazaar服务器端相应的会返回一系列参数.而这部分校验过程中需要使用到RSA加解密.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>生活难免会有糊涂的时候,这时候的我们更需要拿起自身的勇气和耐心,敢于承担与付出.</li>
<li>Bazaar的充值流程和google play的充值流程是相似的,甚至于他们的验证方式.</li>
<li>此次的经验教训加深了我对OAuth2的权限的了解以及RESTFUL的异同.</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://developers.cafebazaar.ir/en/docs/developer-api-v2-introduction/developer-api-v2-getting-started/" target="_blank" rel="external">In-app-developer-api-oauth2</a><br><a href="http://developers.cafebazaar.ir/en/docs/developer-api-v2-introduction/developer-api-v2-ref-validate/" target="_blank" rel="external">In-app-purchase-validation</a></p>
]]></content>
      <categories>
        <category>pay</category>
        <category>Bazzar</category>
      </categories>
      <tags>
        <tag>pay</tag>
      </tags>
  </entry>
  <entry>
    <title>高效大并发游戏架构的整理与实施</title>
    <url>/2017/03/19/make-a-high-efficiency-and-large-concurrency-game-framework/</url>
    <content><![CDATA[<p>新年伊始,经过公司的合理运作与积极争取.我们独家研发的游戏终于取得谷歌全球的推荐名额.这意味着,接下来的一个月我们必须更加努力提高游戏自身品质的同时,也要将游戏提升到高并发架构上来,以及随时面临着来自世界各地不同的玩家能够流畅的体验着游戏带来的快乐.</p>
]]></content>
      <categories>
        <category>framework</category>
      </categories>
      <tags>
        <tag>framework</tag>
      </tags>
  </entry>
  <entry>
    <title>关于大数据量的分析整理</title>
    <url>/2017/03/19/some-conclusion-about-analysis-of-big-data/</url>
    <content><![CDATA[<p>数据的分析和整理的准确性和合理性,对游戏数值策划而言至关重要.从小到一个道具的价格,到大至游戏内一场精心安排的活动,对玩家行为的布局无不需要前期问卷调查数据和后期玩家数据的支撑和验证.高效的数值大神,凭借着多年的经验和智慧操纵着数据引导玩家入坑.</p>
]]></content>
      <categories>
        <category>bigdata</category>
      </categories>
      <tags>
        <tag>bigdata</tag>
        <tag>analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>游戏API服务器正面临着DDOS攻击</title>
    <url>/2017/03/19/the-api-server-was-under-DDOS-attacks/</url>
    <content><![CDATA[<p>2017年03月12中午越南服务器刚进行了一轮并不算大的并发请求,接踵而来的便是一次DDOS攻击.因为涉及到游戏登录API,直接导致外面的玩家进不去,里面的玩家却浑然不知.当然,游戏的充值API也跟着挂了.可想而知,这是很糟糕的.</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title>入门级爬虫的基本姿势</title>
    <url>/2016/12/20/the-method-to-get-start-crawler-with-python/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>所谓的网络爬虫,就是根据一定的规则自动爬取网页信息的程序或者脚本.本文主要使用python的基本语法介绍些入门的爬虫思路.</p>
<h2 id="爬虫的基本思路"><a href="#爬虫的基本思路" class="headerlink" title="爬虫的基本思路"></a>爬虫的基本思路</h2><p>爬虫的思路其实就利用图的遍历问题,涉及到了图的深度游戏搜索与广度游戏搜索两个遍历算法.我们可以通过爬虫爬取的信息经过一定的分析与整合得到我们需要的数据.</p>
<h2 id="urllib与urllib2"><a href="#urllib与urllib2" class="headerlink" title="urllib与urllib2"></a>urllib与urllib2</h2><h2 id="beautifySoup的用法"><a href="#beautifySoup的用法" class="headerlink" title="beautifySoup的用法"></a>beautifySoup的用法</h2><h2 id="模拟登录与获取信息"><a href="#模拟登录与获取信息" class="headerlink" title="模拟登录与获取信息"></a>模拟登录与获取信息</h2><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.markbj.com/book/p65f15/1855" target="_blank" rel="external">爬虫基础教程</a><br><a href="http://mp.weixin.qq.com/s/u5cSZuKawG9MghUsuKPDTw" target="_blank" rel="external">爬虫模拟登录</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>crawler</tag>
        <tag>pyhton</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用python模拟登入知乎</title>
    <url>/2016/12/20/how-to-get-simulation-login-zhihu-with-python/</url>
    <content><![CDATA[<p>最近在学习爬虫,刚好同事的朋友想要自动化登入网站获取站内数据.用python做这方面的爬虫简直是再合适不过了.</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>crawler</tag>
      </tags>
  </entry>
  <entry>
    <title>通过Http获取和通过流的形式下载文件的区别</title>
    <url>/2016/11/14/the-difference-between-http-and-text/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前几天公司的网络突然断了,网管尝试了很多种方法都没法挽救,最后只能选择重置路由器了.说来也奇怪,自从网络断开之后,感觉有些不太对劲.比如说,经常性无法在线下载一个1kB左右的文件,但可以正常浏览网页.这个关系到游戏的用户体验性,将原本通过文件下载的形式都必须换成其他形式获取数据.最终选择了接口获取,为减少数据库负载压力加了缓存机制.</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2>]]></content>
      <categories>
        <category>http</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化测试工具PHPUNIT实践</title>
    <url>/2016/11/08/research-about-phpunit-tool/</url>
    <content><![CDATA[<p>根据具体需求利用php自动化测试工具编写相应的测试用例并测试,提高代码的强壮性和实用性,是每个程序猿编写代码自我检测的最重要的技能之一.</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="built_in">echo</span> @php <span class="string">"%~dp0phpunit.phar"</span> %* &gt; phpunit.cmd</div></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://phpunit.de/" target="_blank" rel="external">PHPUnit官方网站</a><br><a href="https://phpunit.de/manual/5.6/zh_cn/index.html" target="_blank" rel="external">PHPUnit 手册</a></p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>youtube直播sdk嵌入的使用</title>
    <url>/2016/11/02/research-about-api-live-sdk-with-youtube/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段阵子才刚刚接入越南版游戏准备上线了,接踵而来的便是韩国版本游戏的接入.不巧,直播平台从twitch切换到youtube上去了.更让我们摸不着头脑的是,对方派出一个商务和我们对接游戏,youtube平台直播方面直接扔来一个直播频道.剩下需要自己来处理,感觉有谷歌这个大厂抱抱大腿心理多多少少还是有些安慰的.</p>
<h2 id="主要的接口查询"><a href="#主要的接口查询" class="headerlink" title="主要的接口查询"></a>主要的接口查询</h2><p>这里借助谷歌关于youtube的api帮我们解决关于直播与推流数据的获取.作为youtube的用户,每个用户都可以在youtube平台申请直播.申请后会自动分配一个频道,用户的直播地址可以由其频道编号来表示.而我们能做的就是想方设法将带有频道的直播地址转为视频地址,从而通过获取视频流的形式获取直播推流.</p>
<h3 id="频道"><a href="#频道" class="headerlink" title="频道"></a>频道</h3><p>每个youtube用户都可以根据自己的需求申请不同的直播类型,而该直播地址可以用其频道编号来表示.</p>
<h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><p>用户申请直播之后可以拿到相应的直播地址,这里我们需要通过调用谷歌的api获取其相应的视频地址,然后需要事先生成授权key.<br>需要调用谷歌关于的api,将直播地址转为视频地址.通过调用<a href="https://www.googleapis.com/youtube/v3/search?part=snippet&amp;channelId={channelId}&amp;eventType=live&amp;type=video&amp;key={key}的返回值" target="_blank" rel="external">https://www.googleapis.com/youtube/v3/search?part=snippet&amp;channelId={channelId}&amp;eventType=live&amp;type=video&amp;key={key}的返回值</a>.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getVideoInfoDetail</span><span class="params">($channel)</span></span>&#123;</div><div class="line">    $arrGetVideoLiveInfoDetailWhere = <span class="keyword">array</span>(</div><div class="line">        <span class="string">"part"</span>              =&gt;          <span class="string">"snippet"</span>,</div><div class="line">        <span class="string">"channelId"</span>         =&gt;           $channel,</div><div class="line">        <span class="string">"eventType"</span>         =&gt;          <span class="string">"live"</span>,</div><div class="line">        <span class="string">"type"</span>              =&gt;          <span class="string">"video"</span>,</div><div class="line">        <span class="string">"key"</span>               =&gt;         <span class="keyword">$this</span>-&gt;arrConfigSDK[<span class="string">'keyApp'</span>],</div><div class="line">    );</div><div class="line"></div><div class="line">    $urlGetVideoInfoDetail = <span class="keyword">$this</span>-&gt;urlVideoBase.<span class="string">"?"</span>.http_build_query($arrGetVideoLiveInfoDetailWhere,<span class="keyword">NULL</span>,<span class="string">"&amp;"</span>);</div><div class="line">    $arrGetVideoInfoDetail = json_decode(file_get_contents($urlGetVideoInfoDetail),<span class="keyword">true</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(array_key_exists(<span class="string">"items"</span>,$arrGetVideoInfoDetail))&#123;</div><div class="line">        $arrItemVideoInfo = $arrGetVideoInfoDetail[<span class="string">'items'</span>];</div><div class="line">        $arrItemVideoInfo = reset($arrItemVideoInfo);</div><div class="line">        $arrVideoInfo = <span class="keyword">array</span>(</div><div class="line">            <span class="string">"id"</span>                =&gt;      <span class="keyword">isset</span>($arrItemVideoInfo[<span class="string">'id'</span>][<span class="string">'videoId'</span>]) ? $arrItemVideoInfo[<span class="string">'id'</span>][<span class="string">'videoId'</span>] : <span class="string">""</span>,</div><div class="line">            <span class="string">"snippet"</span>       =&gt;      <span class="keyword">isset</span>($arrItemVideoInfo[<span class="string">'snippet'</span>]) ? $arrItemVideoInfo[<span class="string">'snippet'</span>] : <span class="keyword">array</span>(),</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">empty</span>($arrVideoInfo) ? <span class="keyword">array</span>() : $arrVideoInfo;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="直播流"><a href="#直播流" class="headerlink" title="直播流"></a>直播流</h3><p>获取视频的直播流相对而言也比较简单,需要调用谷歌的api即可.<a href="http://www.youtube.com/get_video_info?video_id={video_id}" target="_blank" rel="external">http://www.youtube.com/get_video_info?video_id={video_id}</a>.<br>因为调用谷歌的api之后返回的是一串键值对形式组成的字符串,需要用parse_str转为数组.<br><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrlLiveInfoDetail</span><span class="params">($channel)</span></span>&#123;</div><div class="line">    $arrVideoInfo = <span class="keyword">$this</span>-&gt;getVideoInfoDetail($channel);</div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>($arrVideoInfo) &amp;&amp; is_array($arrVideoInfo))&#123;</div><div class="line">        $arrGetLiveInfoDetailWhere = <span class="keyword">array</span>(</div><div class="line">            <span class="string">"video_id"</span>      =&gt; $arrVideoInfo[<span class="string">'id'</span>],</div><div class="line">        );</div><div class="line">        $urlGetLiveInfoDetail = <span class="keyword">$this</span>-&gt;urlLiveBase.<span class="string">"?"</span>.http_build_query($arrGetLiveInfoDetailWhere,<span class="keyword">NULL</span>,<span class="string">"&amp;"</span>);</div><div class="line">        $strGetLiveInfoDetail = file_get_contents($urlGetLiveInfoDetail);</div><div class="line">        parse_str($strGetLiveInfoDetail,$arrGetLiveInfoDetail);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">empty</span>($arrGetLiveInfoDetail) ? <span class="keyword">array</span>() : $arrGetLiveInfoDetail;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="乱七八糟"><a href="#乱七八糟" class="headerlink" title="乱七八糟"></a>乱七八糟</h2><p>最近真的有点忙,不过一切看起来也不会想象的那么糟糕.经过之前两个月的折腾,终于还是勉强的搞定了越南代理商的”纠缠”.韩国代理商最近催促得比较紧,公司目前的项目正在加紧完成11版本功能的最后测试和修复,所以就有很多的事情都集中在这一周要完成.然后,自己又报名参加了厦门马拉松赛事,幸运的是让我都中签了,所以我也正在准备赛前的准备.国庆后,报名参与了考驾照的茫茫大军中,考试复习也是不可或缺的.看着周边有些同学重回校园了却当年未了的梦想,我又岂能放弃呢?若是能鼓起了最后的勇气,抱着最后的希望一头扎向书海或许也不错.于是,我差点就报名2016年研究生入学考试,思来想去了好久果断放弃,现在想想还真的蛮明智的了.算了,周末还要参加软考但书还没看,但怎么说我也不能像以前一样肆无忌惮的通宵熬夜.怯怯生的,赌上最后的一丝希望多喝上几杯水.希望明天能让尿憋醒,这样我就能睡其自然的早起了,你们都可以光明正大的嘲笑我吧,哈哈.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>有时候对一件事情如果一时间想破头还是没有思路的话,不妨先搁置一段时间可能效果会更好.遇到技术难关或者在关键时候遇到瓶颈,可以去github上借鉴下大神们是以怎样的思路去解决同样的问题.也可以去stackoverflow上提提自己的疑问,说不定我们遇到的问题别人很早就碰到了,而这时候只要自己有耐性至少可以帮我们少走很多弯路.</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://github.com/madcoda/php-youtube-api" target="_blank" rel="external">youtube api sdk</a></li>
<li><a href="https://developers.google.com/youtube/v3/live/docs/liveStreams#resource" target="_blank" rel="external">youtube api live stream</a></li>
<li><a href="http://stackoverflow.com/questions/35608686/how-can-i-get-the-actual-video-url-of-a-youtube-live-stream" target="_blank" rel="external">how to get the video url</a></li>
<li><a href="http://ju.outofmemory.cn/entry/90587" target="_blank" rel="external">how to get m3u8 of the url</a></li>
</ul>
]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>live</tag>
        <tag>youtube</tag>
      </tags>
  </entry>
  <entry>
    <title>如何合理对待PHP包管理工具</title>
    <url>/2016/10/18/how-to-use-package-manage-tool-for-php/</url>
    <content><![CDATA[<p>如何合理对待PHP包管理工具</p>
<h2 id="composer-介绍"><a href="#composer-介绍" class="headerlink" title="composer 介绍"></a>composer 介绍</h2><p>composer 是 PHP 用来管理依赖（dependency）关系的工具.你可以在自己的项目中声明所依赖的外部工具库（libraries）,Composer 会帮你安装这些依赖的库文件.简单来说,Composer 是一个新的安装包管理工具,服务于 PHP 生态系统.它实际上包含了两个部分:Composer 和 Packagist.</p>
<h3 id="关于Composer"><a href="#关于Composer" class="headerlink" title="关于Composer"></a>关于Composer</h3><ul>
<li>Composer 是由 Jordi Boggiano 和 Nils Aderman 创造的一个命令行工具,它的使命就是帮你为项目自动安装所依赖的开发包.Composer 中的很多理念都借鉴自 npm 和 Bundler,如果你对这两个工具有所了解的话,就会在 composer 中发现他们的身影.</li>
</ul>
<h3 id="关于Packagist"><a href="#关于Packagist" class="headerlink" title="关于Packagist"></a>关于Packagist</h3><ul>
<li>Packagist 是 Composer 的默认的开发包仓库<h2 id="composer-安装"><a href="#composer-安装" class="headerlink" title="composer 安装"></a>composer 安装</h2></li>
</ul>
<h2 id="composer-使用"><a href="#composer-使用" class="headerlink" title="composer 使用"></a>composer 使用</h2><p><div class="github-widget" data-repo="composer/composer"><div></div></div></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.phpcomposer.com/" target="_blank" rel="external">composer 官方网站</a></li>
<li><a href="http://pkg.phpcomposer.com/" target="_blank" rel="external">Packagist/Composer 中国全量镜像</a></li>
<li><a href="https://blog.csdn.net/nianzhi1202/article/details/72770099" target="_blank" rel="external">Linux下composer的安装及其使用</a></li>
</ul>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>composer</tag>
      </tags>
  </entry>
  <entry>
    <title>生活不止眼前的苟且,还有诗和远方</title>
    <url>/2016/10/16/life-can&#39;t-live-for-bread-or-mike-without-the-dream/</url>
    <content><![CDATA[<blockquote>
<p>life can’t live for bread or mike at present without the dream in the feature.</p>
</blockquote>
]]></content>
      <categories>
        <category>jotting</category>
      </categories>
      <tags>
        <tag>jotting</tag>
      </tags>
  </entry>
  <entry>
    <title>免费的SSL证书Let&#39;s Encrypt的安装与使用</title>
    <url>/2016/10/14/the-free-ssl-certificate-let-s-encrpt/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>免费的SSL证书Let’s Encrypt的安装与使用,极大的推进更多的服务器使用商特别是个体用户拥抱SSL这个大集体中,让数据的传输不再赤裸裸的暴露在开发人员中,从而保障用户个人隐私的安全和可靠.</p>
<h2 id="安装证书"><a href="#安装证书" class="headerlink" title="安装证书"></a>安装证书</h2><p>关于SSL证书的安装在网上也由很多的各种不同版本,但我这里介绍一个可以在站点上自动部署SSL证书的工具<a href="https://certbot.eff.org/" target="_blank" rel="external">certbot</a>,该网站根据服务器不同的操作系统提供不同的安装教程.安装教程也很简单,只需要简单几个步骤就可以做好,具体的安装教程这边不做赘述.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># If you are using ec2 you can enable optional channel by running:</div><div class="line">$ yum -y install yum-utils</div><div class="line">$ yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional</div><div class="line"># After doing this, you can install Certbot by running:</div><div class="line">$ sudo yum install certbot</div><div class="line"># use the certonly command to obtain your certificate</div><div class="line">$ certbot certonly --webroot -w /var/www/example -d example.com -d www.example.com -w /var/www/thing -d thing.is -d m.thing.is</div></pre></td></tr></table></figure>
<h2 id="自动续期"><a href="#自动续期" class="headerlink" title="自动续期"></a>自动续期</h2><p>Let’s Encrypt SSL证书投入使用之后默认的有效期是90天,之后就自动过期需要重新更新证书使之生效即可.不过Let’s Encrypt会根据你注册的邮箱,在证书即将到期的前20天,10天,1天这三个时间点会邮件通知用户到期要更新证书以防证书到期对站点带来的不便[<a href="https://letsencrypt.org/docs/expiration-emails/" target="_blank" rel="external">详情.</a>].不过这个邮件提醒想必也是多余,证书即将到期只要我们定期更新就不会有这要的麻烦.<a href="https://certbot.eff.org/" target="_blank" rel="external">certbot</a> 官网教程也提供我们到期更新证书的方案,只要在定时任务中添加每隔90天自动更新,就可以让我们的证书永久自动续签.</p>
<ul>
<li>官网教程提供的自动更新机制是一个很好的方案,但官方也指出更新证书是有次数限制.目前是一周5次[<a href="https://letsencrypt.org/docs/rate-limits/" target="_blank" rel="external">详情.</a>].如果更新次数太过频繁,官方会以为恶意行为而停止更新服务.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># You can test automatic renewal for your certificates by running this command:</div><div class="line">certbot renew --dry-run</div><div class="line"># If that appears to be working correctly, you can arrange for automatic renewal by adding a cron or systemd job which runs the following:</div><div class="line">certbot renew</div></pre></td></tr></table></figure>
<h2 id="防火墙开放端口"><a href="#防火墙开放端口" class="headerlink" title="防火墙开放端口"></a>防火墙开放端口</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</div></pre></td></tr></table></figure>
<h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><p>关于免费的安全证书的安装教程也只是个简单的教程，希望以后抓紧时间多研究下官网教程以提供更加丰富的功能.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>免费的SSL证书极大的方便个人独立开发者,推动了全球数据加密与安全.</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://certbot.eff.org/" target="_blank" rel="external">how to install ssl certbot</a><br><a href="http://blog.csdn.net/gsls200808/article/details/53486078" target="_blank" rel="external">letsencrypt证书自动续期问题</a><br><a href="http://www.jourmy.cn/html/259.html" target="_blank" rel="external">linux centos防火墙添加443例外端口</a><br><a href="http://www.centoscn.com/CentOS/config/2015/0310/4848.html" target="_blank" rel="external">Centos7 开放端口</a><br><a href="https://bbs.aliyun.com/read/304532.html" target="_blank" rel="external">为阿里云ECS配置ipv6隧道地址</a><br><a href="http://ipv6-test.com/validate.php" target="_blank" rel="external">ipv6测试站</a></p>
<p><div class="github-widget" data-repo="certbot/certbot"><div></div></div></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ssl</tag>
      </tags>
  </entry>
  <entry>
    <title>使用burg为多系统点亮酷炫的开机启动效果</title>
    <url>/2016/10/12/the-beautiful-system-boot-tool-with-burg/</url>
    <content><![CDATA[<h2 id="双系统的”尴尬”"><a href="#双系统的”尴尬”" class="headerlink" title="双系统的”尴尬”"></a>双系统的”尴尬”</h2><p>多年前因为大学毕业设计的需要,在windows之外我选择Ubuntu作为我的第二个操作系统.在此之前使用的是Ubuntu的wubi启动,开机后默认使用windows的开机启动项,那时候感觉界面效果还不错.后来,我毅然决然的选择了双系统.可每当开机启动看到grub那丑陋的界面,连我自己都觉得很尴尬.</p>
<h2 id="开启burg"><a href="#开启burg" class="headerlink" title="开启burg"></a>开启burg</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>burg作为grub的增强版,使用图形界面方式替换原有文本的启动菜单,让电脑开机时具备更加酷炫的启动效果.</p>
<h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><h4 id="添加PPA源"><a href="#添加PPA源" class="headerlink" title="添加PPA源"></a>添加PPA源</h4><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo add-apt-repository ppa:n-muench/burg &amp;&amp; sudo apt-get update</div></pre></td></tr></table></figure>
<h4 id="导入证书"><a href="#导入证书" class="headerlink" title="导入证书"></a>导入证书</h4><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">gpg --keyserver subkeys.pgp.net --recv 55708F1EE06803C5</div><div class="line">gpg --export --armor 55708F1EE06803C5 | sudo apt-key add -</div></pre></td></tr></table></figure>
<h4 id="安装burg"><a href="#安装burg" class="headerlink" title="安装burg"></a>安装burg</h4><p>在burg安装过程中会弹出选择框默认即可,代码如下:<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo apt-get install burg burg-themes burg-emu &amp;&amp; sudo apt-get update</div></pre></td></tr></table></figure></p>
<h4 id="检测配置文件"><a href="#检测配置文件" class="headerlink" title="检测配置文件"></a>检测配置文件</h4><p>软件安装之后,需要执行下面的命令帮我们自动检测安装的系统生成burg.cfg文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo burg-install <span class="string">"(hd0)"</span></div></pre></td></tr></table></figure></p>
<h4 id="预览调试"><a href="#预览调试" class="headerlink" title="预览调试"></a>预览调试</h4><p>进入burg调试模式,预览不同的主题<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo burg-emu</div></pre></td></tr></table></figure></p>
<ul>
<li>F2选择主题,F3调节分辨率的,需要在真实的显示环境下调节.(<del>忘了也没有关系,F1帮助查看功能</del>)<h3 id="自定义主题"><a href="#自定义主题" class="headerlink" title="自定义主题"></a>自定义主题</h3></li>
</ul>
<h4 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h4><p>如果burg安装后提供的各种不同主题不适合自己,可以自己去相关的主题平台下载,这里介绍<a href="http://luxieblack.deviantart.com/" target="_blank" rel="external">deviantart</a>的两个不错的主题,分别为<a href="http://luxieblack.deviantart.com/art/Metro-burg-theme-336505408?offset=30#comments" target="_blank" rel="external">Metro</a>和<a href="http://gnome-look.org/content/show.php/Fortune+-+BURG+Theme?content=128929" target="_blank" rel="external">fortune</a>.以下以fortune为例具体讲解.</p>
<h4 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h4><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo mv ~/fortune /boot/burg/themes/fortune</div></pre></td></tr></table></figure>
<h4 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h4><p>安装之后需要更新下burg配置文件,下次重载配置文件的时候可以找到新主题.<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo update-burg</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>有些尝试如果一次两次解决不了了的,没关系,多尝试几次总会成功的.</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://sfork.lofter.com/post/2d18ab_d84311" target="_blank" rel="external">burg漂亮的启动引导工具</a></li>
<li><a href="http://fech.in/2012/install-burg-on-ubuntu/" target="_blank" rel="external">Ubuntu Burg引导之打开电脑的那一刻</a></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>burg</tag>
      </tags>
  </entry>
  <entry>
    <title>基于flask的RESTful-API应用</title>
    <url>/2016/10/10/restful-api-with-flask/</url>
    <content><![CDATA[<p>今天公司主程特意跑过来问了我个关于网络请求的问题,刚开始听得我一知半解.在我的一再要求之下,我跑去看他的源代码.源代码是基于flask框架的请求,解决第三方API请求后数据的响应问题.关于flask的RESTful-API框架的应用,顺道做些总结.</p>
<h2 id="RESTful-简介"><a href="#RESTful-简介" class="headerlink" title="RESTful 简介"></a>RESTful 简介</h2><h2 id="Flask-RESTful"><a href="#Flask-RESTful" class="headerlink" title="Flask-RESTful"></a>Flask-RESTful</h2><blockquote>
<p>Flask-RESTful 是一个 Flask 扩展，它添加了快速构建 REST APIs 的支持.</p>
</blockquote>
<h3 id="Flask介绍"><a href="#Flask介绍" class="headerlink" title="Flask介绍"></a>Flask介绍</h3><blockquote>
<p>Flask, web development, one drop at the time.</p>
</blockquote>
<p>在介绍 Flask-RESTful 之前,想必大家对<a href="http://docs.jinkan.org/docs/flask/" target="_blank" rel="external">Flask</a>充满好奇.按照官方的介绍,Flask 是一个 Python 实现的 Web 开发微框架,而微框架中的“微”意味着 Flask 旨在保持核心简单而易于扩展.</p>
<h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><h4 id="安装与更新"><a href="#安装与更新" class="headerlink" title="安装与更新"></a>安装与更新</h4><ul>
<li>如果还没安装 flask-restful, 相应的代码如下:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># install stable version</span></div><div class="line">pip install -g flask-restful</div><div class="line"><span class="comment"># install develop version</span></div><div class="line">git <span class="built_in">clone</span> https://github.com/twilio/flask-restful.git</div><div class="line"><span class="built_in">cd</span> flask-restful</div><div class="line">python setup.py develop</div></pre></td></tr></table></figure>
<ul>
<li>如果之前安装过 flask-restful,想要升级下版本:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">pip install -U flask-restful</div></pre></td></tr></table></figure>
<h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><h4 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h4><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>flask-restful 作为一个轻框架,功能全面并且简化了接入步骤,更适合于开发中小型应用.对于开发者而言,在使用的同时更要深挖其内在的框架架构和核心思想.既有助于对RESTFul的理解也深入flask的框架思想,拓宽解决问题的思路.</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.pythondoc.com/Flask-RESTful/index.html" target="_blank" rel="external">Flask-RESTful用户指南</a></li>
<li><a href="http://www.pythondoc.com/flask-restful/index.html" target="_blank" rel="external">使用 Flask 设计 RESTful APIs</a></li>
<li><a href="http://www.cnblogs.com/vovlie/p/4182814.html" target="_blank" rel="external">Flask 带token设计的API验证</a></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>目录跟随鼠标移动定位</title>
    <url>/2016/10/08/idea-about-position-of-the-content-tag-with-the-mouse-movement/</url>
    <content><![CDATA[<blockquote>
<p>目录跟随鼠标移动定位,使读者清楚文章脉络及其阅读进度.</p>
</blockquote>
<h2 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h2><p>使用hexo框架已经有一段时间了,逐渐萌生改动yelee这个模板的想法.当然,本文也只是根据前人的经验造造轮子,主要针对文章目录部分提提个人的想法.如果有更好的想法,还望不吝赐教.</p>
<h2 id="基本思路与代码实现"><a href="#基本思路与代码实现" class="headerlink" title="基本思路与代码实现"></a>基本思路与代码实现</h2><h3 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h3><p>文章目录的跟随定位的效果,就是当上下滚动文章时相应位置锚点所对应的目录随之高亮.其原理就是比较<strong><em>滚动条与顶部的距离</em></strong>与<strong><em>锚点与屏幕顶部的距离</em></strong>,当且仅当前者大于当前的后者而小于<strong><em>下个锚点与屏幕顶部的距离</em></strong>,则该锚点相应的目录随之高亮显示.</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="两个距离"><a href="#两个距离" class="headerlink" title="两个距离"></a>两个距离</h4><p>所谓的两个距离,就是<strong><em>滚动条与屏幕顶部的距离</em></strong>与<strong><em>锚点与屏幕顶部的距离</em></strong>.</p>
<ul>
<li>滚动条与屏幕顶部的距离(heigthScroll): $(window).scrollTop();</li>
<li>锚点i与屏幕顶部的距离(heightAnchor): $(arrayAnchor[i].attr(‘href’)).offset().top;</li>
</ul>
<h4 id="代码释义"><a href="#代码释义" class="headerlink" title="代码释义"></a>代码释义</h4><p>以下是目录跟随的部分伪代码实现:</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">function update()&#123;</div><div class="line">  var flag = 0;</div><div class="line">  for(var i = 0;i&lt;length;i++)&#123;</div><div class="line">    if(length == i + 1)&#123;</div><div class="line">      flag = i;</div><div class="line">      continue;</div><div class="line">    &#125;</div><div class="line">    var heightAnchor = $(arrayAnchor[i].attr('href')).offset().top;</div><div class="line">    if(heightAnchor &gt;= heigthScroll &amp;&amp; heightTemp &lt;= heigthScroll)&#123;</div><div class="line">      flag = i;</div><div class="line">      break;</div><div class="line">    &#125;else&#123;</div><div class="line">      heightTemp = heightAnchor;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  if(length &gt; 0)&#123;</div><div class="line">    # 高亮显示锚点对应的目录</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h3><h4 id="回归主题"><a href="#回归主题" class="headerlink" title="回归主题"></a>回归主题</h4><p>如果单单只想显示当前目录的话,以上介绍已经足够了.不过,实际上目录跟随不仅仅如此,如果当前目录有父目录则需要高亮显示,从而达到”让读者清楚文章脉络”的主旨.所以,我们才需要对目录跟随功能做深入的挖掘.</p>
<h4 id="遍历算法"><a href="#遍历算法" class="headerlink" title="遍历算法"></a>遍历算法</h4><p>不难发现,鼠标移动过程中目录的变化实际上基于”图的深度优先遍历”.</p>
<h4 id="算法优化"><a href="#算法优化" class="headerlink" title="算法优化"></a>算法优化</h4><p>基于内存优化的考量,如果每次渲染(这里特指指定目录高亮)的时候都去根据算法遍历一次的思路显然是不合理的.自然地,对每篇文章有且只有一次遍历一次是最合理的,所以把遍历后的数据作为全局变量在初始化的时候也一并做好是再好不过了.</p>
<h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://blog.csdn.net/cangyingaoyou/article/details/7460146" target="_blank" rel="external">文章目录跟随定位</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>跑步,与生俱来</title>
    <url>/2016/09/26/live-to-run-run-to-life/</url>
    <content><![CDATA[<p>人生就像马拉松,每前进一步都是自己努力的结果,每一步都要靠自己来走,别人谁也代替不了,差一步也到不了终点.失败不是跑得慢,而是停下来.</p>
<blockquote>
<p>多培养些兴趣爱好固然是不错的,但不能影响到日常生活,切忌本末倒置</p>
</blockquote>
<h2 id="东山国际山地半程马拉松"><a href="#东山国际山地半程马拉松" class="headerlink" title="东山国际山地半程马拉松"></a>东山国际山地半程马拉松</h2><h3 id="些许的后悔"><a href="#些许的后悔" class="headerlink" title="些许的后悔"></a>些许的后悔</h3><p>前阵子突然脑子一热,没多想就报名参加了东山国际山地半程马拉松,国庆回来后仔细看人家的网站,个人渐渐的觉得真的有些后悔了.主办方办事确实一定都不周到,当地政府和官媒却以此为契机大肆景点宣传.俗不知再好的美景也会有审美疲劳的.今天下午,”海马”台风在汕尾登陆后无情的肆虐着广东南部沿海地区,厦门也提前一天把今天大部分动车停运了.有趣的是,厦门这两天的天气反倒放晴,燥热的让人反而感到不安.只是午间休息的时间下了场不大不小的阵雨,吃饭也没了兴致,有点扫兴.提前了两三天购买的动车票也许还能用,明天还是早点回家准备后天的”马拉松”.起风了,今夜无雨,晚安.<br>说来也奇怪,前两天还风雨大作,比赛那天天气却出奇的特别好,连我都不敢相信我的眼睛了.那天在家里也起得特别早,换上准备好的装备背起我的小包裹就出门了.在去往佰亿新城的车上简单的吃了点早餐,在赛场上做了热身之后就等着比赛开始.比赛有几个小插曲,比如5公里之后的那连绵不断地陡峭爬坡路段可以让我看傻眼<del>(我都不敢相信,这还是我的老家么?)</del>.幸好之前有跑过半马的经验和全马的教训,所以在事先知道有爬坡消息之后分别在5.5公里和12.5公里处的饮水点吞掉了预防抽筋的药丸,事后觉得还是明智的做法,将抽筋延缓到20公里之后,后悔在15公里之后没有再吞药丸.不过还是有惊无险,终于可以在家人面前炫耀我的奖牌了.</p>
<h2 id="厦门公益跑"><a href="#厦门公益跑" class="headerlink" title="厦门公益跑"></a>厦门公益跑</h2><h3 id="公益助跑-些许的期待"><a href="#公益助跑-些许的期待" class="headerlink" title="公益助跑,些许的期待"></a>公益助跑,些许的期待</h3><p>某天,在朋友圈看到有人发了条信息,大概的意思是为他们筹集善款帮助山区的孩子.当然他们的目的显然不在于此,而是要参加在园博园的公益徒步跑,分为5公里亲子组和26公里成人组.一开始我也是被这个关键信息吸引了,可以徒步跑了.号召了公司的几个爱跑步的同事一起报名参加了公益徒步跑了,因为是比较早报名加入,有幸在挤入前50组免缴纳各种定金.徒步跑预计在 11月26号9点在园博园举行,四人组成的小团队在主办方预设的几个点徒跑,15点结束.有点小期待,希望不会让人太失望.</p>
<h2 id="厦门海沧国际半程马拉松"><a href="#厦门海沧国际半程马拉松" class="headerlink" title="厦门海沧国际半程马拉松"></a>厦门海沧国际半程马拉松</h2><h3 id="半程马拉松-激动人心"><a href="#半程马拉松-激动人心" class="headerlink" title="半程马拉松,激动人心"></a>半程马拉松,激动人心</h3><p>最近有点烦,公司的一个项目刚好在最关键的时候遇到了一个小麻烦,老板有点着急就把问题扔给我来处理了.我也觉得有点奇怪,这种本不算是我能处理的却丢给了我但我不能说不会,只能硬着头皮去研究研究.恰巧同事跑过来,满是失望的对我说,原来是一则短信预示着他今年与厦门海沧半程马拉松无缘了.我开始有点紧张,下意识的去翻手机短信,希望不会太糟糕,登陆官网发现报名状态由原来的”待抽签”到”待审核”了.这时候跑步小队的讨论组也开始讨论起来了,没报名的人开始幸灾乐祸了,被淘汰的人一脸忧郁,我们却在不停祈祷…就这样,在各种杂乱的工作和热火朝天的讨论处境下等待了将近一个小时,我们首先刷出了”中签”的状态,随之而来的就是一个中签的短信,感觉要炸锅了,听说今年的奖牌比去年的好看多了,想想就莫名的激动.要开始备战了,加油~</p>
<h2 id="厦门国际马拉松"><a href="#厦门国际马拉松" class="headerlink" title="厦门国际马拉松"></a>厦门国际马拉松</h2><h3 id="做好充分准备-量力而为"><a href="#做好充分准备-量力而为" class="headerlink" title="做好充分准备,量力而为"></a>做好充分准备,量力而为</h3>]]></content>
      <categories>
        <category>sport</category>
      </categories>
      <tags>
        <tag>sport</tag>
        <tag>marathon</tag>
      </tags>
  </entry>
  <entry>
    <title>国外的直播SDK-Twitch的接入与应用</title>
    <url>/2016/09/23/research-about-api-live-sdk-with-twitch/</url>
    <content><![CDATA[<p>游戏一旦接入国内的直播之后,如果以后还要多语言版本游戏的话,意味着需要再接入新的直播接口.比如Twitch,想想头就有点大~<br>目前twitch的接口已经可以正常接入到游戏的SDK中,不过还有有些兼容问题需要不断的修正.</p>
<h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>最近一两年刚刚兴起的直播行业悄悄的火起来了,几乎变成人人都轻易完成的”全名直播”.随着国内各种直播技术的不断的日趋完善和成熟,国内各大厂也相继开始争夺”直播”行业这块大饼.自媒体时代的另一个视听盛宴正悄然兴起.”直播”也不是国内独有的,在国内也正如火如荼的展开着,在国外有很多相对完善的直播平台,比如说本文重点提到的一个直播平台”twitch”.</p>
<h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><p>获取Twitch授权的重点在于获取client id,按照overstackflow上的一些人的建议,当我们创建app的时候会返回给我们一个client id 和 client secret.</p>
<h2 id="频道信息"><a href="#频道信息" class="headerlink" title="频道信息"></a>频道信息</h2><p>频道信息的主要参考Twitch提供的接口,输入指定的参数查询相应频道的信息.</p>
<h2 id="频道推流"><a href="#频道推流" class="headerlink" title="频道推流"></a>频道推流</h2><h3 id="基本接口"><a href="#基本接口" class="headerlink" title="基本接口"></a>基本接口</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">private <span class="variable">$urlUsherBase</span> = <span class="string">'http://usher.twitch.tv/api/channel/hls/&#123;channel&#125;.m3u8?player=twitchweb&amp;token=&#123;token&#125;&amp;sig=&#123;sig&#125;&amp;allow_audio_only=true&amp;allow_source=true&amp;type=any&amp;p=&#123;random&#125;'</span>;</div><div class="line">private <span class="variable">$urlTokenAPI</span> = <span class="string">'http://api.twitch.tv/api/channels/&#123;channel&#125;/access_token?client_id=&#123;client_id&#125;'</span>;</div></pre></td></tr></table></figure>
<h3 id="获取授权签名"><a href="#获取授权签名" class="headerlink" title="获取授权签名"></a>获取授权签名</h3><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_token_and_signature</span><span class="params">($channel)</span></span>&#123;</div><div class="line">    $arrGetTokenSignatureWhere = <span class="keyword">array</span>(</div><div class="line">        <span class="string">"&#123;channel&#125;"</span>       =&gt;      $channel,</div><div class="line">        <span class="string">"&#123;client_id&#125;"</span>     =&gt;      <span class="keyword">$this</span>-&gt;arrConfigSDK[<span class="string">'idClient'</span>],</div><div class="line">    );</div><div class="line">    $urlTokenAPI = <span class="keyword">$this</span>-&gt;getStrFormat(<span class="keyword">$this</span>-&gt;urlTokenAPI,$arrGetTokenSignatureWhere);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getDataFromTwitch($urlTokenAPI);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="获取指定的推流数据"><a href="#获取指定的推流数据" class="headerlink" title="获取指定的推流数据"></a>获取指定的推流数据</h3><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_live_stream</span><span class="params">($channel)</span></span>&#123;</div><div class="line">    $arrGetTokenSignature = <span class="keyword">$this</span>-&gt;get_token_and_signature($channel);</div><div class="line">    $random = <span class="keyword">$this</span>-&gt;getRandom();</div><div class="line">    $arrGetLiveStreamWhere = <span class="keyword">array</span>(</div><div class="line">        <span class="string">"&#123;channel&#125;"</span>       =&gt;      $channel,</div><div class="line">        <span class="string">"&#123;token&#125;"</span>     =&gt;      urlencode($arrGetTokenSignature[<span class="string">'token'</span>]),</div><div class="line">        <span class="string">"&#123;sig&#125;"</span>     =&gt;      $arrGetTokenSignature[<span class="string">'sig'</span>],</div><div class="line">        <span class="string">"&#123;random&#125;"</span>     =&gt;      $random,</div><div class="line">    );</div><div class="line">    $urlUsherAPI = <span class="keyword">$this</span>-&gt;getStrFormat(<span class="keyword">$this</span>-&gt;urlUsherBase,$arrGetLiveStreamWhere);</div><div class="line">    <span class="keyword">return</span> $urlUsherAPI;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="获取随机值"><a href="#获取随机值" class="headerlink" title="获取随机值"></a>获取随机值</h3><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span><span class="params">($num=<span class="number">3</span>)</span></span>&#123;</div><div class="line">    $microtime = microtime();</div><div class="line">    <span class="keyword">list</span>($uSec, $sec) = explode(<span class="string">" "</span>,$microtime);</div><div class="line">    $random = $uSec + $sec*pow(<span class="number">10</span>,$num);</div><div class="line">    <span class="keyword">return</span> intval($random);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="数据格式化"><a href="#数据格式化" class="headerlink" title="数据格式化"></a>数据格式化</h3><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStrFormat</span><span class="params">($strData,$arrData)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>($strData) &amp;&amp; !<span class="keyword">empty</span>($arrData) &amp;&amp; is_array($arrData))&#123;</div><div class="line">        $strFormat = str_replace(array_keys($arrData),array_values($arrData),$strData);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">empty</span>($strData) ? <span class="string">""</span> : <span class="keyword">empty</span>($arrData) ? $strData : <span class="keyword">empty</span>($strFormat) ? $strData : $strFormat;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://www.johannesbader.ch/2014/01/find-video-url-of-twitch-tv-live-streams-or-past-broadcasts/" target="_blank" rel="external">how to find the video url of the twtich.tv stream</a></li>
<li><a href="https://gist.github.com/baderj/8593472" target="_blank" rel="external">如何获取twitch的m3u8推流数据</a></li>
<li><a href="https://github.com/justintv/Twitch-API/blob/master/authentication.md" target="_blank" rel="external">twitch的授权</a></li>
<li><a href="https://github.com/justintv/Twitch-API/blob/master/v3_resources/streams.md" target="_blank" rel="external">关于twitch中stream相关频道详细信息</a></li>
</ul>
<div class="github-widget" data-repo="justintv/Twitch-API"></div>
]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>live</tag>
        <tag>twitch</tag>
      </tags>
  </entry>
  <entry>
    <title>越南支付的接入总结文档</title>
    <url>/2016/09/22/the-document-about-vietnam-payment/</url>
    <content><![CDATA[<p>相信接过越南支付的童鞋会对越南支付的那些支付流程感到头疼.鉴于其当地的经济情况,其支付方式也表示出多种多样.</p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>payment</tag>
      </tags>
  </entry>
  <entry>
    <title>关于谷歌云推送的应用实例</title>
    <url>/2016/09/12/application-to-send-push-notifications-using-Google-Cloud-Messaging/</url>
    <content><![CDATA[<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://blog.csdn.net/u011589986/article/details/50947997" target="_blank" rel="external">GCM(谷歌云推送)客户端服务器端开发全指南</a></p>
]]></content>
      <categories>
        <category>google</category>
      </categories>
      <tags>
        <tag>google</tag>
        <tag>push</tag>
      </tags>
  </entry>
  <entry>
    <title>在docker环境下关于gitlab的镜像部署</title>
    <url>/2016/09/12/docker-image-about-gitlab/</url>
    <content><![CDATA[<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.tuicool.com/articles/bYbi2mJ" target="_blank" rel="external">GitLab搭建与维护(基于docker镜像sameersbn/docker-gitlab)</a></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>images</tag>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>在docker环境下关于分布式LAMP方案的镜像部署</title>
    <url>/2016/09/12/docker-image-about-lamp-distributed/</url>
    <content><![CDATA[<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://my.oschina.net/ybusad/blog/499013" target="_blank" rel="external">使用Docker部署PHP应用的设计方案</a></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>images</tag>
        <tag>lamp</tag>
      </tags>
  </entry>
  <entry>
    <title>玩转docker镜像</title>
    <url>/2016/09/04/a-tutorial-about-docker/</url>
    <content><![CDATA[<p>2014年,在云计算领域最热门的话题就是 Docker,围绕着 Docker 诞生了一系列开源项目.作为IT从业人员,非常有必要掌握 Docker,跟上技术的发展趋势.</p>
<h2 id="docker介绍"><a href="#docker介绍" class="headerlink" title="docker介绍"></a>docker介绍</h2><h3 id="什么是容器"><a href="#什么是容器" class="headerlink" title="什么是容器"></a>什么是容器</h3><p>所谓的容器,就是运行在宿主机上一个进程.只不过在启动这个进程之前,进行了一些特殊处理,让这个进程进入一个全新的环境,与宿主机环境分开.所以,这个进程及其子进程认为自己进入一个相对独立的环境.</p>
<h3 id="容器的优势"><a href="#容器的优势" class="headerlink" title="容器的优势"></a>容器的优势</h3><p>相对于传统的KVM,ZEN等虚拟化或者半虚拟化技术而言,容器技术有如下几点优势:</p>
<ul>
<li>创建容器速度快,一般在1秒左右</li>
<li>删除容器速度快,速度一般在几秒左右</li>
<li>容器运行占用的额外开销非常小.</li>
</ul>
<h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><p>docker的安装目前支持64位操作系统,确定linux内核&gt;=3.10.可通过以下命令查看内核版本信息<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">uname -r</div></pre></td></tr></table></figure></p>
<p>docker的安装方式分为稳定版本和最新版本,以下以Ubuntu操作系统分别介绍两种形式.</p>
<h3 id="docker的稳定版本安装"><a href="#docker的稳定版本安装" class="headerlink" title="docker的稳定版本安装"></a>docker的稳定版本安装</h3><p>Ubuntu官方软件仓库提供了Docker的稳定版本,通过如下步骤直接安装:<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install docker.io</div></pre></td></tr></table></figure></p>
<p>Docker 安装成功之后会自动启动Docker Server.通过 ps axf | preg docker 命令同样也能检查Docker是否已经成功运行.<br><del>如果想要安装最新版本的Docker,需要把系统中稳定版本的Docker清掉,可运行如下命令:</del><br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo apt-get remove --purge docker.io</div></pre></td></tr></table></figure></p>
<h3 id="docker的最新版本安装"><a href="#docker的最新版本安装" class="headerlink" title="docker的最新版本安装"></a>docker的最新版本安装</h3><p>通过Docker的私有仓库获取最新的Docker最新版本,需要如下几个步骤:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9</div><div class="line">sudo sh -c <span class="string">"echo deb https://get.docker.com/ubuntu docker main &gt; /etc/apt/sources.list.d/docker.list"</span></div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install lxc-docker</div></pre></td></tr></table></figure>
<h2 id="docker镜像"><a href="#docker镜像" class="headerlink" title="docker镜像"></a>docker镜像</h2><h3 id="拉取docker镜像"><a href="#拉取docker镜像" class="headerlink" title="拉取docker镜像"></a>拉取docker镜像</h3><h4 id="daocloud加速器服务"><a href="#daocloud加速器服务" class="headerlink" title="daocloud加速器服务"></a>daocloud加速器服务</h4><p>如果从Docker官方的Registery拉取镜像速度很慢,我们可以参考<a href="https://dashboard.daocloud.io/mirror" target="_blank" rel="external">daocloud</a>尝试daocloud提供的加速器服务.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo <span class="built_in">echo</span> <span class="string">"DOCKER_OPTS=\"\$DOCKER_OPTS –registry-mirror=http://xxx.m.daocloud.io\""</span> &gt;&gt; /etc/default/docker</div><div class="line">sudo service docker restart</div></pre></td></tr></table></figure>
<h3 id="运行docker镜像"><a href="#运行docker镜像" class="headerlink" title="运行docker镜像"></a>运行docker镜像</h3><p>拉取docker镜像之后,需要运行该镜像.按照容器的生命周期,可以分为交互式容器和守护式容器.</p>
<h4 id="运行交互式容器"><a href="#运行交互式容器" class="headerlink" title="运行交互式容器"></a>运行交互式容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo docker run -it centos:latest /bin/bash</div></pre></td></tr></table></figure>
<p>交互式容器适合于运行一些临时性的任务,当退出bash时交互式容器的生命周期也就结束了.</p>
<h4 id="运行守护式容器"><a href="#运行守护式容器" class="headerlink" title="运行守护式容器"></a>运行守护式容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo docker run <span class="_">-d</span> centos:latest</div></pre></td></tr></table></figure>
<p>守护式容器运行在后台,这样我们就可以继续留在当前的shell中进行其他操作了.</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<ul>
<li><a href="http://www.linuxidc.com/Linux/2015-09/122885.htm" target="_blank" rel="external">如何在ubuntu上安装Docker及其基本用户</a></li>
<li><a href="http://blog.daocloud.io/how-to-master-docker-image/" target="_blank" rel="external">玩转docker镜像</a></li>
<li><a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="external">daocloud加速器</a></li>
<li><a href="http://wiki.jikexueyuan.com/project/docker/installation/ubuntu.html" target="_blank" rel="external">极客学院之Ubuntu安装篇</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>tutorial</tag>
        <tag>docker</tag>
        <tag>images</tag>
      </tags>
  </entry>
  <entry>
    <title>关于常用优秀开源库免费CDN的整理</title>
    <url>/2016/08/29/resource-about-static-file-cdn-for-free/</url>
    <content><![CDATA[<p>对网上常用优秀开源资源库免费CDN的收集与整理,方便日常开发引用.</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<ul>
<li><a href="http://my.oschina.net/smile622/blog/167785" target="_blank" rel="external">JS库免费加速CDN 整理</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>cdn</category>
      </categories>
      <tags>
        <tag>cdn</tag>
        <tag>staticFile</tag>
      </tags>
  </entry>
  <entry>
    <title>如何实现页面之间的切换不刷新</title>
    <url>/2016/08/28/how-to-switch-web-pages-without-refresh/</url>
    <content><![CDATA[<p>喜欢听网易云音乐的各位是否会对网页底部的播放器感到好奇,当我们在网站上随意切换页面时播放器却不会跟着刷新?</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<ul>
<li><a href="http://www.pangjian.info/2015/12/03/pjax-your-blog/" target="_blank" rel="external">使用Pjax优化你的网站</a></li>
<li><a href="http://www.zhangxinxu.com/wordpress/2013/06/html5-history-api-pushstate-replacestate-ajax/" target="_blank" rel="external">ajax与HTML5 history实例</a></li>
<li><a href="http://dev.duoshuo.com/docs/50b344447f32d30066000147" target="_blank" rel="external">动态加载多说评论框的方法</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>pjax</category>
      </categories>
      <tags>
        <tag>html5</tag>
        <tag>pjax</tag>
        <tag>music</tag>
      </tags>
  </entry>
  <entry>
    <title>如何让自己的部落格变成功能性更强的系统</title>
    <url>/2016/08/26/how-to-make-blog-became-a-multifunctional-system-with-plugin/</url>
    <content><![CDATA[<p>如果仅仅依靠框架的基本功能,是很难满足博主自己对部落格各种挑剔的需求.通过自己的动手实践去不断完善,也是对自己能力实践的最好体现.</p>
<h2 id="知心天气"><a href="#知心天气" class="headerlink" title="知心天气"></a>知心天气</h2><p>一个偶然的机会在查找资料的时候发现别人的博客上有个显示天气的插件还蛮好看的,下意识的想把这个<a href="http://www.thinkpage.cn/" target="_blank" rel="external">知心天气</a>移植到自己的博客上.</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h4><p>先到官网<a href="http://www.thinkpage.cn/" target="_blank" rel="external">知心天气</a>注册一个账号.</p>
<h4 id="所见即所得"><a href="#所见即所得" class="headerlink" title="所见即所得"></a>所见即所得</h4><p>找到<a href="http://www.thinkpage.cn/widget/get" target="_blank" rel="external">知心插件</a>页面,页面将根据用户需求生成相应的代码</p>
<h4 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h4><p>生成的知心插件代码分成两部分:源码的获取与配置.</p>
<ul>
<li>将源码的获取单独放在一个javascript文件中,在head文件中引用.</li>
</ul>
<p>将源码部分统一放在同一文件夹下方便管理,比如 source/js/tpwidget.js</p>
<ul>
<li>配置文件部分放在after-footer中源码文件引用的底下.源码如下,仅供参考:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">&lt;% <span class="keyword">if</span> (theme.tpwidget.on)&#123; %&gt;</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/tpwidget.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">    &lt;script&gt;</div><div class="line">    tpwidget(<span class="string">'init'</span>, &#123;</div><div class="line">        <span class="string">"flavor"</span>: <span class="string">"bubble"</span>,</div><div class="line">        <span class="string">"location"</span>: <span class="string">"WS7GQBRNR6V8"</span>,</div><div class="line">        <span class="string">"geolocation"</span>: <span class="string">"enabled"</span>,</div><div class="line">        <span class="string">"position"</span>: <span class="string">"bottom-right"</span>,</div><div class="line">        <span class="string">"margin"</span>: <span class="string">"60px 10px"</span>,</div><div class="line">        <span class="string">"language"</span>: <span class="string">"auto"</span>,</div><div class="line">        <span class="string">"unit"</span>: <span class="string">"c"</span>,</div><div class="line">        <span class="string">"theme"</span>: <span class="string">"chameleon"</span>,</div><div class="line">        <span class="string">"uid"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"hash"</span>: <span class="string">""</span></div><div class="line">    &#125;);</div><div class="line">    tpwidget(<span class="string">'show'</span>);</div><div class="line">    <span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure>
<ul>
<li>作为插件一般都很灵活,在主配置文件中设置开关.源码如下,仅供参考:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">tpwidget:</div><div class="line">  on: <span class="literal">true</span></div></pre></td></tr></table></figure>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>1.最近不知道为什么,发现这个插件无法正确显示天气,显示的是”无效请求”;百思不得其解,希望下次能解决掉它.</p>
<ul>
<li>毋庸置疑的是,发生这个问题的根源肯定是配置文件验证失败出错了.直接将知心天气后台的配置代码和自己的逐一比对,发现执行天气插件更新了验证逻辑,插件的位置参数也加入验证哈希值中了.在知心天气后台直接调整插件的位置,重新获取相应的参数可解决该问题.</li>
</ul>
<h2 id="标签云"><a href="#标签云" class="headerlink" title="标签云"></a>标签云</h2><p>标签云的设计本身已经很完善了,在借鉴了某博客的文章之后突发奇想,新增了插件<a href="http://www.goat1000.com/tagcanvas.php" target="_blank" rel="external">TagCanvas</a>,继而对标签云在效果上做了完善.从展示效果上看,该插件实际上就是将文章的所有标签转成立体化标签,随着鼠标的拖动而变化.</p>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><h4 id="下载插件脚本"><a href="#下载插件脚本" class="headerlink" title="下载插件脚本"></a>下载插件脚本</h4><p>先到官方<a href="http://www.goat1000.com/tagcanvas.php" target="_blank" rel="external">TagCanvas</a>下载脚本.根据自身的要求是否依赖jquery来选择不同的脚本.</p>
<h4 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h4><p>TagCanvas插件代码分成两部分:源码的安装与配置.</p>
<ul>
<li>将源码的获取单独放在一个javascript文件中,在head文件中引用.</li>
</ul>
<p>将源码部分统一放在同一文件夹下方便管理,比如 source/js/tagcanvas.js</p>
<ul>
<li>配置文件部分放在after-footer中源码文件引用的底下.源码如下,仅供参考:</li>
</ul>
<p>为在页面显示TagCanvas效果,需要增加html5容器.源码如下:</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">&lt;div class="tags" id="myTags"&gt;</div><div class="line"> &lt;canvas width="350" height="350" id="my3DTags"&gt;</div><div class="line">    &lt;p&gt;Anything in here will be replaced on browsers that support the canvas element&lt;/p&gt;</div><div class="line">&lt;/canvas&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;div class="tags" id="tags" style="display:none"&gt;</div><div class="line">    &lt;%- tagcloud(&#123;</div><div class="line">        min_font: 16,</div><div class="line">        max_font: 35,</div><div class="line">        amount: 999,</div><div class="line">        color: true,</div><div class="line">        start_color: 'blue',</div><div class="line">        end_color: 'red',</div><div class="line">    &#125;) %&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;p class="count"&gt;&lt;/p&gt;</div></pre></td></tr></table></figure>
<p>本文采用的my3DTags形式,考虑到TagCanvas的渲染问题,有时候无法正确显示.为了界面显示更加友好,增加异常捕获,处理如下:</p>
<ul>
<li>若渲染正常,将如实的在页面展示出来,将原有的标签云隐藏掉;</li>
<li>若未能正常渲染,需要将canvas隐藏掉,显示原有的标签云;</li>
</ul>
<p>TagCanvas具体的配置文件如下:</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      TagCanvas.Start(<span class="string">'my3DTags'</span>,<span class="string">'tags'</span>,&#123;</div><div class="line">        textFont: <span class="string">'Georgia,Optima'</span>,</div><div class="line">        textColour: <span class="literal">null</span>,</div><div class="line">        outlineColour: <span class="string">'#ff00ff'</span>,</div><div class="line">        weight: <span class="literal">true</span>,</div><div class="line">        reverse: <span class="literal">true</span>,</div><div class="line">        depth: <span class="number">0.8</span>,</div><div class="line">        maxSpeed: <span class="number">0.05</span>,</div><div class="line">        bgRadius: <span class="number">1</span>,</div><div class="line">        freezeDecel: <span class="literal">true</span></div><div class="line">      &#125;);</div><div class="line">      $(<span class="string">"#tags"</span>).css(<span class="string">'display'</span>, <span class="string">'none'</span>);</div><div class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</div><div class="line">      <span class="comment">// something went wrong, hide the canvas container</span></div><div class="line">      $(<span class="string">"#myTags"</span>).css(<span class="string">'display'</span>,<span class="string">'none'</span>);</div><div class="line">      $(<span class="string">"#tags"</span>).css(<span class="string">'display'</span>, <span class="string">'block'</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h4 id="标签与分类的统计"><a href="#标签与分类的统计" class="headerlink" title="标签与分类的统计"></a>标签与分类的统计</h4><p>为了更加直观的查看博主文章的标签和分类的数量,在标签云中增加了相关的统计.虽然功能表现上是一致的,但可能与别人的配置形式有所出入.</p>
<ul>
<li>维持插件本身的完整性,尽量不修改源码.</li>
<li>引入了其他的插件,比如pjax的引入使得页面的切换实现局部刷新,同时页面原先的事件需要重新加载.详情可参看<a href="http://blog.terrancy.com/2016/08/28/how-to-switch-web-pages-without-refresh/">如何实现页面之间的切换不刷新</a>.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">&lt;!-- Count tags and categories --&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"count"</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">%=</span> <span class="attr">__</span>('<span class="attr">tag_cloud.already</span>') %&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"category_num"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">__</span>('<span class="attr">tag_cloud.categories</span>') %&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">%=</span> <span class="attr">__</span>('<span class="attr">tag_cloud.total</span>') %&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"tag_num"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">__</span>('<span class="attr">tag_cloud.tags</span>') %&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">&lt;script&gt;</div><div class="line">  $(<span class="string">'#category_num'</span>).text($(<span class="string">".category-list-item"</span>).length);</div><div class="line">  $(<span class="string">'#tag_num'</span>).text($(<span class="string">"#tags &gt; a"</span>).length);</div><div class="line">  $(<span class="string">'#count'</span>).appendTo(<span class="string">'.count'</span>);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
        <tag>plugin</tag>
      </tags>
  </entry>
  <entry>
    <title>关于在日常生活中经常发生的git问题的梳理与总结</title>
    <url>/2016/08/24/how-to-resolve-the-common-problems-about-git-that-occurred-as-usual/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>Failure is the mother of success.</li>
</ul>
</blockquote>
<p>工作中经常会使用到git提交个人代码到仓库中,也经常会碰到很多的问题,让很多的新手感到困惑.不够”菜鸟”也不用太担心,那些”大神”不也是通过自己动手不断的”通关打怪”,一步步进阶成为万众瞩目的”专家”么.耐心点,慢慢梳理这些问题,认真总结其内在的原理和规律,相信我们也能慢慢升级.</p>
<blockquote>
<ul>
<li>Success Depends on Determination.</li>
</ul>
</blockquote>
<ul>
<li>2016年08月24号这天打算将本地的代码更新到服务器上,发现代码无法提交到Coding上去.提交了很多遍,得到的都是如下提示:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ ssh -T git@git.coding.net</div><div class="line">ssh_exchange_identification: Connection closed by remote host</div></pre></td></tr></table></figure>
<p>原因很简单,就是无法与远程服务器取得连接导致无法上传代码,然而发现却能ping得通.跑去V2EX上去看,发现原来不止我一个人也发现了同样的问题.然后安心的等待Coding自己解决.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ ssh -T git@git.coding.net</div><div class="line">Hello terrancy! You have connected to Coding.net via SSH successfully!</div></pre></td></tr></table></figure>
<ul>
<li>2016年9月15号凌晨3点左右,第14号超强台风”莫兰蒂”(中心风力17级)绕过台湾”不远千里”正面袭击厦门.之后的24小时,厦门的大部分地区面临着断水断电的困境,几乎与外界”失联”.16号一早本着”侥幸”的心理赶往公司码代码(<del>注孤生,中毒太深,已放弃治疗</del>).迫不及待地连上公司无线网络之后,本想着就可以把本地的代码提交到github服务器上,谁知竟发生下面的问题:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">FATAL ssh_dispatch_run_fatal: Connection to 192.30.253.113: Software caused conn</div><div class="line">ection abort</div><div class="line">fatal: Could not <span class="built_in">read</span> from remote repository.</div><div class="line"></div><div class="line">Please make sure you have the correct access rights</div><div class="line">and the repository exists.</div></pre></td></tr></table></figure>
<p>直接连接公司的无线网络,连ping值都很大.怀疑是网络的原因造成连接超时所致.改用以太网连接,效果也不太明显.大概是台风对厦门的网络基站的破坏造成的不稳定的缘故吧.后来直接改用隔壁同事主机无线网络做了下测试,竟然解决了问题.所以,应该是网络连接判断无误.</p>
<blockquote>
<ul>
<li>Make a Little Progress Every Day.</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>problem</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯企业邮箱域名MX记录设置异常</title>
    <url>/2016/08/22/how-to-resolve-mx-records-exception/</url>
    <content><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>上周申请公司在<a href="https://www.godaddy.com/" target="_blank" rel="external">GODADDY</a>域名服务器购买了个域名,同事用这个域名在<a href="https://exmail.qq.com/" target="_blank" rel="external">QQ企业邮箱</a>申请了企业域名邮箱.今天运营部突然告诉我”QQ企业邮箱的域名MX记录设置异常,导致收不到外部邮件”.</p>
<h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><blockquote>
<p>1.域名服务器商后台查看MX设置是否正常<br>2.检查下MX记录解析是否正确</p>
</blockquote>
<h3 id="MX记录设置"><a href="#MX记录设置" class="headerlink" title="MX记录设置"></a>MX记录设置</h3><p>上周QQ企业邮箱的申请在我不知情的情况下让网管直接弄好的,我这边只是做域名解析和站点搭建.一般情况下为方便域名的统一管理,我会把<a href="https://www.godaddy.com/" target="_blank" rel="external">GODADDY</a>上的域名全部重新转移到<a href="https://www.dnspod.com/" target="_blank" rel="external">DNSPOD</a>上.</p>
<h4 id="DNSPOD的优势"><a href="#DNSPOD的优势" class="headerlink" title="DNSPOD的优势"></a>DNSPOD的优势</h4><p>选择DNSPOD作为域名解析的后台的原因,主要考虑到:</p>
<blockquote>
<ol>
<li>DNSPOD 全球解析速度快,一般2-3分钟便能解析好.</li>
<li>GODADDY 的域名服务器容易被墙,造成解析不稳定.</li>
<li>DNSPOD 后台管理界面更加友好,用户操作简单便捷.</li>
</ol>
</blockquote>
<h4 id="DNSPOD的转移"><a href="#DNSPOD的转移" class="headerlink" title="DNSPOD的转移"></a>DNSPOD的转移</h4><blockquote>
<p>1.GODADDY上指定的域名下将域名服务器设置改为自定义,添加 A.DNSPOD.COM/B.DNSPOD.COM.此时,之前在GOODADDY上做的所有域名解析操作都将会失效.<br>2.在DNSPOD下创建域名记录,为指定的站点做好域名解析以及MX记录,也可以批量导入之前解析好的所有域名.</p>
</blockquote>
<h4 id="添加MX记录"><a href="#添加MX记录" class="headerlink" title="添加MX记录"></a>添加MX记录</h4><blockquote>
<p>1.到<a href="https://exmail.qq.com/" target="_blank" rel="external">QQ企业邮箱</a>申请企业邮箱,此时可选择指定域名服务器商.<br>2.无论是那种域名服务器上,一般情况下其解析方式和域名解析是差不多.添加相应的两条MX解析记录,比如腾讯的mxbiz1.qq.com.和 mxbiz2.qq.com.<br>3.等待腾讯确认之后即可通过管理员账号登录进去.</p>
</blockquote>
<h3 id="MX记录解析"><a href="#MX记录解析" class="headerlink" title="MX记录解析"></a>MX记录解析</h3><p>通过命令行的形式判断当前配置好的MX解析记录是否已经生效,如下所示</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><div class="line">nslookup -qt=mx <span class="keyword">abc</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>
<p>按照以上的流程走完之后,发现MX解析记录结果和我自定义的一样,但是登陆到企业邮箱之后发现还是报同样的提示.没法发送邮件给其他人”提示MX解析异常,联系管理员”.最后通过管理员后台发现MX记录解析异常,在后台重新解析了下便解决了问题.</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul>
<li>1) <a href="http://service.exmail.qq.com/cgi-bin/help?id=20012" target="_blank" rel="external">腾讯企业邮箱申请须知汇总</a></li>
<li>2) <a href="http://service.exmail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=20012&amp;&amp;no=1000570" target="_blank" rel="external">MX记录验证不通过的常见问题及解决方法</a></li>
<li>3) <a href="http://service.exmail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=20012&amp;&amp;no=1000931" target="_blank" rel="external">在DNSPod域名服务商处如何设置MX记录</a></li>
<li>4) <a href="http://www.ppmail.com.cn/info_v471.html" target="_blank" rel="external">如何查看企业邮箱MX记录</a></li>
</ul>
]]></content>
      <categories>
        <category>tencent</category>
      </categories>
      <tags>
        <tag>tencent</tag>
        <tag>email</tag>
        <tag>exception</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈支付加密及签名验证</title>
    <url>/2016/08/13/research-about-encryption-with-different-pay-sdk/</url>
    <content><![CDATA[<p>如果说做支付接入最基本的要求就是安全、稳定、快捷,那么数据安全则是支付接入的核心.只要涉及到支付,必然会对数据的准确性特别敏感.根据不同的应用场景,不同的支付渠道商会对自己的支付加密方式有不同的见解.</p>
<h2 id="以MD5加密方式系列"><a href="#以MD5加密方式系列" class="headerlink" title="以MD5加密方式系列"></a>以MD5加密方式系列</h2><p>以MD5(Message-Digest Algorithm 5)加密作为支付加密最为普遍,尽管网上也有相应的”破解方法”.使用MD5加密作为支付加密方案的渠道,加密的区别在于分配给接入商不同的签名Key.这类的加密基本可以归纳为以下几个步骤:</p>
<blockquote>
<ol>
<li>指定待加密参数有哪些,或者哪些参数不参与加密,比如签名参数signature不参与签名</li>
<li>待加密参数是否按照键排序,一般是升序</li>
<li>指定待加密参数是否要做转码转译,特别是针对某些参数值是中文.比如自定义参数,需要urlencode</li>
<li>加密的字符串的拼接方式及其连接符.这部分的拼接方式比较多,有些只要参数值拼接起来不需要任何连接符,有的需要参数的键和值之间以”<strong>=</strong>“拼接而参数直接以”<strong>&amp;</strong>“拼接.</li>
<li>将待加密的拼接好的字符串与约定好的签名Key拼接后做MD5,加密的结果一般需要转成小写.最终的结果作为校验的签名.</li>
<li>得到的签名值与参数中的指定的参数比对,相同则验证成功.</li>
</ol>
</blockquote>
<hr>
<h3 id="以新浪联运平台游戏支付为例"><a href="#以新浪联运平台游戏支付为例" class="headerlink" title="以新浪联运平台游戏支付为例"></a><a href="http://t.cn/RtTuzuJ" target="_blank" rel="external">以新浪联运平台游戏支付为例</a></h3><p>新浪联运平台游戏支付接口签名机制中,关于签名步骤如下:</p>
<blockquote>
<p>a)将所有待签名参数按参数名排序(字母字典顺序，例如PHP的ksort()函数)<br>b)把数组所有元素，按照“参数|参数值”的模式用“|”字符拼接成字符串，组成字符串A<br>c)将字符串A与 appsecret，用英文竖杠进行连接, 得到字符串B，对字符串B取sha1值，得到字符串C，C就是所需要的签名</p>
</blockquote>
<p>值得说明的是,新浪支付把支付结果(POST方式)通知给开发者配置的支付通知地址(回调地址),加密方式用的是sha1.签名代码实现如下所示:<br><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">buildRequestMysign</span><span class="params">($secret)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($_REQUEST)) <span class="keyword">return</span> <span class="keyword">FALSE</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_REQUEST[<span class="string">'signature'</span>])) <span class="keyword">unset</span>($_REQUEST[<span class="string">'signature'</span>]);</div><div class="line">    ksort($_REQUEST);</div><div class="line">    $strSignature = <span class="string">''</span>;</div><div class="line">    <span class="keyword">foreach</span> ($_REQUEST <span class="keyword">as</span> $key =&gt; $value)&#123;</div><div class="line">        $strSignature .= sprintf(<span class="string">'%s|%s|'</span>, $key, $value);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sha1($strSignature.$secret);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="以AnySDK第三方接入平台为例"><a href="#以AnySDK第三方接入平台为例" class="headerlink" title="以AnySDK第三方接入平台为例"></a><a href="http://docs.anysdk.com/PaymentNotice" target="_blank" rel="external">以AnySDK第三方接入平台为例</a></h3><p>AnySDK作为第三方支付平台,其角色处于支付渠道商与接入方之间的一道桥梁.其原理是渠道通知AnySDK服务端,再由AnySDK服务端通知接入方.因此在渠道后台需要配置AnySDK提供的充值回调,在AnySDK后台配置自己的充值回调.<br>AnySDK这么处理目的就是为了尽量统一现有的支付平台不规范支付方式,对于专注于产品研发的企业而言的确是不可多得的福利.相比于其他支付渠道商,最大的特点在于它有两步签名验证机制.</p>
<blockquote>
<p>a) 准备验签密钥 private_key<br>b) 对所有不为空的参数按照参数名字母升序排列，sign参数不参与签名；<br>c) 将排序后的参数名对应的参数值字符串方式按顺序拼接在一起(所有参数)；<br>d) 做一次md5处理并转换成小写，得到的加密串1；<br>e) 在加密串1末尾追加private_key，做一次md5加密并转换成小写，得到的字符串就是签名sign的值<br>f) 得到的签名值与参数中的sign值比对,相同则验证成功.</p>
</blockquote>
<p>值得说明的是,AnySDK支付的所有测试可以在后台根据需要配相应的参数测试,通过后台模拟充值方便调试.以下是核心签名代码实现:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkSign</span><span class="params">($data, $privateKey)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($data) || !<span class="keyword">isset</span>($data[<span class="string">'sign'</span>]) || <span class="keyword">empty</span>($privateKey)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    $sign = $data[<span class="string">'sign'</span>];</div><div class="line">    $_sign = <span class="keyword">$this</span>-&gt;getSign($data, $privateKey);</div><div class="line">    <span class="keyword">if</span> ($_sign != $sign) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>值得特别注意的是,有时候在测试的时候会出现客户端已经充值了但是后台显示却是 “<strong>充值中</strong>“,这时要特别注意AnySDK的相关说明.对于没有收到渠道通知的情况,官方的解释如下:</em></p>
<blockquote>
<p>1.用户打开支付界面后并没有支付直接关掉;<br>2.渠道后台配置的支付通知地址并不是正确的AnySDK的地址;<br>3.渠道出问题没通知或延迟通知.可先跟渠道那边确认是否有通知,通知到哪个地址.</p>
</blockquote>
<h2 id="以RSA非对称加密算法系列"><a href="#以RSA非对称加密算法系列" class="headerlink" title="以RSA非对称加密算法系列"></a>以RSA非对称加密算法系列</h2><p>通过双方约定好的公钥和私钥加密作为支付方式,作为一种非对称加密方式其安全性会更高.</p>
<blockquote>
<p>1.所谓的非对称加密算法,就是加密和解密使用的是两个不同的密钥,即公钥和私钥.公钥和私钥是一对密钥.<br>2.如果用公钥加密的数据,只有使用对应的私钥才能解密.如果用私钥加密的数据,只有使用对应的公钥才能解密.</p>
</blockquote>
<hr>
<h3 id="以游戏多游戏支付接入为例"><a href="#以游戏多游戏支付接入为例" class="headerlink" title="以游戏多游戏支付接入为例"></a>以游戏多游戏支付接入为例</h3><p>游戏多号称是中国第一多端手游用户互动平台,在同行中率先完成ios、android、html5、pc多端全平台布局,其加密方式采用的便是公私钥非对称加解密.其验证机制基本分为以下几个步骤:</p>
<blockquote>
<p>a) 游戏多传给充值回调链接传递参数.其中包括deliveryCode,checkCode,sign.<br>b) 游戏厂商在接到充值回调时,需要将deliveryCode先<strong>私钥解密</strong>后再通过查询通知接口进行确认,以防伪造通知.<br>c) 对于sign签名验证,其基本的验证方式可参考MD5签名验证,并改用<strong>公钥加密</strong>进行验证.</p>
</blockquote>
<p>游戏多采用非对称加密算法,以”公钥加密私钥解密”的方式通过查询通知接口确认订单成功与否.其核心代码如下所示:</p>
<blockquote>
<p>1.私钥解密:</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRsaDecryptByKeyPrivate</span><span class="params">($data,$keyPrivate)</span></span>&#123;</div><div class="line">    $keyPrivate = file_get_contents($keyPrivate);</div><div class="line">    openssl_private_decrypt(<span class="keyword">$this</span>-&gt;urlSafe_base64_decode($data),$decrypted,$keyPrivate);</div><div class="line">    <span class="keyword">return</span> $decrypted;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>2.公钥加密:</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRsaEncryptByKeyPublic</span><span class="params">($data,$keyPublic)</span></span>&#123;</div><div class="line">    $keyPublic = file_get_contents($keyPublic);</div><div class="line">    openssl_public_encrypt($data,$crypted,$keyPublic);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;urlSafe_base64_encode($crypted);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>3.URL安全形式的Base64编码:</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">urlSafe_base64_encode</span><span class="params">($str)</span></span>&#123;</div><div class="line">    $strFind = <span class="keyword">array</span>(<span class="string">"+"</span>,<span class="string">"/"</span>);</div><div class="line">    $strReplace = <span class="keyword">array</span>(<span class="string">"-"</span>,<span class="string">"_"</span>);</div><div class="line">    <span class="keyword">return</span> str_replace($strFind,$strReplace,base64_encode($str));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">urlSafe_base64_decode</span><span class="params">($code)</span></span>&#123;</div><div class="line">    $strFind = <span class="keyword">array</span>(<span class="string">"+"</span>,<span class="string">"/"</span>);</div><div class="line">    $strReplace = <span class="keyword">array</span>(<span class="string">"-"</span>,<span class="string">"_"</span>);</div><div class="line">    <span class="keyword">return</span> base64_decode(str_replace($strReplace,$strFind,$code));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不过,在与游戏多对接支付的时候文档上描述模棱两可造成很多误解.如有不足之处,以后再加以改正.</p>
<h2 id="其他支付验证方式"><a href="#其他支付验证方式" class="headerlink" title="其他支付验证方式"></a>其他支付验证方式</h2><p>国内接入的充值接口,其支付充值签名验证主要是通过接入方验证方式实现.而国外的主流平台,验证方式主要还是通过接入方服务端验证实现.</p>
<h3 id="以苹果支付验证为例"><a href="#以苹果支付验证为例" class="headerlink" title="以苹果支付验证为例"></a><a href="http://www.cnblogs.com/zhaoqingqing/p/4597794.html" target="_blank" rel="external">以苹果支付验证为例</a></h3><p>苹果内购(IPA)是指IOS在沙箱环境下购买成功之后,服务端会返回四个参数给应用,应用需要向苹果服务端进行二次验证,以确认是否购买成功.</p>
<blockquote>
<p>1.产品标识符: product Identifier.即在itunes store应用内定义的产品ID<br>2.交易状态: state.分别是Purchased(成功)、Restored(恢复购买)、Failed(失败)、Deferred(待确认) 四个状态<br>3.交易收据: Receipt.每笔订单的唯一交易收据,作为二次验证的重要依据<br>4.交易标识符: transaction Identifier.</p>
</blockquote>
<p>苹果内购的二次验证的基本流程,根据内购是否是沙盒模式大致分为如下几步:</p>
<blockquote>
<p>a.先将Receipt通过苹果的正式服务器验证.如果苹果返回的状态码是<strong>21007</strong>,说明该Receipt属于SandBox Receipt,但却”错误”发送至生产系统的验证服务.<br>b.如果交易属于沙盒模式,需要重新把Receipt通过苹果的沙盒测试服务器验证.<br>c.Receipt通过相应的苹果服务器验证之后,将会收到相应的返回以验证用户是否购买成功.</p>
</blockquote>
<p>关于苹果内购二次验证返回的<a href="http://t.cn/RAJBM9Z" target="_blank" rel="external">状态码</a>,其相应的解释如下所示:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>21000</td>
<td style="text-align:center">App Store不能读取你提供的JSON对象</td>
</tr>
<tr>
<td>21002</td>
<td style="text-align:center">receipt-data域的数据有问题</td>
</tr>
<tr>
<td>21003</td>
<td style="text-align:center">receipt无法通过验证</td>
</tr>
<tr>
<td>21004</td>
<td style="text-align:center">提供的shared secret不匹配你账号中的shared secret</td>
</tr>
<tr>
<td>21005</td>
<td style="text-align:center">receipt服务器当前不可用</td>
</tr>
<tr>
<td>21006</td>
<td style="text-align:center">receipt合法，但是订阅已过期。服务器接收到这个状态码时，receipt数据仍然会解码并一起发送</td>
</tr>
<tr>
<td>21007</td>
<td style="text-align:center">receipt是Sandbox receipt，但却发送至生产系统的验证服务</td>
</tr>
<tr>
<td>21008</td>
<td style="text-align:center">receipt是生产receipt，但却发送至Sandbox环境的验证服务</td>
</tr>
</tbody>
</table>
<p>苹果内购二次验证的核心代码如下所示:</p>
<blockquote>
<ol>
<li>向苹果服务器端提交内购二次验证:</li>
</ol>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">curlByIOSPay</span><span class="params">($receipt_data, $sandbox=<span class="number">0</span>)</span></span>&#123;</div><div class="line"></div><div class="line">    $fieldPost = <span class="keyword">array</span>(<span class="string">"receipt-data"</span> =&gt; $receipt_data);</div><div class="line">    $jsonFieldPost = json_encode($fieldPost);</div><div class="line"></div><div class="line">    $url_buy     = <span class="string">"https://buy.itunes.apple.com/verifyReceipt"</span>;</div><div class="line">    $url_sandbox = <span class="string">"https://sandbox.itunes.apple.com/verifyReceipt"</span>;</div><div class="line">    $url = $sandbox ? $url_sandbox : $url_buy;</div><div class="line"></div><div class="line">    $ch = curl_init($url);</div><div class="line">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</div><div class="line">    curl_setopt($ch, CURLOPT_POST, <span class="number">1</span>);</div><div class="line">    curl_setopt($ch, CURLOPT_POSTFIELDS, $jsonFieldPost);</div><div class="line">    curl_setopt ($ch, CURLOPT_SSL_VERIFYPEER, <span class="number">0</span>);</div><div class="line">    curl_setopt ($ch, CURLOPT_SSL_VERIFYHOST, <span class="number">0</span>);</div><div class="line">    $result = curl_exec($ch);</div><div class="line">    curl_close($ch);</div><div class="line">    <span class="keyword">return</span> $result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>2.苹果内购二次验证流程:</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">verifyPaySign</span><span class="params">($arrData)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>($arrData))&#123;</div><div class="line">        $tokenPay = $arrData[<span class="string">'paytoken'</span>];</div><div class="line">        <span class="keyword">if</span>(strlen($tokenPay) &gt;= <span class="number">20</span>)&#123;</div><div class="line">            $arrVerifyPayGetIfSandbox = json_decode(<span class="keyword">$this</span>-&gt;paySDK-&gt;curlByIOSPay($tokenPay),<span class="keyword">true</span>);</div><div class="line">            <span class="keyword">if</span>($arrVerifyPayGetIfSandbox[<span class="string">'status'</span>] == <span class="string">'21007'</span>)&#123;</div><div class="line">                $arrVerifyPayGetIfSandbox = json_decode(<span class="keyword">$this</span>-&gt;paySDK-&gt;curlByIOSPay($tokenPay,<span class="number">1</span>),<span class="keyword">true</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    $arrRst = <span class="keyword">empty</span>($arrVerifyPayGetIfSandbox) ? <span class="keyword">array</span>() : $arrVerifyPayGetIfSandbox;</div><div class="line">    <span class="keyword">return</span> json_encode($arrRst);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="以谷歌充值验证为例"><a href="#以谷歌充值验证为例" class="headerlink" title="以谷歌充值验证为例"></a>以谷歌充值验证为例</h3><p>与苹果内购相类似的,谷歌内购几乎也走相近的验证方式.当用户通过客户端完成充值之后,谷歌服务器会通过充值回调链接下发通知给服务端.服务端再通过这些数据进行验证,从而判断该笔订单的合法性.这对于受尽国外某些伪订单肆虐之苦的商家而言无疑是一个保障.</p>
<h4 id="谷歌服务器回调参数格式"><a href="#谷歌服务器回调参数格式" class="headerlink" title="谷歌服务器回调参数格式"></a>谷歌服务器回调参数格式</h4><p>当用户在客户端完成充值之后,谷歌服务器会自动往相应的服务端下发固定格式的参数.如下所示:</p>
<table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>nonce</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>order</td>
<td style="text-align:center">订单详情(json对象)</td>
</tr>
</tbody>
</table>
<p>关于订单详情的json对象,其固定的数据格式如下所示:</p>
<table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>consumptionState</td>
<td style="text-align:center">消费状态</td>
</tr>
<tr>
<td>developerPayload</td>
<td style="text-align:center">谷歌开发者特殊单号字符串</td>
</tr>
<tr>
<td>kind</td>
<td style="text-align:center">支付类型</td>
</tr>
<tr>
<td>purchaseState</td>
<td style="text-align:center">支付状态:0表示已支付,1表示取消支付</td>
</tr>
<tr>
<td>purchaseTimeMillis</td>
<td style="text-align:center">支付时的时间</td>
</tr>
</tbody>
</table>
<h4 id="谷歌验证的基本流程"><a href="#谷歌验证的基本流程" class="headerlink" title="谷歌验证的基本流程"></a>谷歌验证的基本流程</h4><h4 id="谷歌API类库的引入"><a href="#谷歌API类库的引入" class="headerlink" title="谷歌API类库的引入"></a>谷歌API类库的引入</h4><h4 id="谷歌验证的核心代码"><a href="#谷歌验证的核心代码" class="headerlink" title="谷歌验证的核心代码"></a>谷歌验证的核心代码</h4><ul>
<li>对于谷歌旧版API类库(Google API V2)</li>
</ul>
<p>谷歌API类库是对谷歌当前的所有API的封装,但是对于谷歌内购验证部分而言并非所需要.所以,我们需要有目的的调用其中的某些API即可.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">androidPublisher</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span>  $client;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($arrPaySetting)</span> </span>&#123;</div><div class="line">        $dirKeyFile = dirname(<span class="keyword">__FILE__</span>).<span class="string">"/p12/"</span>;</div><div class="line">        $keyFileName = $dirKeyFile.$arrPaySetting[<span class="string">"keyFileName"</span>];</div><div class="line">        <span class="keyword">require_once</span> (dirname(<span class="keyword">__FILE__</span>) . <span class="string">'/autoload.php'</span>);</div><div class="line">        <span class="keyword">$this</span>-&gt;client = <span class="keyword">new</span> Google_Client();</div><div class="line">        <span class="keyword">$this</span>-&gt;client-&gt;setApplicationName($arrPaySetting[<span class="string">"applicationName"</span>] );</div><div class="line">        <span class="keyword">$this</span>-&gt;client-&gt;setClientId($arrPaySetting[<span class="string">"idClient"</span>]);</div><div class="line">        $key = file_get_contents($keyFileName);</div><div class="line">        $service_account_name = $arrPaySetting[<span class="string">"accountName"</span>];</div><div class="line">        $auth = <span class="keyword">new</span> Google_Auth_AssertionCredentials( $service_account_name,  <span class="keyword">array</span>(<span class="string">'https://www.googleapis.com/auth/androidpublisher'</span>), $key);</div><div class="line">        <span class="keyword">$this</span>-&gt;client-&gt;setAssertionCredentials($auth);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">verifyAndroidPublisher</span><span class="params">($idApp,$idProduct,$purchaseToken)</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            $externalAppId=$idApp;</div><div class="line">            $externalProductId=$idProduct;</div><div class="line">            $purchaseToken=<span class="keyword">array</span>($purchaseToken);</div><div class="line">            <span class="keyword">require_once</span> (dirname(<span class="keyword">__FILE__</span>) . <span class="string">'/autoload.php'</span>);</div><div class="line">            $service = <span class="keyword">new</span> Google_Service_AndroidPublisher(<span class="keyword">$this</span>-&gt;client);</div><div class="line">            $googleApiResult = $service-&gt;purchases_products-&gt;get($externalAppId,$externalProductId,$purchaseToken);</div><div class="line">            <span class="keyword">if</span>(array_key_exists(<span class="string">'purchaseState'</span>,$googleApiResult) &amp;&amp; $googleApiResult[<span class="string">'purchaseState'</span>] == <span class="number">0</span>)&#123;</div><div class="line">              $rst = <span class="number">1</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">              $rst = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e)&#123;</div><div class="line">           $rst = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> $rst;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>对于谷歌最新版本API类库(Google API V3)</li>
</ul>
<h4 id="谷歌支付跳过的那些坑"><a href="#谷歌支付跳过的那些坑" class="headerlink" title="谷歌支付跳过的那些坑"></a>谷歌支付跳过的那些坑</h4><ul>
<li>请求该支付验证接口之前,谷歌需要先验证发起该请求的用户权限,所以需要根据文档提示的要求给予合理的权限.</li>
<li>提起”争议”,获取钻石后全身而退.<br>谷歌支付验证接口虽然可以有效的过滤到某些别有用心的人刻意的假单,但就算是走了正确的充值流程也会让玩家完全可以”免费”拿走钻石并且全身而退的情况.玩家充值之后并未付款而是待钻石收入囊中之后,向谷歌售后服务人员申请”未到账”的争议,而这些”愚蠢”的售后人员非但不会与卖家联系了解情况,反而直接把账单取消掉了.</li>
</ul>
<h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><p>以上是关于充值过程支付加密及其签名验证机制的一些总结和看法,有很多的不足须待以后逐渐优化和完善.</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.cnblogs.com/zhaoqingqing/p/4597794.html" target="_blank" rel="external">IOS In App Purchase(内购)验证</a></li>
<li><a href="http://blog.csdn.net/a351945755/article/details/25691343" target="_blank" rel="external">google play支付如何用php验证订单完成的合法性</a></li>
<li><a href="https://developers.google.com/android-publisher/api-ref/purchases/products?hl=zh-CN" target="_blank" rel="external">Google Play Developer API</a></li>
</ul>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>pay</tag>
        <tag>encrypt</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈九游直播接入</title>
    <url>/2016/08/11/research-about-using-live-from-alibaba/</url>
    <content><![CDATA[<h2 id="浅谈九游直播接入"><a href="#浅谈九游直播接入" class="headerlink" title="浅谈九游直播接入"></a>浅谈九游直播接入</h2><h3 id="浅谈九游直播接入-1"><a href="#浅谈九游直播接入-1" class="headerlink" title="浅谈九游直播接入"></a>浅谈九游直播接入</h3><h4 id="浅谈九游直播接入-2"><a href="#浅谈九游直播接入-2" class="headerlink" title="浅谈九游直播接入"></a>浅谈九游直播接入</h4><h2 id="浅谈九游直播接入-3"><a href="#浅谈九游直播接入-3" class="headerlink" title="浅谈九游直播接入"></a>浅谈九游直播接入</h2><h3 id="浅谈九游直播接入-4"><a href="#浅谈九游直播接入-4" class="headerlink" title="浅谈九游直播接入"></a>浅谈九游直播接入</h3><h4 id="浅谈九游直播接入-5"><a href="#浅谈九游直播接入-5" class="headerlink" title="浅谈九游直播接入"></a>浅谈九游直播接入</h4><div class="github-widget" data-repo="terrancy/liveAliSDK"></div>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>live</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈支付SDK的接入</title>
    <url>/2016/08/11/research-about-using-sdk-pay-from-different-channel/</url>
    <content><![CDATA[<p>相信很多程序猿或多或少的都接触过支付接入,纵观市面的各种不同渠道的支付,可能因为其各种不同的原因导致其支付的方式也不同.笔者在游戏研发公司工作期间,也接触过各种不同的渠道支付,先就其不同的支付方式做如下的总结.</p>
<h2 id="关于市场上各种支付SDK的各种困惑"><a href="#关于市场上各种支付SDK的各种困惑" class="headerlink" title="关于市场上各种支付SDK的各种困惑"></a>关于市场上各种支付SDK的各种困惑</h2><p>市面上不同的渠道的支付方式,其支付方式的差异.究其原因,不外乎以下几种:</p>
<blockquote>
<ul>
<li>渠道本身以前是做网页支付出身的,随着手机支付的普及而不得不扩展手机支付业务.但又迫于原先网页支付功能的繁杂和兼容性的问题,开发出的手机支付实用性差强人意.比如台湾的MyCardPay.</li>
<li>出于渠道本身的业务需求,很多大渠道对其支付的流程设计更加精细,比如充值过程中出现的漏单之后回单推送.对其支付验证更加严谨,比如使用各种不同的加密方式.比如AliPay.</li>
<li>不同渠道的回调接口传参方式不一,如常见的GET,POST.参数的格式各异,如常见的ARRAY,JSON,XML,<strong>String</strong>.需要特别说明的是,这里的字符串需要渠道提供解析方式.比如SamSungPay.</li>
</ul>
</blockquote>
<p>即便不同渠道的支付有诸如以上类似的原因而出现各种不同的接入流程,但主流支付方式的接入方式都大同小异,同时也催生了很多专门接入支付需求的公司.比如AnySDK由此应运而生,当然也不是万能的.</p>
<h2 id="主流渠道支付方式的基本流程"><a href="#主流渠道支付方式的基本流程" class="headerlink" title="主流渠道支付方式的基本流程"></a>主流渠道支付方式的基本流程</h2><blockquote>
<ul>
<li>传入参数的解析,包括接收方式和参数的解析方式.</li>
<li>支付签名验证.验签的目的在于身份验证,需要使用渠道商和接入支付的公司书双方约定的签名加密.比如常见的MD5加密,对称加密.除此之外,支付渠道商会多传入支付状态的参数来通知接入方当前订单是否有效.</li>
<li>接入方订单存单以及相应的逻辑操作.无论订单是否有效,都需要把订单存单,应该算是常识吧.如果订单是有效的,需要判断是否属于重复订单.然后根据公司的业务做相应的处理.比如通知服务端给玩家发放钻石.</li>
<li>通知渠道商订单状态.一般情况下,如果通知渠道商订单失败或者超过规定的时间内(一般在3-6秒内)没有接收到指定格式的通知.支付渠道商会按照一定的时间间隔推送消息.</li>
<li>特殊情况下,如果因为某些原因渠道商没有收到接入方的充值通知.除了推送,渠道还可能会集中一段时间回单推送.不过这种情况很少见,有些支付渠道商会考虑到这个应用场景,也提供这样的推送方式.可见细节决定了成败哈.</li>
</ul>
</blockquote>
<h2 id="关于支付渠道接入的差异化的解决方案"><a href="#关于支付渠道接入的差异化的解决方案" class="headerlink" title="关于支付渠道接入的差异化的解决方案"></a>关于支付渠道接入的差异化的解决方案</h2><p>支付渠道接入的差异化几乎没法让程序猿完全从中解脱出来,最主要的是渠道商传给接入方的参数没办法统一.特别的,其中有个参数即商家自定义参数,会如实的将客户端透过支付渠道商数据传回来.很明显,这个参数才是程序猿处理业务逻辑的关键参数.不过受限于参数字符长度的原因,有时候一个参数是解决不了事情的.所以,想个合理的解决方案至关重要.现谈谈个人针对以上问题解决方案,如下:</p>
<blockquote>
<ul>
<li>客户端在真正发起支付前先通知服务端,把服务端需要完成支付的所有参数通过接口都传给服务端,服务端将这些参数都存在临时订单表并生成唯一的临时订单号,比如表自增长字段,这个临时订单号同时也是用户自定义订单号将通过该接口回传给客户端.</li>
<li>客户端再发起真正的支付通知,同时将用户自定义订单号作为用户自定义参数.这样就完美解决用户自定义参数长度有限的问题,同时也统一了参数并拿到所有处理业务逻辑的参数.更重要的是,也可以将处理逻辑业务的流程部分整个抽象出来.</li>
<li>抽象出支付签名验证部分,作为支付的常见工具类.如此一来,程序猿每接入一个渠道就只需要专心解决这个部分就好了.如果能再深入规范化支付签名验证部分,就可以让支付接入的难度逐步降低.</li>
</ul>
</blockquote>
<p>以上是关于支付SDK接入差异化的解决方案,以后会针对某些典型的支付渠道重点讲解.</p>
<div class="github-widget" data-repo="terrancy/PaySDK"></div>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>payment</tag>
      </tags>
  </entry>
  <entry>
    <title>html5视频播放器DPlayer</title>
    <url>/2016/05/21/how-to-use-plugin-DPlayer/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<ul>
<li>入梦时节满熏香,梦醒犹记四月谎</li>
</ul>
</blockquote>
<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><blockquote>
<ul>
<li>在V2EX上瞎逛,偶然间看到DlYgod发布在Github上的一个<a href="http://dplayer.js.org" target="_blank" rel="external">项目</a>,一个具有弹幕的html5视频播放器.</li>
<li>重点在于现在支持直播,格式是mp4和u3d8推流.看来可以结合阿里直播好好玩一阵子了.</li>
</ul>
</blockquote>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><div class="container"><br>    <div class="dplayer"></div><br></div></p>
<script>
    var dp = new DPlayer({
        element: document.getElementsByClassName('dplayer')[0],
        autoplay: false,
        theme: '#FADFA3',
        loop: true,
        video: {
            url: 'http://devtest.qiniudn.com/若能绽放光芒.mp4',
            pic: 'http://devtest.qiniudn.com/若能绽放光芒.png'
        },
        danmaku: {
            id: '9E2E3368B56CDBB4',
            api: 'https://dplayer.daoapp.io/',
            token: 'tokendemo'
        }
    });
</script>

<p>感觉这首歌儿不错,再加上作者的介绍,不自觉的去B站看<a href="http://bangumi.bilibili.com/anime/1699" target="_blank" rel="external">四月</a>,感兴趣的可以去看看.</p>
<blockquote>
<p>附上人家的github,喜欢的话可以去人家的github给个start鼓励下.</p>
</blockquote>
<!-- <div class='github-widget' data-repo='DIYgod/DPlayer'><div> -->
]]></content>
      <categories>
        <category>html5</category>
      </categories>
      <tags>
        <tag>html5</tag>
        <tag>danmaku</tag>
      </tags>
  </entry>
  <entry>
    <title>html5视频播放器VideoJS</title>
    <url>/2016/05/18/how-to-use-javascript-about-videoJs/</url>
    <content><![CDATA[<blockquote>
<p>Video.js 是一个通用的在网页上嵌入视频播放器的 JS 库，Video.js 自动检测浏览器对 HTML5 的支持情况，如果不支持 HTML5 则自动使用 Flash 播放器。</p>
</blockquote>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>最近公司游戏正在如火如荼的推广中,也陆续招来了美女主播.以此为背景,公司打算制作属于自己的主播平台.因为游戏是九游独家代理,很自然就使用了阿里直播技术.本文引用第三方视频播放技术,详细介绍Video.js的使用.</p>
<h3 id="VideoJS的介绍"><a href="#VideoJS的介绍" class="headerlink" title="VideoJS的介绍"></a>VideoJS的介绍</h3><blockquote>
<p>Video.js - open source HTML5 &amp; Flash video player</p>
</blockquote>
<p>正如VideoJS在<a href="https://github.com/videojs/video.js" target="_blank" rel="external">Github</a>上的介绍,相比于其他的视频播放器Video.js是一个开源的html和flash的视频播放器.Video.js会自动检测浏览器对html5是否支持,如果不支持则自动使用flash播放器.截止至2010年,包括youtube在内,已累计有200,000个网站使用该项目作为视频播放器.如果想要查看其详细的文档,可以移步至其<a href="http://www.videojs.com" target="_blank" rel="external">官网</a>查看更多.</p>
<h3 id="VideoJS的引用"><a href="#VideoJS的引用" class="headerlink" title="VideoJS的引用"></a>VideoJS的引用</h3><ul>
<li>插件引入,只需在head标签中引入如下代码:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">&lt;link href=<span class="string">"//vjs.zencdn.net/5.8/video-js.min.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//vjs.zencdn.net/5.8/video.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<ul>
<li>根据项目需要,在video标签中引用指定的数据源.</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"really-cool-video"</span> <span class="attr">class</span>=<span class="string">"video-js vjs-default-skin"</span> <span class="attr">controls</span></span></div><div class="line"> <span class="attr">preload</span>=<span class="string">"auto"</span> <span class="attr">width</span>=<span class="string">"640"</span> <span class="attr">height</span>=<span class="string">"264"</span> <span class="attr">poster</span>=<span class="string">"really-cool-video-poster.jpg"</span></div><div class="line"> <span class="attr">data-setup</span>=<span class="string">'&#123;&#125;'</span>&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"really-cool-video.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"really-cool-video.webm"</span> <span class="attr">type</span>=<span class="string">"video/webm"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"vjs-no-js"</span>&gt;</span></div><div class="line">    To view this video please enable JavaScript, and consider upgrading to a web browser</div><div class="line">    that <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://videojs.com/html5-video-support/"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>supports HTML5 video<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>如果希望让用户自己选择数据源,可以通过data-setup属性手动加载.但必须保证其数据格式是有效的json格式.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> player = videojs(<span class="string">'really-cool-video'</span>, &#123; <span class="comment">/* Options */</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Good to go!'</span>);</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.play(); <span class="comment">// if you don't trust autoplay for some reason</span></div><div class="line"></div><div class="line">  <span class="comment">// How about an event listener?</span></div><div class="line">  <span class="keyword">this</span>.on(<span class="string">'ended'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'awww...over so soon?'</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h3>]]></content>
      <categories>
        <category>html5</category>
      </categories>
      <tags>
        <tag>html5</tag>
        <tag>VideoJS</tag>
      </tags>
  </entry>
  <entry>
    <title>HEXO+Github,搭建属于自己的博客</title>
    <url>/2016/05/11/how-to-bulid-blog-with-hexo/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
<div class="github-widget" data-repo="terrancy/terrancy.github.io"></div>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
        <tag>node</tag>
        <tag>gifthub</tag>
      </tags>
  </entry>
  <entry>
    <title>围城</title>
    <url>/2016/05/11/fortress-besieged-personal/</url>
    <content><![CDATA[<blockquote>
<p>题记,就像钱钟书在围城中写道,人生是围城，婚姻是围城，冲进去了，就被生存的种种烦愁包围</p>
</blockquote>
<h2 id="人生是围城-婚姻亦是围城"><a href="#人生是围城-婚姻亦是围城" class="headerlink" title="人生是围城,婚姻亦是围城."></a>人生是围城,婚姻亦是围城.</h2><h3 id="婚姻是一座围城-城外的人想进去-城里的人想出来"><a href="#婚姻是一座围城-城外的人想进去-城里的人想出来" class="headerlink" title="婚姻是一座围城,城外的人想进去,城里的人想出来."></a>婚姻是一座围城,城外的人想进去,城里的人想出来.</h3><p>人生似围城,往往使人当局者迷旁观者清.最近发生了很多事,也经历了很多事情.似乎也懂得了一个道理,越是没有安全感的人,越会用谎言来伪装自己.以前在围城里,满怀信任的接受它,可随着时间却发现浑身是伤,渐行渐远.后来跳出围城之后,渐渐明白了,也许是我太冷血.可是我还是宁愿选择置之不理,不管不顾.<br>作为一名不称职的程序猿,我喜欢用python.喜欢它的一句至理名言,<strong><em>人生苦短,我用python</em></strong>.</p>
<h2 id="思绪错乱-未完待续"><a href="#思绪错乱-未完待续" class="headerlink" title="思绪错乱,未完待续."></a>思绪错乱,未完待续.</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=28793052&auto=0&height=66"></iframe>
]]></content>
      <categories>
        <category>jotting</category>
      </categories>
      <tags>
        <tag>jotting</tag>
      </tags>
  </entry>
  <entry>
    <title>如何科学上网</title>
    <url>/2016/05/10/how-to-surfing-the-internet-all-over-the-world/</url>
    <content><![CDATA[<blockquote>
<p>本文以shadowsocks为例,利用现有的资源科学上网.主要包括三部分:购买国外的VPS服务器,搭建shadowsocks服务器,搭建shadowsocks客服端.</p>
</blockquote>
<h2 id="购买国外的VPS服务器"><a href="#购买国外的VPS服务器" class="headerlink" title="购买国外的VPS服务器"></a>购买国外的VPS服务器</h2><h3 id="购买便宜的vps服务器"><a href="#购买便宜的vps服务器" class="headerlink" title="购买便宜的vps服务器"></a>购买便宜的vps服务器</h3><p>如果只是需要搭建shadowsocks而已,配置上要求几乎不高.只需要购买一台低配的linux服务器.比较出名有几家,比如bandwagonhost(国内俗称搬瓦工的服务器供应商),OpenVZ架构 256MB内存  10GB硬盘 500GB流量/月 19.99美元/年（折合人民币10元/月）,便宜又划算吧,感兴趣的童鞋可移步至其<a href="https://bandwagonhost.com/aff.php?aff=1285&amp;pid=12" target="_blank" rel="external">官网</a>.</p>
<h2 id="搭建shadowsocks服务端"><a href="#搭建shadowsocks服务端" class="headerlink" title="搭建shadowsocks服务端"></a>搭建shadowsocks服务端</h2><blockquote>
<p>shadowsocks服务端是基于python,采用脚本的好处在于linux环境下基本支持.根据linux系统的区别,其代码大同小异.</p>
</blockquote>
<h3 id="第一步先配置下系统环境并现在shadowsocks源码"><a href="#第一步先配置下系统环境并现在shadowsocks源码" class="headerlink" title="第一步先配置下系统环境并现在shadowsocks源码."></a>第一步先配置下系统环境并现在shadowsocks源码.</h3><p><strong>centos:</strong><br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">yum install epel-release</div><div class="line">yum update</div><div class="line">yum install python-setuptools m2crypto supervisor</div><div class="line">easy_install pip</div><div class="line">pip install shadowsocks</div></pre></td></tr></table></figure></p>
<p><strong>ubuntu:</strong><br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">apt-get install epel-release</div><div class="line">apt-get update</div><div class="line">apt-get install python-setuptools m2crypto supervisor</div><div class="line">easy_install pip</div><div class="line">pip install shadowsocks</div></pre></td></tr></table></figure></p>
<h3 id="第二步shadowsocks服务端基本配置"><a href="#第二步shadowsocks服务端基本配置" class="headerlink" title="第二步shadowsocks服务端基本配置"></a>第二步shadowsocks服务端基本配置</h3><p>键入如下命令配置shadowsocks.json<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">vi /etc/shadowsocks.json</div></pre></td></tr></table></figure></p>
<p>结合服务器和自己的需要,在shadowsocks.json配置文件下粘贴如下脚本并做相应的修改<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"server"</span>:<span class="string">"0.0.0.0"</span>,</div><div class="line">    <span class="string">"server_port"</span>:8388,</div><div class="line">    <span class="string">"local_port"</span>:1080,</div><div class="line">    <span class="string">"password"</span>:<span class="string">"yourpassword"</span>,</div><div class="line">    <span class="string">"timeout"</span>:600,</div><div class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中,<strong>server_port</strong>:shadowsocks服务端端口,<strong>passowrd</strong>:shadowsocks服务端的密码.这两个可根据自己的需要进行修改.</p>
<h3 id="第三步shadowsocks开机自启"><a href="#第三步shadowsocks开机自启" class="headerlink" title="第三步shadowsocks开机自启"></a>第三步shadowsocks开机自启</h3><blockquote>
<p>未完待续</p>
</blockquote>
<h2 id="搭建shadowsocks客户端"><a href="#搭建shadowsocks客户端" class="headerlink" title="搭建shadowsocks客户端"></a>搭建shadowsocks客户端</h2><blockquote>
<p>shadowsocks客户端配置和服端配置流程是类似,区别在于配置文件上.以下着重介绍之.</p>
</blockquote>
<h3 id="shadowsocks客户端基本配置"><a href="#shadowsocks客户端基本配置" class="headerlink" title="shadowsocks客户端基本配置"></a>shadowsocks客户端基本配置</h3><h4 id="命令行下配置shadowsocks"><a href="#命令行下配置shadowsocks" class="headerlink" title="命令行下配置shadowsocks."></a>命令行下配置shadowsocks.</h4><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><p>首先我们需要创建在本地目录下创建一个针对客户端的配置文件,键入如下命令配置shadowsocks.json<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">vi /home/ubuntu/shadowsocks.json</div></pre></td></tr></table></figure></p>
<p>结合服务器和自己的需要,在shadowsocks.json配置文件下粘贴如下脚本并做相应的修改<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"server"</span>:<span class="string">"yourserver"</span>,</div><div class="line">    <span class="string">"server_port"</span>:8388,</div><div class="line">    <span class="string">"local_port"</span>:1080,</div><div class="line">    <span class="string">"password"</span>:<span class="string">"yourpassword"</span>,</div><div class="line">    <span class="string">"timeout"</span>:600,</div><div class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中,<strong>server</strong>:shadowsocks服务端ip,<strong>server_port</strong>:shadowsocks服务端端口,<strong>passowrd</strong>:shadowsocks服务端的密码.这两个可根据自己的需要进行修改.</p>
<h5 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h5><p>如何配置文件没有问题的话,我们就可以在虚拟终端上输入<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sslocal -c /home/ubuntu/shadowsocks.json</div></pre></td></tr></table></figure></p>
<p>回车运行.</p>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>命令下配置shadowsocks这个方法本身比较简单,还是可以设置开机启动一劳永逸.但是,这种代理的设置方式一般是全局的,意味着当我们访问国内的站点反而变得很慢.</p>
<h4 id="安装GUI图形界面程序"><a href="#安装GUI图形界面程序" class="headerlink" title="安装GUI图形界面程序"></a>安装GUI图形界面程序</h4><p>安装图形界面之后,其配置和在windows下就一样了,这样使用起来反倒得心应手了.</p>
<h5 id="安装shadowsocks-qt5-GUI图形界面"><a href="#安装shadowsocks-qt5-GUI图形界面" class="headerlink" title="安装shadowsocks-qt5 GUI图形界面"></a>安装shadowsocks-qt5 GUI图形界面</h5><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo add-apt-repository ppa:hzwhuang/ss-qt5</div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install shadowsocks-qt5</div></pre></td></tr></table></figure>
<h5 id="导入相关的配置文件"><a href="#导入相关的配置文件" class="headerlink" title="导入相关的配置文件"></a>导入相关的配置文件</h5><p>创建文件如 gui-config.json,<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="string">"configs"</span> : [</div><div class="line">  &#123;</div><div class="line">    <span class="string">"server"</span> : <span class="string">"server_ip"</span>,</div><div class="line">    <span class="string">"server_port"</span> : <span class="string">"server_port"</span>,</div><div class="line">    <span class="string">"password"</span> : <span class="string">"password"</span>,</div><div class="line">    <span class="string">"method"</span> : <span class="string">"aes-256-cfb"</span>,</div><div class="line">    <span class="string">"remarks"</span> : <span class="string">""</span></div><div class="line">  &#125;</div><div class="line">],</div><div class="line"><span class="string">"index"</span> : 0,</div><div class="line"><span class="string">"global"</span> : <span class="literal">false</span>,</div><div class="line"><span class="string">"enabled"</span> : <span class="literal">true</span>,</div><div class="line"><span class="string">"shareOverLan"</span> : <span class="literal">true</span>,</div><div class="line"><span class="string">"isDefault"</span> : <span class="literal">false</span>,</div><div class="line"><span class="string">"localPort"</span> : 1080</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>经过上面配置之后,此时实际上只是启动了sslocal但若要上网还需要配置浏览器到指定的代理端口才可以上网.</p>
<h3 id="配置IPV6可用的环境"><a href="#配置IPV6可用的环境" class="headerlink" title="配置IPV6可用的环境"></a>配置IPV6可用的环境</h3><p>在自己有IPV6网络的情况下,使用shadowsocks代理的情况下迅雷下载资源最快可达100bps.如果本地是IPV4网络,下载速度基本上能够达到本地最大带宽.</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<ul>
<li><a href="http://shadowsocks.blogspot.com/" target="_blank" rel="external">shadowsocks搭建教程</a></li>
<li><a href="https://aitanlu.com/ubuntu-shadowsocks-ke-hu-duan-pei-zhi.html" target="_blank" rel="external">linux-ubuntu使用shadowsocks客户端配置</a></li>
<li><a href="https://github.com/shadowsocks/shadowsocks-qt5/wiki/%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97" target="_blank" rel="external">shadowsocks-qt5安装教程</a></li>
<li><a href="http://blog.cvmarcher.com/posts/2015/05/27/set-up-vpn-in-centos-6-5/" target="_blank" rel="external">在Centos 6.5搭建VPN服务器</a></li>
<li><a href="https://www.iots.vip/post/centos-shadowsocks.html" target="_blank" rel="external">Centos一键搭建SS与多用户配置</a></li>
<li><a href="https://www.iots.vip/post/free-docker-deploy-shadowsocks.html" target="_blank" rel="external">利用日本免费Docker搭建个人SS服务</a></li>
<li><a href="https://www.noobyy.com/31.html" target="_blank" rel="external">V2ray搭建服务器详细图文教程</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>tutorial</category>
      </categories>
      <tags>
        <tag>tutorial</tag>
        <tag>shadowsocks</tag>
      </tags>
  </entry>
</search>
